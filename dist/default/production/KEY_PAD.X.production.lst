

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue May 24 21:10:06 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,delta=2
    48                           	psect	text36,local,class=CODE,merge=1,delta=2
    49                           	psect	text37,local,class=CODE,merge=1,delta=2
    50                           	psect	text38,local,class=CODE,merge=1,delta=2
    51                           	psect	text39,local,class=CODE,merge=1,delta=2
    52                           	psect	text40,local,class=CODE,merge=1,delta=2
    53                           	psect	text41,local,class=CODE,merge=1,delta=2
    54                           	psect	text42,local,class=CODE,merge=1,delta=2
    55                           	psect	text43,local,class=CODE,merge=1,delta=2
    56                           	psect	text44,local,class=CODE,merge=1,delta=2
    57                           	psect	text45,local,class=CODE,merge=1,delta=2
    58                           	psect	text46,local,class=CODE,merge=1,delta=2
    59                           	psect	text47,local,class=CODE,merge=1,delta=2
    60                           	psect	text48,local,class=CODE,merge=1,delta=2
    61                           	psect	text49,local,class=CODE,merge=1,delta=2
    62                           	psect	text50,local,class=CODE,merge=1,delta=2
    63                           	psect	text51,local,class=CODE,merge=1,delta=2
    64                           	psect	text52,local,class=CODE,merge=1,delta=2
    65                           	psect	text53,local,class=CODE,merge=1,delta=2
    66                           	psect	text54,local,class=CODE,merge=1,delta=2
    67                           	psect	text55,local,class=CODE,merge=1,delta=2
    68                           	psect	text56,local,class=CODE,merge=1,delta=2
    69                           	psect	text57,local,class=CODE,merge=1,delta=2
    70                           	psect	text58,local,class=CODE,merge=1,delta=2
    71                           	psect	text59,local,class=CODE,merge=1,delta=2
    72                           	psect	text60,local,class=CODE,merge=1,delta=2
    73                           	psect	text61,local,class=CODE,merge=1,delta=2
    74                           	psect	text62,local,class=CODE,merge=1,delta=2
    75                           	dabs	1,0x7E,2
    76  0000                     	;# 
    77  0001                     	;# 
    78  0002                     	;# 
    79  0003                     	;# 
    80  0004                     	;# 
    81  0005                     	;# 
    82  0006                     	;# 
    83  0007                     	;# 
    84  0008                     	;# 
    85  0009                     	;# 
    86  000A                     	;# 
    87  000B                     	;# 
    88  000C                     	;# 
    89  000D                     	;# 
    90  000E                     	;# 
    91  000E                     	;# 
    92  000F                     	;# 
    93  0010                     	;# 
    94  0011                     	;# 
    95  0012                     	;# 
    96  0013                     	;# 
    97  0014                     	;# 
    98  0015                     	;# 
    99  0015                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001B                     	;# 
   106  001B                     	;# 
   107  001C                     	;# 
   108  001D                     	;# 
   109  001E                     	;# 
   110  001F                     	;# 
   111  0081                     	;# 
   112  0085                     	;# 
   113  0086                     	;# 
   114  0087                     	;# 
   115  0088                     	;# 
   116  0089                     	;# 
   117  008C                     	;# 
   118  008D                     	;# 
   119  008E                     	;# 
   120  0091                     	;# 
   121  0092                     	;# 
   122  0093                     	;# 
   123  0094                     	;# 
   124  0098                     	;# 
   125  0099                     	;# 
   126  009C                     	;# 
   127  009D                     	;# 
   128  009E                     	;# 
   129  009F                     	;# 
   130  010C                     	;# 
   131  010D                     	;# 
   132  010E                     	;# 
   133  010F                     	;# 
   134  018C                     	;# 
   135  018D                     	;# 
   136  0000                     	;# 
   137  0001                     	;# 
   138  0002                     	;# 
   139  0003                     	;# 
   140  0004                     	;# 
   141  0005                     	;# 
   142  0006                     	;# 
   143  0007                     	;# 
   144  0008                     	;# 
   145  0009                     	;# 
   146  000A                     	;# 
   147  000B                     	;# 
   148  000C                     	;# 
   149  000D                     	;# 
   150  000E                     	;# 
   151  000E                     	;# 
   152  000F                     	;# 
   153  0010                     	;# 
   154  0011                     	;# 
   155  0012                     	;# 
   156  0013                     	;# 
   157  0014                     	;# 
   158  0015                     	;# 
   159  0015                     	;# 
   160  0016                     	;# 
   161  0017                     	;# 
   162  0018                     	;# 
   163  0019                     	;# 
   164  001A                     	;# 
   165  001B                     	;# 
   166  001B                     	;# 
   167  001C                     	;# 
   168  001D                     	;# 
   169  001E                     	;# 
   170  001F                     	;# 
   171  0081                     	;# 
   172  0085                     	;# 
   173  0086                     	;# 
   174  0087                     	;# 
   175  0088                     	;# 
   176  0089                     	;# 
   177  008C                     	;# 
   178  008D                     	;# 
   179  008E                     	;# 
   180  0091                     	;# 
   181  0092                     	;# 
   182  0093                     	;# 
   183  0094                     	;# 
   184  0098                     	;# 
   185  0099                     	;# 
   186  009C                     	;# 
   187  009D                     	;# 
   188  009E                     	;# 
   189  009F                     	;# 
   190  010C                     	;# 
   191  010D                     	;# 
   192  010E                     	;# 
   193  010F                     	;# 
   194  018C                     	;# 
   195  018D                     	;# 
   196  0000                     	;# 
   197  0001                     	;# 
   198  0002                     	;# 
   199  0003                     	;# 
   200  0004                     	;# 
   201  0005                     	;# 
   202  0006                     	;# 
   203  0007                     	;# 
   204  0008                     	;# 
   205  0009                     	;# 
   206  000A                     	;# 
   207  000B                     	;# 
   208  000C                     	;# 
   209  000D                     	;# 
   210  000E                     	;# 
   211  000E                     	;# 
   212  000F                     	;# 
   213  0010                     	;# 
   214  0011                     	;# 
   215  0012                     	;# 
   216  0013                     	;# 
   217  0014                     	;# 
   218  0015                     	;# 
   219  0015                     	;# 
   220  0016                     	;# 
   221  0017                     	;# 
   222  0018                     	;# 
   223  0019                     	;# 
   224  001A                     	;# 
   225  001B                     	;# 
   226  001B                     	;# 
   227  001C                     	;# 
   228  001D                     	;# 
   229  001E                     	;# 
   230  001F                     	;# 
   231  0081                     	;# 
   232  0085                     	;# 
   233  0086                     	;# 
   234  0087                     	;# 
   235  0088                     	;# 
   236  0089                     	;# 
   237  008C                     	;# 
   238  008D                     	;# 
   239  008E                     	;# 
   240  0091                     	;# 
   241  0092                     	;# 
   242  0093                     	;# 
   243  0094                     	;# 
   244  0098                     	;# 
   245  0099                     	;# 
   246  009C                     	;# 
   247  009D                     	;# 
   248  009E                     	;# 
   249  009F                     	;# 
   250  010C                     	;# 
   251  010D                     	;# 
   252  010E                     	;# 
   253  010F                     	;# 
   254  018C                     	;# 
   255  018D                     	;# 
   256                           
   257                           	psect	stringtext
   258  0800                     __pstringtext:	
   259  0800                     stringtab:	
   260  0800                     __stringtab:	
   261                           
   262                           ;	String table - string pointers are 2 bytes each
   263  0800  1BFF               	btfsc	btemp+1,7
   264  0801  280A               	ljmp	stringcode
   265  0802  1383               	bcf	3,7
   266  0803  187F               	btfsc	btemp+1,0
   267  0804  1783               	bsf	3,7
   268  0805  0800               	movf	0,w
   269  0806  0A84               	incf	4,f
   270  0807  1903               	skipnz
   271  0808  0AFF               	incf	btemp+1,f
   272  0809  0008               	return
   273  080A                     stringcode:	
   274  080A  087F               	movf	btemp+1,w
   275  080B  397F               	andlw	127
   276  080C  008A               	movwf	10
   277  080D  0804               	movf	4,w
   278  080E  0A84               	incf	4,f
   279  080F  1903               	skipnz
   280  0810  0AFF               	incf	btemp+1,f
   281  0811  0082               	movwf	2
   282  0812                     __stringbase:	
   283  0812                     __end_of__stringtab:	
   284  0812                     _dpowers:	
   285  0812  3401               	retlw	1
   286  0813  3400               	retlw	0
   287  0814  340A               	retlw	10
   288  0815  3400               	retlw	0
   289  0816  3464               	retlw	100
   290  0817  3400               	retlw	0
   291  0818  34E8               	retlw	232
   292  0819  3403               	retlw	3
   293  081A  3410               	retlw	16
   294  081B  3427               	retlw	39
   295  081C                     __end_of_dpowers:	
   296  001F                     _ADCON0	set	31
   297  001E                     _ADRESH	set	30
   298  000B                     _INTCON	set	11
   299  0006                     _PORTB	set	6
   300  0008                     _PORTD	set	8
   301  0013                     _SSPBUF	set	19
   302  0014                     _SSPCON	set	20
   303  0019                     _TXREG	set	25
   304  00C4                     _CREN	set	196
   305  006C                     _EEIF	set	108
   306  00FA                     _GO_nDONE	set	250
   307  0030                     _RB0	set	48
   308  0031                     _RB1	set	49
   309  0032                     _RB2	set	50
   310  0033                     _RB3	set	51
   311  0034                     _RB4	set	52
   312  0035                     _RB5	set	53
   313  0036                     _RB6	set	54
   314  0037                     _RB7	set	55
   315  0038                     _RC0	set	56
   316  0039                     _RC1	set	57
   317  003A                     _RC2	set	58
   318  0040                     _RD0	set	64
   319  0041                     _RD1	set	65
   320  0042                     _RD2	set	66
   321  0043                     _RD3	set	67
   322  0044                     _RD4	set	68
   323  0045                     _RD5	set	69
   324  0046                     _RD6	set	70
   325  0047                     _RD7	set	71
   326  0048                     _RE0	set	72
   327  0049                     _RE1	set	73
   328  004A                     _RE2	set	74
   329  00C6                     _RX9	set	198
   330  00C7                     _SPEN	set	199
   331  00C5                     _SREN	set	197
   332  0063                     _SSPIF	set	99
   333  0064                     _TXIF	set	100
   334  009F                     _ADCON1	set	159
   335  009E                     _ADRESL	set	158
   336  0081                     _OPTION_REG	set	129
   337  0099                     _SPBRG	set	153
   338  0093                     _SSPADD	set	147
   339  0094                     _SSPSTAT	set	148
   340  0085                     _TRISA	set	133
   341  0086                     _TRISB	set	134
   342  0087                     _TRISC	set	135
   343  0088                     _TRISD	set	136
   344  0089                     _TRISE	set	137
   345  048D                     _ACKDT	set	1165
   346  048C                     _ACKEN	set	1164
   347  048E                     _ACKSTAT	set	1166
   348  04C2                     _BRGH	set	1218
   349  048A                     _PEN	set	1162
   350  048B                     _RCEN	set	1163
   351  0465                     _RCIE	set	1125
   352  0489                     _RSEN	set	1161
   353  0488                     _SEN	set	1160
   354  04C4                     _SYNC	set	1220
   355  043B                     _TRISC3	set	1083
   356  043C                     _TRISC4	set	1084
   357  043E                     _TRISC6	set	1086
   358  043F                     _TRISC7	set	1087
   359  04C6                     _TX9	set	1222
   360  04C5                     _TXEN	set	1221
   361  0464                     _TXIE	set	1124
   362  010D                     _EEADR	set	269
   363  010C                     _EEDATA	set	268
   364  018D                     _EECON2	set	397
   365  0C67                     _EEPGD	set	3175
   366  0C60                     _RD	set	3168
   367  0C61                     _WR	set	3169
   368  0C62                     _WREN	set	3170
   369  081C                     STR_13:	
   370  081C  3449               	retlw	73	;'I'
   371  081D  3427               	retlw	39	;'''
   372  081E  346D               	retlw	109	;'m'
   373  081F  3420               	retlw	32	;' '
   374  0820  3479               	retlw	121	;'y'
   375  0821  346F               	retlw	111	;'o'
   376  0822  3475               	retlw	117	;'u'
   377  0823  3472               	retlw	114	;'r'
   378  0824  3420               	retlw	32	;' '
   379  0825  3473               	retlw	115	;'s'
   380  0826  3461               	retlw	97	;'a'
   381  0827  3466               	retlw	102	;'f'
   382  0828  3465               	retlw	101	;'e'
   383  0829  3474               	retlw	116	;'t'
   384  082A  3479               	retlw	121	;'y'
   385  082B  3420               	retlw	32	;' '
   386  082C  3469               	retlw	105	;'i'
   387  082D  3472               	retlw	114	;'r'
   388  082E  346F               	retlw	111	;'o'
   389  082F  346E               	retlw	110	;'n'
   390  0830  3420               	retlw	32	;' '
   391  0831  3475               	retlw	117	;'u'
   392  0832  346E               	retlw	110	;'n'
   393  0833  3469               	retlw	105	;'i'
   394  0834  3474               	retlw	116	;'t'
   395  0835  342E               	retlw	46	;'.'
   396  0836  3420               	retlw	32	;' '
   397  0837  3455               	retlw	85	;'U'
   398  0838  346E               	retlw	110	;'n'
   399  0839  3465               	retlw	101	;'e'
   400  083A  3478               	retlw	120	;'x'
   401  083B  3470               	retlw	112	;'p'
   402  083C  3465               	retlw	101	;'e'
   403  083D  3463               	retlw	99	;'c'
   404  083E  3474               	retlw	116	;'t'
   405  083F  3465               	retlw	101	;'e'
   406  0840  3464               	retlw	100	;'d'
   407  0841  3420               	retlw	32	;' '
   408  0842  3473               	retlw	115	;'s'
   409  0843  3469               	retlw	105	;'i'
   410  0844  3474               	retlw	116	;'t'
   411  0845  3475               	retlw	117	;'u'
   412  0846  3461               	retlw	97	;'a'
   413  0847  3474               	retlw	116	;'t'
   414  0848  3469               	retlw	105	;'i'
   415  0849  346F               	retlw	111	;'o'
   416  084A  346E               	retlw	110	;'n'
   417  084B  3420               	retlw	32	;' '
   418  084C  3468               	retlw	104	;'h'
   419  084D  3461               	retlw	97	;'a'
   420  084E  3473               	retlw	115	;'s'
   421  084F  3420               	retlw	32	;' '
   422  0850  346F               	retlw	111	;'o'
   423  0851  3463               	retlw	99	;'c'
   424  0852  3463               	retlw	99	;'c'
   425  0853  3475               	retlw	117	;'u'
   426  0854  3472               	retlw	114	;'r'
   427  0855  3472               	retlw	114	;'r'
   428  0856  3465               	retlw	101	;'e'
   429  0857  3464               	retlw	100	;'d'
   430  0858  342E               	retlw	46	;'.'
   431  0859  3420               	retlw	32	;' '
   432  085A  3443               	retlw	67	;'C'
   433  085B  3468               	retlw	104	;'h'
   434  085C  3465               	retlw	101	;'e'
   435  085D  3463               	retlw	99	;'c'
   436  085E  346B               	retlw	107	;'k'
   437  085F  3420               	retlw	32	;' '
   438  0860  3469               	retlw	105	;'i'
   439  0861  3474               	retlw	116	;'t'
   440  0862  3420               	retlw	32	;' '
   441  0863  3441               	retlw	65	;'A'
   442  0864  3453               	retlw	83	;'S'
   443  0865  3441               	retlw	65	;'A'
   444  0866  3450               	retlw	80	;'P'
   445  0867  3421               	retlw	33	;'!'
   446  0868  3400               	retlw	0
   447  0869                     STR_25:	
   448  0869  342A               	retlw	42	;'*'
   449  086A  342A               	retlw	42	;'*'
   450  086B  342A               	retlw	42	;'*'
   451  086C  342A               	retlw	42	;'*'
   452  086D  342A               	retlw	42	;'*'
   453  086E  342A               	retlw	42	;'*'
   454  086F  342A               	retlw	42	;'*'
   455  0870  342A               	retlw	42	;'*'
   456  0871  342A               	retlw	42	;'*'
   457  0872  342A               	retlw	42	;'*'
   458  0873  342A               	retlw	42	;'*'
   459  0874  342A               	retlw	42	;'*'
   460  0875  342A               	retlw	42	;'*'
   461  0876  342A               	retlw	42	;'*'
   462  0877  342A               	retlw	42	;'*'
   463  0878  342A               	retlw	42	;'*'
   464  0879  3400               	retlw	0
   465  087A                     STR_33:	
   466  087A  3433               	retlw	51	;'3'
   467  087B  343A               	retlw	58	;':'
   468  087C  3444               	retlw	68	;'D'
   469  087D  3461               	retlw	97	;'a'
   470  087E  3474               	retlw	116	;'t'
   471  087F  3465               	retlw	101	;'e'
   472  0880  3420               	retlw	32	;' '
   473  0881  3434               	retlw	52	;'4'
   474  0882  343A               	retlw	58	;':'
   475  0883  3453               	retlw	83	;'S'
   476  0884  3468               	retlw	104	;'h'
   477  0885  346F               	retlw	111	;'o'
   478  0886  3477               	retlw	119	;'w'
   479  0887  3449               	retlw	73	;'I'
   480  0888  346E               	retlw	110	;'n'
   481  0889  3466               	retlw	102	;'f'
   482  088A  3400               	retlw	0
   483  088B                     STR_26:	
   484  088B  3420               	retlw	32	;' '
   485  088C  3449               	retlw	73	;'I'
   486  088D  346E               	retlw	110	;'n'
   487  088E  3469               	retlw	105	;'i'
   488  088F  3474               	retlw	116	;'t'
   489  0890  3469               	retlw	105	;'i'
   490  0891  3461               	retlw	97	;'a'
   491  0892  346C               	retlw	108	;'l'
   492  0893  3469               	retlw	105	;'i'
   493  0894  347A               	retlw	122	;'z'
   494  0895  3469               	retlw	105	;'i'
   495  0896  346E               	retlw	110	;'n'
   496  0897  3467               	retlw	103	;'g'
   497  0898  342E               	retlw	46	;'.'
   498  0899  3421               	retlw	33	;'!'
   499  089A  3400               	retlw	0
   500  089B                     STR_51:	
   501  089B  3420               	retlw	32	;' '
   502  089C  3420               	retlw	32	;' '
   503  089D  3420               	retlw	32	;' '
   504  089E  3453               	retlw	83	;'S'
   505  089F  3477               	retlw	119	;'w'
   506  08A0  3469               	retlw	105	;'i'
   507  08A1  3474               	retlw	116	;'t'
   508  08A2  3463               	retlw	99	;'c'
   509  08A3  3468               	retlw	104	;'h'
   510  08A4  3465               	retlw	101	;'e'
   511  08A5  3464               	retlw	100	;'d'
   512  08A6  3420               	retlw	32	;' '
   513  08A7  344F               	retlw	79	;'O'
   514  08A8  3446               	retlw	70	;'F'
   515  08A9  3446               	retlw	70	;'F'
   516  08AA  3400               	retlw	0
   517  08AB                     STR_54:	
   518  08AB  3441               	retlw	65	;'A'
   519  08AC  3456               	retlw	86	;'V'
   520  08AD  3447               	retlw	71	;'G'
   521  08AE  3450               	retlw	80	;'P'
   522  08AF  344F               	retlw	79	;'O'
   523  08B0  3457               	retlw	87	;'W'
   524  08B1  3445               	retlw	69	;'E'
   525  08B2  3452               	retlw	82	;'R'
   526  08B3  3420               	retlw	32	;' '
   527  08B4  343D               	retlw	61	;'='
   528  08B5  3420               	retlw	32	;' '
   529  08B6  3425               	retlw	37	;'%'
   530  08B7  3464               	retlw	100	;'d'
   531  08B8  3420               	retlw	32	;' '
   532  08B9  3457               	retlw	87	;'W'
   533  08BA  3400               	retlw	0
   534  08BB                     STR_35:	
   535  08BB  3420               	retlw	32	;' '
   536  08BC  3445               	retlw	69	;'E'
   537  08BD  346E               	retlw	110	;'n'
   538  08BE  3474               	retlw	116	;'t'
   539  08BF  3465               	retlw	101	;'e'
   540  08C0  3472               	retlw	114	;'r'
   541  08C1  3465               	retlw	101	;'e'
   542  08C2  3464               	retlw	100	;'d'
   543  08C3  3420               	retlw	32	;' '
   544  08C4  344E               	retlw	78	;'N'
   545  08C5  3475               	retlw	117	;'u'
   546  08C6  346D               	retlw	109	;'m'
   547  08C7  3462               	retlw	98	;'b'
   548  08C8  3465               	retlw	101	;'e'
   549  08C9  3472               	retlw	114	;'r'
   550  08CA  3400               	retlw	0
   551  08CB                     STR_30:	
   552  08CB  3446               	retlw	70	;'F'
   553  08CC  3431               	retlw	49	;'1'
   554  08CD  3420               	retlw	32	;' '
   555  08CE  3466               	retlw	102	;'f'
   556  08CF  346F               	retlw	111	;'o'
   557  08D0  3472               	retlw	114	;'r'
   558  08D1  3420               	retlw	32	;' '
   559  08D2  3453               	retlw	83	;'S'
   560  08D3  3465               	retlw	101	;'e'
   561  08D4  3474               	retlw	116	;'t'
   562  08D5  3474               	retlw	116	;'t'
   563  08D6  3469               	retlw	105	;'i'
   564  08D7  346E               	retlw	110	;'n'
   565  08D8  3467               	retlw	103	;'g'
   566  08D9  3473               	retlw	115	;'s'
   567  08DA  3400               	retlw	0
   568  08DB                     STR_32:	
   569  08DB  3431               	retlw	49	;'1'
   570  08DC  343A               	retlw	58	;':'
   571  08DD  344E               	retlw	78	;'N'
   572  08DE  3475               	retlw	117	;'u'
   573  08DF  346D               	retlw	109	;'m'
   574  08E0  3462               	retlw	98	;'b'
   575  08E1  3420               	retlw	32	;' '
   576  08E2  3432               	retlw	50	;'2'
   577  08E3  343A               	retlw	58	;':'
   578  08E4  3454               	retlw	84	;'T'
   579  08E5  3469               	retlw	105	;'i'
   580  08E6  346D               	retlw	109	;'m'
   581  08E7  3465               	retlw	101	;'e'
   582  08E8  3420               	retlw	32	;' '
   583  08E9  3400               	retlw	0
   584  08EA                     STR_37:	
   585  08EA  3441               	retlw	65	;'A'
   586  08EB  344D               	retlw	77	;'M'
   587  08EC  3420               	retlw	32	;' '
   588  08ED  342D               	retlw	45	;'-'
   589  08EE  3420               	retlw	32	;' '
   590  08EF  3431               	retlw	49	;'1'
   591  08F0  3420               	retlw	32	;' '
   592  08F1  3420               	retlw	32	;' '
   593  08F2  3420               	retlw	32	;' '
   594  08F3  3420               	retlw	32	;' '
   595  08F4  3450               	retlw	80	;'P'
   596  08F5  344D               	retlw	77	;'M'
   597  08F6  342D               	retlw	45	;'-'
   598  08F7  3432               	retlw	50	;'2'
   599  08F8  3400               	retlw	0
   600  08F9                     STR_43:	
   601  08F9  3450               	retlw	80	;'P'
   602  08FA  3468               	retlw	104	;'h'
   603  08FB  346F               	retlw	111	;'o'
   604  08FC  346E               	retlw	110	;'n'
   605  08FD  3465               	retlw	101	;'e'
   606  08FE  3420               	retlw	32	;' '
   607  08FF  344E               	retlw	78	;'N'
   608  0900  3475               	retlw	117	;'u'
   609  0901  346D               	retlw	109	;'m'
   610  0902  3462               	retlw	98	;'b'
   611  0903  3465               	retlw	101	;'e'
   612  0904  3472               	retlw	114	;'r'
   613  0905  3420               	retlw	32	;' '
   614  0906  343A               	retlw	58	;':'
   615  0907  3400               	retlw	0
   616  0908                     STR_36:	
   617  0908  3448               	retlw	72	;'H'
   618  0909  3448               	retlw	72	;'H'
   619  090A  343A               	retlw	58	;':'
   620  090B  344D               	retlw	77	;'M'
   621  090C  344D               	retlw	77	;'M'
   622  090D  343A               	retlw	58	;':'
   623  090E  3453               	retlw	83	;'S'
   624  090F  3453               	retlw	83	;'S'
   625  0910  343A               	retlw	58	;':'
   626  0911  3441               	retlw	65	;'A'
   627  0912  344D               	retlw	77	;'M'
   628  0913  342F               	retlw	47	;'/'
   629  0914  3450               	retlw	80	;'P'
   630  0915  344D               	retlw	77	;'M'
   631  0916  3400               	retlw	0
   632  0917                     STR_12:	
   633  0917  3441               	retlw	65	;'A'
   634  0918  3454               	retlw	84	;'T'
   635  0919  342B               	retlw	43	;'+'
   636  091A  3443               	retlw	67	;'C'
   637  091B  344D               	retlw	77	;'M'
   638  091C  3447               	retlw	71	;'G'
   639  091D  3453               	retlw	83	;'S'
   640  091E  343D               	retlw	61	;'='
   641  091F  3422               	retlw	34	;'"'
   642  0920  3425               	retlw	37	;'%'
   643  0921  3473               	retlw	115	;'s'
   644  0922  3422               	retlw	34	;'"'
   645  0923  340D               	retlw	13
   646  0924  3400               	retlw	0
   647  0925                     STR_48:	
   648  0925  344D               	retlw	77	;'M'
   649  0926  3465               	retlw	101	;'e'
   650  0927  3473               	retlw	115	;'s'
   651  0928  3473               	retlw	115	;'s'
   652  0929  3461               	retlw	97	;'a'
   653  092A  3467               	retlw	103	;'g'
   654  092B  3465               	retlw	101	;'e'
   655  092C  3420               	retlw	32	;' '
   656  092D  3453               	retlw	83	;'S'
   657  092E  3465               	retlw	101	;'e'
   658  092F  346E               	retlw	110	;'n'
   659  0930  3474               	retlw	116	;'t'
   660  0931  3421               	retlw	33	;'!'
   661  0932  3400               	retlw	0
   662  0933                     STR_31:	
   663  0933  3420               	retlw	32	;' '
   664  0934  3420               	retlw	32	;' '
   665  0935  3420               	retlw	32	;' '
   666  0936  3420               	retlw	32	;' '
   667  0937  3453               	retlw	83	;'S'
   668  0938  3477               	retlw	119	;'w'
   669  0939  3469               	retlw	105	;'i'
   670  093A  3474               	retlw	116	;'t'
   671  093B  3463               	retlw	99	;'c'
   672  093C  3468               	retlw	104	;'h'
   673  093D  3420               	retlw	32	;' '
   674  093E  344F               	retlw	79	;'O'
   675  093F  344E               	retlw	78	;'N'
   676  0940  3400               	retlw	0
   677  0941                     STR_39:	
   678  0941  3420               	retlw	32	;' '
   679  0942  3445               	retlw	69	;'E'
   680  0943  346E               	retlw	110	;'n'
   681  0944  3474               	retlw	116	;'t'
   682  0945  3465               	retlw	101	;'e'
   683  0946  3472               	retlw	114	;'r'
   684  0947  3465               	retlw	101	;'e'
   685  0948  3464               	retlw	100	;'d'
   686  0949  3420               	retlw	32	;' '
   687  094A  3454               	retlw	84	;'T'
   688  094B  3469               	retlw	105	;'i'
   689  094C  346D               	retlw	109	;'m'
   690  094D  3465               	retlw	101	;'e'
   691  094E  3400               	retlw	0
   692  094F                     STR_42:	
   693  094F  3420               	retlw	32	;' '
   694  0950  3445               	retlw	69	;'E'
   695  0951  346E               	retlw	110	;'n'
   696  0952  3474               	retlw	116	;'t'
   697  0953  3465               	retlw	101	;'e'
   698  0954  3472               	retlw	114	;'r'
   699  0955  3465               	retlw	101	;'e'
   700  0956  3464               	retlw	100	;'d'
   701  0957  3420               	retlw	32	;' '
   702  0958  3444               	retlw	68	;'D'
   703  0959  3461               	retlw	97	;'a'
   704  095A  3474               	retlw	116	;'t'
   705  095B  3465               	retlw	101	;'e'
   706  095C  3400               	retlw	0
   707  095D                     STR_40:	
   708  095D  3444               	retlw	68	;'D'
   709  095E  3444               	retlw	68	;'D'
   710  095F  343A               	retlw	58	;':'
   711  0960  344D               	retlw	77	;'M'
   712  0961  344D               	retlw	77	;'M'
   713  0962  343A               	retlw	58	;':'
   714  0963  3459               	retlw	89	;'Y'
   715  0964  3459               	retlw	89	;'Y'
   716  0965  343A               	retlw	58	;':'
   717  0966  3444               	retlw	68	;'D'
   718  0967  3441               	retlw	65	;'A'
   719  0968  3459               	retlw	89	;'Y'
   720  0969  3400               	retlw	0
   721  096A                     STR_50:	
   722  096A  3420               	retlw	32	;' '
   723  096B  3420               	retlw	32	;' '
   724  096C  3420               	retlw	32	;' '
   725  096D  3420               	retlw	32	;' '
   726  096E  3420               	retlw	32	;' '
   727  096F  3420               	retlw	32	;' '
   728  0970  3430               	retlw	48	;'0'
   729  0971  3425               	retlw	37	;'%'
   730  0972  3464               	retlw	100	;'d'
   731  0973  343A               	retlw	58	;':'
   732  0974  3425               	retlw	37	;'%'
   733  0975  3464               	retlw	100	;'d'
   734  0976  3400               	retlw	0
   735  0977                     STR_34:	
   736  0977  3445               	retlw	69	;'E'
   737  0978  346E               	retlw	110	;'n'
   738  0979  3474               	retlw	116	;'t'
   739  097A  3465               	retlw	101	;'e'
   740  097B  3472               	retlw	114	;'r'
   741  097C  3420               	retlw	32	;' '
   742  097D  346E               	retlw	110	;'n'
   743  097E  3475               	retlw	117	;'u'
   744  097F  346D               	retlw	109	;'m'
   745  0980  3462               	retlw	98	;'b'
   746  0981  3465               	retlw	101	;'e'
   747  0982  3472               	retlw	114	;'r'
   748  0983  3400               	retlw	0
   749  0984                     STR_24:	
   750  0984  3420               	retlw	32	;' '
   751  0985  3420               	retlw	32	;' '
   752  0986  3420               	retlw	32	;' '
   753  0987  3420               	retlw	32	;' '
   754  0988  3457               	retlw	87	;'W'
   755  0989  3445               	retlw	69	;'E'
   756  098A  344C               	retlw	76	;'L'
   757  098B  3443               	retlw	67	;'C'
   758  098C  344F               	retlw	79	;'O'
   759  098D  344D               	retlw	77	;'M'
   760  098E  3445               	retlw	69	;'E'
   761  098F  3400               	retlw	0
   762  0990                     STR_47:	
   763  0990  3420               	retlw	32	;' '
   764  0991  3420               	retlw	32	;' '
   765  0992  3420               	retlw	32	;' '
   766  0993  3420               	retlw	32	;' '
   767  0994  3420               	retlw	32	;' '
   768  0995  3444               	retlw	68	;'D'
   769  0996  3441               	retlw	65	;'A'
   770  0997  344E               	retlw	78	;'N'
   771  0998  3447               	retlw	71	;'G'
   772  0999  3445               	retlw	69	;'E'
   773  099A  3452               	retlw	82	;'R'
   774  099B  3400               	retlw	0
   775  099C                     STR_41:	
   776  099C  3425               	retlw	37	;'%'
   777  099D  3473               	retlw	115	;'s'
   778  099E  343A               	retlw	58	;':'
   779  099F  3425               	retlw	37	;'%'
   780  09A0  3473               	retlw	115	;'s'
   781  09A1  343A               	retlw	58	;':'
   782  09A2  3425               	retlw	37	;'%'
   783  09A3  3473               	retlw	115	;'s'
   784  09A4  3420               	retlw	32	;' '
   785  09A5  3425               	retlw	37	;'%'
   786  09A6  3473               	retlw	115	;'s'
   787  09A7  3400               	retlw	0
   788  09A8                     STR_38:	
   789  09A8  3425               	retlw	37	;'%'
   790  09A9  3473               	retlw	115	;'s'
   791  09AA  343A               	retlw	58	;':'
   792  09AB  3425               	retlw	37	;'%'
   793  09AC  3473               	retlw	115	;'s'
   794  09AD  343A               	retlw	58	;':'
   795  09AE  3425               	retlw	37	;'%'
   796  09AF  3473               	retlw	115	;'s'
   797  09B0  343A               	retlw	58	;':'
   798  09B1  3425               	retlw	37	;'%'
   799  09B2  3473               	retlw	115	;'s'
   800  09B3  3400               	retlw	0
   801  09B4                     STR_11:	
   802  09B4  3441               	retlw	65	;'A'
   803  09B5  3454               	retlw	84	;'T'
   804  09B6  342B               	retlw	43	;'+'
   805  09B7  3443               	retlw	67	;'C'
   806  09B8  344D               	retlw	77	;'M'
   807  09B9  3447               	retlw	71	;'G'
   808  09BA  3446               	retlw	70	;'F'
   809  09BB  343D               	retlw	61	;'='
   810  09BC  3431               	retlw	49	;'1'
   811  09BD  3400               	retlw	0
   812  09BE                     STR_44:	
   813  09BE  3446               	retlw	70	;'F'
   814  09BF  3431               	retlw	49	;'1'
   815  09C0  343A               	retlw	58	;':'
   816  09C1  3445               	retlw	69	;'E'
   817  09C2  3464               	retlw	100	;'d'
   818  09C3  3469               	retlw	105	;'i'
   819  09C4  3474               	retlw	116	;'t'
   820  09C5  3420               	retlw	32	;' '
   821  09C6  3400               	retlw	0
   822  09C7                     STR_46:	
   823  09C7  3420               	retlw	32	;' '
   824  09C8  3420               	retlw	32	;' '
   825  09C9  3420               	retlw	32	;' '
   826  09CA  3420               	retlw	32	;' '
   827  09CB  3425               	retlw	37	;'%'
   828  09CC  3464               	retlw	100	;'d'
   829  09CD  3420               	retlw	32	;' '
   830  09CE  3457               	retlw	87	;'W'
   831  09CF  3400               	retlw	0
   832  09D0                     STR_45:	
   833  09D0  3446               	retlw	70	;'F'
   834  09D1  3432               	retlw	50	;'2'
   835  09D2  343A               	retlw	58	;':'
   836  09D3  3445               	retlw	69	;'E'
   837  09D4  3478               	retlw	120	;'x'
   838  09D5  3469               	retlw	105	;'i'
   839  09D6  3474               	retlw	116	;'t'
   840  09D7  3400               	retlw	0
   841  09D8                     STR_55:	
   842  09D8  3428               	retlw	40	;'('
   843  09D9  346E               	retlw	110	;'n'
   844  09DA  3475               	retlw	117	;'u'
   845  09DB  346C               	retlw	108	;'l'
   846  09DC  346C               	retlw	108	;'l'
   847  09DD  3429               	retlw	41	;')'
   848  09DE  3400               	retlw	0
   849  09DF                     STR_29:	
   850  09DF  3450               	retlw	80	;'P'
   851  09E0  3472               	retlw	114	;'r'
   852  09E1  3465               	retlw	101	;'e'
   853  09E2  3473               	retlw	115	;'s'
   854  09E3  3473               	retlw	115	;'s'
   855  09E4  3400               	retlw	0
   856  09E5                     STR_10:	
   857  09E5  343F               	retlw	63	;'?'
   858  09E6  343F               	retlw	63	;'?'
   859  09E7  343F               	retlw	63	;'?'
   860  09E8  3400               	retlw	0
   861  09E9                     STR_5:	
   862  09E9  3457               	retlw	87	;'W'
   863  09EA  3445               	retlw	69	;'E'
   864  09EB  3444               	retlw	68	;'D'
   865  09EC  3400               	retlw	0
   866  09ED                     STR_4:	
   867  09ED  3454               	retlw	84	;'T'
   868  09EE  3455               	retlw	85	;'U'
   869  09EF  3445               	retlw	69	;'E'
   870  09F0  3400               	retlw	0
   871  09F1                     STR_7:	
   872  09F1  3446               	retlw	70	;'F'
   873  09F2  3452               	retlw	82	;'R'
   874  09F3  3449               	retlw	73	;'I'
   875  09F4  3400               	retlw	0
   876  09F5                     STR_3:	
   877  09F5  344D               	retlw	77	;'M'
   878  09F6  344F               	retlw	79	;'O'
   879  09F7  344E               	retlw	78	;'N'
   880  09F8  3400               	retlw	0
   881  09F9                     STR_9:	
   882  09F9  3453               	retlw	83	;'S'
   883  09FA  3455               	retlw	85	;'U'
   884  09FB  344E               	retlw	78	;'N'
   885  09FC  3400               	retlw	0
   886  09FD                     STR_8:	
   887  09FD  3453               	retlw	83	;'S'
   888  09FE  3441               	retlw	65	;'A'
   889  09FF  3454               	retlw	84	;'T'
   890  0A00  3400               	retlw	0
   891  0A01                     STR_6:	
   892  0A01  3454               	retlw	84	;'T'
   893  0A02  3448               	retlw	72	;'H'
   894  0A03  3455               	retlw	85	;'U'
   895  0A04  3400               	retlw	0
   896  0A05                     STR_1:	
   897  0A05  3441               	retlw	65	;'A'
   898  0A06  344D               	retlw	77	;'M'
   899  0A07  3400               	retlw	0
   900  088B                     
   901                           ; #config settings
   902  0000                     
   903                           	psect	cinit
   904  07E4                     start_initialization:	
   905  07E4                     __initialization:	
   906                           
   907                           ; Clear objects allocated to BANK0
   908  07E4  1383               	bcf	3,7	;select IRP bank0
   909  07E5  304A               	movlw	low __pbssBANK0
   910  07E6  0084               	movwf	4
   911  07E7  306F               	movlw	low (__pbssBANK0+37)
   912  07E8  160A  158A  2305  120A  118A  	fcall	clear_ram0
   913                           
   914                           ; Clear objects allocated to BANK1
   915  07ED  30A0               	movlw	low __pbssBANK1
   916  07EE  0084               	movwf	4
   917  07EF  30EE               	movlw	low (__pbssBANK1+78)
   918  07F0  160A  158A  2305  120A  118A  	fcall	clear_ram0
   919                           
   920                           ; Clear objects allocated to BANK3
   921  07F5  1783               	bsf	3,7	;select IRP bank2
   922  07F6  3090               	movlw	low __pbssBANK3
   923  07F7  0084               	movwf	4
   924  07F8  30B4               	movlw	low (__pbssBANK3+36)
   925  07F9  160A  158A  2305   	fcall	clear_ram0
   926  07FC                     end_of_initialization:	
   927                           ;End of C runtime variable initialization code
   928                           
   929  07FC                     __end_of__initialization:	
   930  07FC  0183               	clrf	3
   931  07FD  160A  118A  2EE5   	ljmp	_main	;jump to C main() function
   932                           
   933                           	psect	bssBANK0
   934  004A                     __pbssBANK0:	
   935  004A                     _a:	
   936  004A                     	ds	2
   937  004C                     _avgpower:	
   938  004C                     	ds	2
   939  004E                     _b:	
   940  004E                     	ds	2
   941  0050                     _c:	
   942  0050                     	ds	2
   943  0052                     _e:	
   944  0052                     	ds	2
   945  0054                     _f:	
   946  0054                     	ds	2
   947  0056                     _g:	
   948  0056                     	ds	2
   949  0058                     _h:	
   950  0058                     	ds	2
   951  005A                     _iDD:	
   952  005A                     	ds	2
   953  005C                     _iap:	
   954  005C                     	ds	2
   955  005E                     _ihh:	
   956  005E                     	ds	2
   957  0060                     _imm:	
   958  0060                     	ds	2
   959  0062                     _iss:	
   960  0062                     	ds	2
   961  0064                     _mins:	
   962  0064                     	ds	2
   963  0066                     _secs:	
   964  0066                     	ds	2
   965  0068                     _x:	
   966  0068                     	ds	2
   967  006A                     _pRTCArray:	
   968  006A                     	ds	4
   969  006E                     _Temp:	
   970  006E                     	ds	1
   971                           
   972                           	psect	bssBANK1
   973  00A0                     __pbssBANK1:	
   974  00A0                     _current:	
   975  00A0                     	ds	3
   976  00A3                     _count:	
   977  00A3                     	ds	2
   978  00A5                     _d:	
   979  00A5                     	ds	2
   980  00A7                     _iDAY:	
   981  00A7                     	ds	2
   982  00A9                     _iMM:	
   983  00A9                     	ds	2
   984  00AB                     _iYY:	
   985  00AB                     	ds	2
   986  00AD                     _number:	
   987  00AD                     	ds	15
   988  00BC                     _DAY:	
   989  00BC                     	ds	10
   990  00C6                     _DD:	
   991  00C6                     	ds	5
   992  00CB                     _MM:	
   993  00CB                     	ds	5
   994  00D0                     _YY:	
   995  00D0                     	ds	5
   996  00D5                     _ap:	
   997  00D5                     	ds	5
   998  00DA                     _cDAY:	
   999  00DA                     	ds	5
  1000  00DF                     _hh:	
  1001  00DF                     	ds	5
  1002  00E4                     _mm:	
  1003  00E4                     	ds	5
  1004  00E9                     _ss:	
  1005  00E9                     	ds	5
  1006                           
  1007                           	psect	bssBANK3
  1008  0190                     __pbssBANK3:	
  1009  0190                     _txt:	
  1010  0190                     	ds	20
  1011  01A4                     _text:	
  1012  01A4                     	ds	16
  1013                           
  1014                           	psect	clrtext
  1015  1B05                     clear_ram0:	
  1016                           ;	Called with FSR containing the base address, and
  1017                           ;	W with the last address+1
  1018                           
  1019  1B05  0064               	clrwdt	;clear the watchdog before getting into this loop
  1020  1B06                     clrloop0:	
  1021  1B06  0180               	clrf	0	;clear RAM location pointed to by FSR
  1022  1B07  0A84               	incf	4,f	;increment pointer
  1023  1B08  0604               	xorwf	4,w	;XOR with final address
  1024  1B09  1903               	btfsc	3,2	;have we reached the end yet?
  1025  1B0A  3400               	retlw	0	;all done for this memory range, return
  1026  1B0B  0604               	xorwf	4,w	;XOR again to restore value
  1027  1B0C  2B06               	goto	clrloop0	;do the next byte
  1028                           
  1029                           	psect	cstackCOMMON
  1030  0070                     __pcstackCOMMON:	
  1031  0070                     ?_SendByteSerially:	
  1032  0070                     ??_SendByteSerially:	
  1033                           ; 0 bytes @ 0x0
  1034                           
  1035  0070                     ?_InitI2C:	
  1036                           ; 0 bytes @ 0x0
  1037                           
  1038  0070                     ??_InitI2C:	
  1039                           ; 0 bytes @ 0x0
  1040                           
  1041  0070                     ?_Settings:	
  1042                           ; 0 bytes @ 0x0
  1043                           
  1044  0070                     ?_avgpow:	
  1045                           ; 0 bytes @ 0x0
  1046                           
  1047  0070                     ?_isdigit:	
  1048                           ; 0 bytes @ 0x0
  1049                           
  1050  0070                     ??_isdigit:	
  1051                           ; 1 bit 
  1052                           
  1053  0070                     ?_Lcd_Port:	
  1054                           ; 0 bytes @ 0x0
  1055                           
  1056  0070                     ??_Lcd_Port:	
  1057                           ; 0 bytes @ 0x0
  1058                           
  1059  0070                     ?_Lcd_Cmd:	
  1060                           ; 0 bytes @ 0x0
  1061                           
  1062  0070                     ?_Lcd_Init:	
  1063                           ; 0 bytes @ 0x0
  1064                           
  1065  0070                     ?_Lcd_Write_Char:	
  1066                           ; 0 bytes @ 0x0
  1067                           
  1068  0070                     ?_InitKeypad:	
  1069                           ; 0 bytes @ 0x0
  1070                           
  1071  0070                     ??_InitKeypad:	
  1072                           ; 0 bytes @ 0x0
  1073                           
  1074  0070                     ??_READ_SWITCHES:	
  1075                           ; 0 bytes @ 0x0
  1076                           
  1077  0070                     ?_SendMsg_Inti:	
  1078                           ; 0 bytes @ 0x0
  1079                           
  1080  0070                     ?_Msg_Setup:	
  1081                           ; 0 bytes @ 0x0
  1082                           
  1083  0070                     ?_GSM_Send:	
  1084                           ; 0 bytes @ 0x0
  1085                           
  1086  0070                     ?_ADC_Init:	
  1087                           ; 0 bytes @ 0x0
  1088                           
  1089  0070                     ??_ADC_Init:	
  1090                           ; 0 bytes @ 0x0
  1091                           
  1092  0070                     ?_DisplayTimeToLCD:	
  1093                           ; 0 bytes @ 0x0
  1094                           
  1095  0070                     ?_DisplayDateOnLCD:	
  1096                           ; 0 bytes @ 0x0
  1097                           
  1098  0070                     ??_readEEPROM:	
  1099                           ; 0 bytes @ 0x0
  1100                           
  1101  0070                     ?_writeEEPROM:	
  1102                           ; 0 bytes @ 0x0
  1103                           
  1104  0070                     ?_EEPROMSET:	
  1105                           ; 0 bytes @ 0x0
  1106                           
  1107  0070                     ?_EEPROMGET:	
  1108                           ; 0 bytes @ 0x0
  1109                           
  1110  0070                     ?_InitUnit:	
  1111                           ; 0 bytes @ 0x0
  1112                           
  1113  0070                     ?_CheckSensors:	
  1114                           ; 0 bytes @ 0x0
  1115                           
  1116  0070                     ?_main:	
  1117                           ; 0 bytes @ 0x0
  1118                           
  1119  0070                     ?_I2C_Start:	
  1120                           ; 0 bytes @ 0x0
  1121                           
  1122  0070                     ??_I2C_Start:	
  1123                           ; 0 bytes @ 0x0
  1124                           
  1125  0070                     ?_I2C_ReStart:	
  1126                           ; 0 bytes @ 0x0
  1127                           
  1128  0070                     ??_I2C_ReStart:	
  1129                           ; 0 bytes @ 0x0
  1130                           
  1131  0070                     ?_I2C_Stop:	
  1132                           ; 0 bytes @ 0x0
  1133                           
  1134  0070                     ??_I2C_Stop:	
  1135                           ; 0 bytes @ 0x0
  1136                           
  1137  0070                     ?_I2C_Send_ACK:	
  1138                           ; 0 bytes @ 0x0
  1139                           
  1140  0070                     ??_I2C_Send_ACK:	
  1141                           ; 0 bytes @ 0x0
  1142                           
  1143  0070                     ?_I2C_Send_NACK:	
  1144                           ; 0 bytes @ 0x0
  1145                           
  1146  0070                     ??_I2C_Send_NACK:	
  1147                           ; 0 bytes @ 0x0
  1148                           
  1149  0070                     ?_I2C_Write_Byte:	
  1150                           ; 0 bytes @ 0x0
  1151                           
  1152  0070                     ??_I2C_Write_Byte:	
  1153                           ; 1 bit 
  1154                           
  1155  0070                     ??_I2C_Read_Byte:	
  1156                           ; 0 bytes @ 0x0
  1157                           
  1158  0070                     ?_strcpy:	
  1159                           ; 0 bytes @ 0x0
  1160                           
  1161  0070                     ?_Get_DS1307_RTC_Time:	
  1162                           ; 1 bytes @ 0x0
  1163                           
  1164  0070                     ?_Get_DS1307_RTC_Date:	
  1165                           ; 1 bytes @ 0x0
  1166                           
  1167  0070                     ?_READ_SWITCHES:	
  1168                           ; 1 bytes @ 0x0
  1169                           
  1170  0070                     ?_GetKey:	
  1171                           ; 1 bytes @ 0x0
  1172                           
  1173  0070                     ?_GetKeyNumber:	
  1174                           ; 1 bytes @ 0x0
  1175                           
  1176  0070                     ?_GetKeyTime:	
  1177                           ; 1 bytes @ 0x0
  1178                           
  1179  0070                     ?_GetKeyDate:	
  1180                           ; 1 bytes @ 0x0
  1181                           
  1182  0070                     ?_GetKeySettings:	
  1183                           ; 1 bytes @ 0x0
  1184                           
  1185  0070                     ?_readEEPROM:	
  1186                           ; 1 bytes @ 0x0
  1187                           
  1188  0070                     ?_I2C_Read_Byte:	
  1189                           ; 1 bytes @ 0x0
  1190                           
  1191  0070                     ?___bmul:	
  1192                           ; 1 bytes @ 0x0
  1193                           
  1194  0070                     ?_Lcd_Clear:	
  1195                           ; 1 bytes @ 0x0
  1196                           
  1197  0070                     ?_ADC_Read:	
  1198                           ; 2 bytes @ 0x0
  1199                           
  1200  0070                     ?___wmul:	
  1201                           ; 2 bytes @ 0x0
  1202                           
  1203  0070                     ?___awdiv:	
  1204                           ; 2 bytes @ 0x0
  1205                           
  1206  0070                     ?___awmod:	
  1207                           ; 2 bytes @ 0x0
  1208                           
  1209  0070                     ?___lwdiv:	
  1210                           ; 2 bytes @ 0x0
  1211                           
  1212  0070                     ?___ftpack:	
  1213                           ; 2 bytes @ 0x0
  1214                           
  1215  0070                     ?_CLeakage:	
  1216                           ; 3 bytes @ 0x0
  1217                           
  1218  0070                     ?___aldiv:	
  1219                           ; 3 bytes @ 0x0
  1220                           
  1221  0070                     ?___fttol:	
  1222                           ; 4 bytes @ 0x0
  1223                           
  1224  0070                     Lcd_Port@a:	
  1225                           ; 4 bytes @ 0x0
  1226                           
  1227  0070                     SendByteSerially@Byte:	
  1228                           ; 1 bytes @ 0x0
  1229                           
  1230  0070                     readEEPROM@address:	
  1231                           ; 1 bytes @ 0x0
  1232                           
  1233  0070                     writeEEPROM@datas:	
  1234                           ; 1 bytes @ 0x0
  1235                           
  1236  0070                     I2C_Write_Byte@Byte:	
  1237                           ; 1 bytes @ 0x0
  1238                           
  1239  0070                     ___bmul@multiplicand:	
  1240                           ; 1 bytes @ 0x0
  1241                           
  1242  0070                     _isdigit$633:	
  1243                           ; 1 bytes @ 0x0
  1244                           
  1245  0070                     ___wmul@multiplier:	
  1246                           ; 1 bytes @ 0x0
  1247                           
  1248  0070                     ___awdiv@divisor:	
  1249                           ; 2 bytes @ 0x0
  1250                           
  1251  0070                     ___awmod@divisor:	
  1252                           ; 2 bytes @ 0x0
  1253                           
  1254  0070                     ___lwdiv@divisor:	
  1255                           ; 2 bytes @ 0x0
  1256                           
  1257  0070                     strcpy@from:	
  1258                           ; 2 bytes @ 0x0
  1259                           
  1260  0070                     ___ftpack@arg:	
  1261                           ; 2 bytes @ 0x0
  1262                           
  1263  0070                     ___fttol@f1:	
  1264                           ; 3 bytes @ 0x0
  1265                           
  1266  0070                     ___aldiv@divisor:	
  1267                           ; 3 bytes @ 0x0
  1268                           
  1269                           
  1270                           ; 4 bytes @ 0x0
  1271  0070                     	ds	1
  1272  0071                     ?_SendStringSerially:	
  1273  0071                     ??_Lcd_Cmd:	
  1274                           ; 0 bytes @ 0x1
  1275                           
  1276  0071                     ??_Lcd_Write_Char:	
  1277                           ; 0 bytes @ 0x1
  1278                           
  1279  0071                     ??_writeEEPROM:	
  1280                           ; 0 bytes @ 0x1
  1281                           
  1282  0071                     ??_EEPROMGET:	
  1283                           ; 0 bytes @ 0x1
  1284                           
  1285  0071                     ?_Write_Bytes_To_DS1307_RTC:	
  1286                           ; 0 bytes @ 0x1
  1287                           
  1288  0071                     ?_Read_Bytes_From_DS1307_RTC:	
  1289                           ; 0 bytes @ 0x1
  1290                           
  1291  0071                     ??___bmul:	
  1292                           ; 0 bytes @ 0x1
  1293                           
  1294  0071                     Write_Bytes_To_DS1307_RTC@pData:	
  1295                           ; 0 bytes @ 0x1
  1296                           
  1297  0071                     Read_Bytes_From_DS1307_RTC@pData:	
  1298                           ; 1 bytes @ 0x1
  1299                           
  1300  0071                     isdigit@c:	
  1301                           ; 1 bytes @ 0x1
  1302                           
  1303  0071                     SendStringSerially@st:	
  1304                           ; 1 bytes @ 0x1
  1305                           
  1306                           
  1307                           ; 2 bytes @ 0x1
  1308  0071                     	ds	1
  1309  0072                     ??_strcpy:	
  1310  0072                     ??_ADC_Read:	
  1311                           ; 0 bytes @ 0x2
  1312                           
  1313  0072                     Lcd_Write_Char@temp:	
  1314                           ; 0 bytes @ 0x2
  1315                           
  1316  0072                     writeEEPROM@address:	
  1317                           ; 1 bytes @ 0x2
  1318                           
  1319  0072                     Write_Bytes_To_DS1307_RTC@NoOfBytes:	
  1320                           ; 1 bytes @ 0x2
  1321                           
  1322  0072                     ___bmul@product:	
  1323                           ; 1 bytes @ 0x2
  1324                           
  1325  0072                     Read_Bytes_From_DS1307_RTC@NoOfBytes:	
  1326                           ; 1 bytes @ 0x2
  1327                           
  1328  0072                     ___wmul@multiplicand:	
  1329                           ; 2 bytes @ 0x2
  1330                           
  1331  0072                     ___awdiv@dividend:	
  1332                           ; 2 bytes @ 0x2
  1333                           
  1334  0072                     ___awmod@dividend:	
  1335                           ; 2 bytes @ 0x2
  1336                           
  1337  0072                     ___lwdiv@dividend:	
  1338                           ; 2 bytes @ 0x2
  1339                           
  1340                           
  1341                           ; 2 bytes @ 0x2
  1342  0072                     	ds	1
  1343  0073                     ??_SendStringSerially:	
  1344  0073                     ??_GetKey:	
  1345                           ; 0 bytes @ 0x3
  1346                           
  1347  0073                     ??_GetKeyNumber:	
  1348                           ; 0 bytes @ 0x3
  1349                           
  1350  0073                     ??_GetKeySettings:	
  1351                           ; 0 bytes @ 0x3
  1352                           
  1353  0073                     ??_SendMsg_Inti:	
  1354                           ; 0 bytes @ 0x3
  1355                           
  1356  0073                     ??_Write_Bytes_To_DS1307_RTC:	
  1357                           ; 0 bytes @ 0x3
  1358                           
  1359  0073                     Lcd_Cmd@a:	
  1360                           ; 0 bytes @ 0x3
  1361                           
  1362  0073                     Lcd_Write_Char@y:	
  1363                           ; 1 bytes @ 0x3
  1364                           
  1365  0073                     writeEEPROM@INTCON_SAVE:	
  1366                           ; 1 bytes @ 0x3
  1367                           
  1368  0073                     ___bmul@multiplier:	
  1369                           ; 1 bytes @ 0x3
  1370                           
  1371  0073                     ___ftpack@exp:	
  1372                           ; 1 bytes @ 0x3
  1373                           
  1374  0073                     strcpy@cp:	
  1375                           ; 1 bytes @ 0x3
  1376                           
  1377  0073                     EEPROMGET@x:	
  1378                           ; 1 bytes @ 0x3
  1379                           
  1380                           
  1381                           ; 2 bytes @ 0x3
  1382  0073                     	ds	1
  1383  0074                     ??_Lcd_Clear:	
  1384  0074                     ?_Lcd_Set_Cursor:	
  1385                           ; 0 bytes @ 0x4
  1386                           
  1387  0074                     ??_Lcd_Init:	
  1388                           ; 0 bytes @ 0x4
  1389                           
  1390  0074                     ??_EEPROMSET:	
  1391                           ; 0 bytes @ 0x4
  1392                           
  1393  0074                     ??_Read_Bytes_From_DS1307_RTC:	
  1394                           ; 0 bytes @ 0x4
  1395                           
  1396  0074                     ??___wmul:	
  1397                           ; 0 bytes @ 0x4
  1398                           
  1399  0074                     ??___awdiv:	
  1400                           ; 0 bytes @ 0x4
  1401                           
  1402  0074                     ??___awmod:	
  1403                           ; 0 bytes @ 0x4
  1404                           
  1405  0074                     ??___fttol:	
  1406                           ; 0 bytes @ 0x4
  1407                           
  1408  0074                     ??___lwdiv:	
  1409                           ; 0 bytes @ 0x4
  1410                           
  1411  0074                     Lcd_Set_Cursor@b:	
  1412                           ; 0 bytes @ 0x4
  1413                           
  1414  0074                     Lcd_Write_Char@a:	
  1415                           ; 1 bytes @ 0x4
  1416                           
  1417  0074                     GetKey@key:	
  1418                           ; 1 bytes @ 0x4
  1419                           
  1420  0074                     GetKeyNumber@key:	
  1421                           ; 1 bytes @ 0x4
  1422                           
  1423  0074                     ADC_Read@channel:	
  1424                           ; 1 bytes @ 0x4
  1425                           
  1426  0074                     ___ftpack@sign:	
  1427                           ; 1 bytes @ 0x4
  1428                           
  1429  0074                     strcpy@to:	
  1430                           ; 1 bytes @ 0x4
  1431                           
  1432  0074                     ___wmul@product:	
  1433                           ; 1 bytes @ 0x4
  1434                           
  1435  0074                     ___aldiv@dividend:	
  1436                           ; 2 bytes @ 0x4
  1437                           
  1438                           
  1439                           ; 4 bytes @ 0x4
  1440  0074                     	ds	1
  1441  0075                     ??___ftpack:	
  1442  0075                     ??_Lcd_Set_Cursor:	
  1443                           ; 0 bytes @ 0x5
  1444                           
  1445  0075                     ?_Lcd_Write_String:	
  1446                           ; 0 bytes @ 0x5
  1447                           
  1448  0075                     ??_GetKeyTime:	
  1449                           ; 0 bytes @ 0x5
  1450                           
  1451  0075                     Write_Bytes_To_DS1307_RTC@Address:	
  1452                           ; 0 bytes @ 0x5
  1453                           
  1454  0075                     ___awdiv@counter:	
  1455                           ; 1 bytes @ 0x5
  1456                           
  1457  0075                     ___awmod@counter:	
  1458                           ; 1 bytes @ 0x5
  1459                           
  1460  0075                     Lcd_Write_String@a:	
  1461                           ; 1 bytes @ 0x5
  1462                           
  1463  0075                     ___lwdiv@quotient:	
  1464                           ; 2 bytes @ 0x5
  1465                           
  1466                           
  1467                           ; 2 bytes @ 0x5
  1468  0075                     	ds	1
  1469  0076                     ?_atoi:	
  1470  0076                     GetKeyTime@key:	
  1471                           ; 2 bytes @ 0x6
  1472                           
  1473  0076                     Read_Bytes_From_DS1307_RTC@Address:	
  1474                           ; 1 bytes @ 0x6
  1475                           
  1476  0076                     ___awdiv@sign:	
  1477                           ; 1 bytes @ 0x6
  1478                           
  1479  0076                     ___awmod@sign:	
  1480                           ; 1 bytes @ 0x6
  1481                           
  1482  0076                     GetKeySettings@set:	
  1483                           ; 1 bytes @ 0x6
  1484                           
  1485  0076                     EEPROMSET@x:	
  1486                           ; 2 bytes @ 0x6
  1487                           
  1488  0076                     Write_Bytes_To_DS1307_RTC@i:	
  1489                           ; 2 bytes @ 0x6
  1490                           
  1491  0076                     atoi@s:	
  1492                           ; 2 bytes @ 0x6
  1493                           
  1494                           
  1495                           ; 2 bytes @ 0x6
  1496  0076                     	ds	1
  1497  0077                     ??_Lcd_Write_String:	
  1498  0077                     Lcd_Set_Cursor@a:	
  1499                           ; 0 bytes @ 0x7
  1500                           
  1501  0077                     ___lwdiv@counter:	
  1502                           ; 1 bytes @ 0x7
  1503                           
  1504  0077                     Read_Bytes_From_DS1307_RTC@i:	
  1505                           ; 1 bytes @ 0x7
  1506                           
  1507  0077                     ___awdiv@quotient:	
  1508                           ; 2 bytes @ 0x7
  1509                           
  1510                           
  1511                           ; 2 bytes @ 0x7
  1512  0077                     	ds	1
  1513  0078                     ??_atoi:	
  1514  0078                     ??___aldiv:	
  1515                           ; 0 bytes @ 0x8
  1516                           
  1517  0078                     ?___lwmod:	
  1518                           ; 0 bytes @ 0x8
  1519                           
  1520  0078                     ?___lwtoft:	
  1521                           ; 2 bytes @ 0x8
  1522                           
  1523  0078                     Lcd_Set_Cursor@z:	
  1524                           ; 3 bytes @ 0x8
  1525                           
  1526  0078                     GetKeySettings@key:	
  1527                           ; 1 bytes @ 0x8
  1528                           
  1529  0078                     ___fttol@sign1:	
  1530                           ; 1 bytes @ 0x8
  1531                           
  1532  0078                     ___lwmod@divisor:	
  1533                           ; 1 bytes @ 0x8
  1534                           
  1535  0078                     ___lwtoft@c:	
  1536                           ; 2 bytes @ 0x8
  1537                           
  1538                           
  1539                           ; 2 bytes @ 0x8
  1540  0078                     	ds	1
  1541  0079                     ?_Set_DS1307_RTC_Time:	
  1542  0079                     ?_Set_DS1307_RTC_Date:	
  1543                           ; 0 bytes @ 0x9
  1544                           
  1545  0079                     ??_Get_DS1307_RTC_Time:	
  1546                           ; 0 bytes @ 0x9
  1547                           
  1548  0079                     ??_Get_DS1307_RTC_Date:	
  1549                           ; 0 bytes @ 0x9
  1550                           
  1551  0079                     ??_InitUART:	
  1552                           ; 0 bytes @ 0x9
  1553                           
  1554  0079                     Lcd_Set_Cursor@y:	
  1555                           ; 0 bytes @ 0x9
  1556                           
  1557  0079                     Set_DS1307_RTC_Time@Hours:	
  1558                           ; 1 bytes @ 0x9
  1559                           
  1560  0079                     Set_DS1307_RTC_Date@Month:	
  1561                           ; 1 bytes @ 0x9
  1562                           
  1563  0079                     ___fttol@lval:	
  1564                           ; 1 bytes @ 0x9
  1565                           
  1566                           
  1567                           ; 4 bytes @ 0x9
  1568  0079                     	ds	1
  1569  007A                     Lcd_Set_Cursor@temp:	
  1570  007A                     Set_DS1307_RTC_Time@Mins:	
  1571                           ; 1 bytes @ 0xA
  1572                           
  1573  007A                     Set_DS1307_RTC_Date@Year:	
  1574                           ; 1 bytes @ 0xA
  1575                           
  1576  007A                     atoi@sign:	
  1577                           ; 1 bytes @ 0xA
  1578                           
  1579  007A                     Lcd_Write_String@i:	
  1580                           ; 1 bytes @ 0xA
  1581                           
  1582  007A                     ___lwmod@dividend:	
  1583                           ; 2 bytes @ 0xA
  1584                           
  1585                           
  1586                           ; 2 bytes @ 0xA
  1587  007A                     	ds	1
  1588  007B                     ??___lwtoft:	
  1589  007B                     Set_DS1307_RTC_Time@Secs:	
  1590                           ; 0 bytes @ 0xB
  1591                           
  1592  007B                     Set_DS1307_RTC_Date@Day:	
  1593                           ; 1 bytes @ 0xB
  1594                           
  1595  007B                     atoi@a:	
  1596                           ; 1 bytes @ 0xB
  1597                           
  1598                           
  1599                           ; 2 bytes @ 0xB
  1600  007B                     	ds	1
  1601  007C                     ??_GetKeyDate:	
  1602  007C                     ??_DisplayTimeToLCD:	
  1603                           ; 0 bytes @ 0xC
  1604                           
  1605  007C                     ??_DisplayDateOnLCD:	
  1606                           ; 0 bytes @ 0xC
  1607                           
  1608  007C                     ??___lwmod:	
  1609                           ; 0 bytes @ 0xC
  1610                           
  1611  007C                     Set_DS1307_RTC_Time@Mode:	
  1612                           ; 0 bytes @ 0xC
  1613                           
  1614  007C                     Set_DS1307_RTC_Date@Date:	
  1615                           ; 1 bytes @ 0xC
  1616                           
  1617                           
  1618                           ; 1 bytes @ 0xC
  1619  007C                     	ds	1
  1620  007D                     GetKeyDate@key:	
  1621  007D                     ___fttol@exp1:	
  1622                           ; 1 bytes @ 0xD
  1623                           
  1624  007D                     ___lwmod@counter:	
  1625                           ; 1 bytes @ 0xD
  1626                           
  1627                           
  1628                           ; 1 bytes @ 0xD
  1629  007D                     	ds	1
  1630  007E                     ??_avgpow:	
  1631                           
  1632                           	psect	cstackBANK0
  1633  0020                     __pcstackBANK0:	
  1634                           ; 0 bytes @ 0xE
  1635                           
  1636  0020                     ??_Set_DS1307_RTC_Time:	
  1637  0020                     ??_Set_DS1307_RTC_Date:	
  1638                           ; 0 bytes @ 0x0
  1639                           
  1640  0020                     ?_sprintf:	
  1641                           ; 0 bytes @ 0x0
  1642                           
  1643  0020                     ?___ftmul:	
  1644                           ; 2 bytes @ 0x0
  1645                           
  1646  0020                     DisplayTimeToLCD@pTimeArray:	
  1647                           ; 3 bytes @ 0x0
  1648                           
  1649  0020                     DisplayDateOnLCD@pDateArray:	
  1650                           ; 1 bytes @ 0x0
  1651                           
  1652  0020                     ___aldiv@counter:	
  1653                           ; 1 bytes @ 0x0
  1654                           
  1655  0020                     sprintf@f:	
  1656                           ; 1 bytes @ 0x0
  1657                           
  1658  0020                     ___ftmul@f1:	
  1659                           ; 2 bytes @ 0x0
  1660                           
  1661                           
  1662                           ; 3 bytes @ 0x0
  1663  0020                     	ds	1
  1664  0021                     ___aldiv@sign:	
  1665                           
  1666                           ; 1 bytes @ 0x1
  1667  0021                     	ds	1
  1668  0022                     ___aldiv@quotient:	
  1669                           
  1670                           ; 4 bytes @ 0x2
  1671  0022                     	ds	1
  1672  0023                     ___ftmul@f2:	
  1673                           
  1674                           ; 3 bytes @ 0x3
  1675  0023                     	ds	3
  1676  0026                     ??_sprintf:	
  1677  0026                     ?_InitUART:	
  1678                           ; 0 bytes @ 0x6
  1679                           
  1680  0026                     ??___ftmul:	
  1681                           ; 0 bytes @ 0x6
  1682                           
  1683  0026                     InitUART@BAUDRATE:	
  1684                           ; 0 bytes @ 0x6
  1685                           
  1686                           
  1687                           ; 2 bytes @ 0x6
  1688  0026                     	ds	3
  1689  0029                     sprintf@flag:	
  1690                           
  1691                           ; 1 bytes @ 0x9
  1692  0029                     	ds	1
  1693  002A                     sprintf@prec:	
  1694  002A                     ___ftmul@exp:	
  1695                           ; 1 bytes @ 0xA
  1696                           
  1697                           
  1698                           ; 1 bytes @ 0xA
  1699  002A                     	ds	1
  1700  002B                     sprintf@ap:	
  1701  002B                     ___ftmul@f3_as_product:	
  1702                           ; 1 bytes @ 0xB
  1703                           
  1704                           
  1705                           ; 3 bytes @ 0xB
  1706  002B                     	ds	1
  1707  002C                     sprintf@cp:	
  1708                           
  1709                           ; 2 bytes @ 0xC
  1710  002C                     	ds	2
  1711  002E                     ___ftmul@cntr:	
  1712  002E                     sprintf@val:	
  1713                           ; 1 bytes @ 0xE
  1714                           
  1715                           
  1716                           ; 2 bytes @ 0xE
  1717  002E                     	ds	1
  1718  002F                     ___ftmul@sign:	
  1719                           
  1720                           ; 1 bytes @ 0xF
  1721  002F                     	ds	1
  1722  0030                     sprintf@sp:	
  1723                           
  1724                           ; 1 bytes @ 0x10
  1725  0030                     	ds	1
  1726  0031                     sprintf@c:	
  1727                           
  1728                           ; 1 bytes @ 0x11
  1729  0031                     	ds	1
  1730  0032                     ??_Settings:	
  1731  0032                     ??_Msg_Setup:	
  1732                           ; 0 bytes @ 0x12
  1733                           
  1734  0032                     ??_CLeakage:	
  1735                           ; 0 bytes @ 0x12
  1736                           
  1737                           
  1738                           ; 0 bytes @ 0x12
  1739  0032                     	ds	3
  1740  0035                     ??_GSM_Send:	
  1741                           
  1742                           ; 0 bytes @ 0x15
  1743  0035                     	ds	1
  1744  0036                     Settings@x:	
  1745  0036                     CLeakage@voltage:	
  1746                           ; 2 bytes @ 0x16
  1747                           
  1748                           
  1749                           ; 3 bytes @ 0x16
  1750  0036                     	ds	2
  1751  0038                     ??_CheckSensors:	
  1752  0038                     Settings@Key:	
  1753                           ; 0 bytes @ 0x18
  1754                           
  1755                           
  1756                           ; 1 bytes @ 0x18
  1757  0038                     	ds	1
  1758  0039                     Settings@nkey:	
  1759  0039                     _CLeakage$926:	
  1760                           ; 1 bytes @ 0x19
  1761                           
  1762                           
  1763                           ; 3 bytes @ 0x19
  1764  0039                     	ds	1
  1765  003A                     ??_InitUnit:	
  1766                           
  1767                           ; 0 bytes @ 0x1A
  1768  003A                     	ds	2
  1769  003C                     CLeakage@b:	
  1770                           
  1771                           ; 2 bytes @ 0x1C
  1772  003C                     	ds	1
  1773  003D                     InitUnit@Key:	
  1774                           
  1775                           ; 1 bytes @ 0x1D
  1776  003D                     	ds	1
  1777  003E                     CLeakage@power:	
  1778                           
  1779                           ; 3 bytes @ 0x1E
  1780  003E                     	ds	3
  1781  0041                     CLeakage@current_bits:	
  1782                           
  1783                           ; 2 bytes @ 0x21
  1784  0041                     	ds	2
  1785  0043                     CLeakage@a:	
  1786                           
  1787                           ; 2 bytes @ 0x23
  1788  0043                     	ds	2
  1789  0045                     CLeakage@c:	
  1790                           
  1791                           ; 2 bytes @ 0x25
  1792  0045                     	ds	2
  1793  0047                     ??_main:	
  1794                           
  1795                           ; 0 bytes @ 0x27
  1796  0047                     	ds	3
  1797                           
  1798                           	psect	maintext
  1799  16E5                     __pmaintext:	
  1800 ;;
  1801 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1802 ;;
  1803 ;; *************** function _main *****************
  1804 ;; Defined at:
  1805 ;;		line 328 in file "RTC_F.c"
  1806 ;; Parameters:    Size  Location     Type
  1807 ;;		None
  1808 ;; Auto vars:     Size  Location     Type
  1809 ;;		None
  1810 ;; Return value:  Size  Location     Type
  1811 ;;		None               void
  1812 ;; Registers used:
  1813 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1814 ;; Tracked objects:
  1815 ;;		On entry : B00/0
  1816 ;;		On exit  : 0/0
  1817 ;;		Unchanged: 0/0
  1818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1819 ;;      Params:         0       0       0       0       0
  1820 ;;      Locals:         0       0       0       0       0
  1821 ;;      Temps:          0       3       0       0       0
  1822 ;;      Totals:         0       3       0       0       0
  1823 ;;Total ram usage:        3 bytes
  1824 ;; Hardware stack levels required when called:    6
  1825 ;; This function calls:
  1826 ;;		_CLeakage
  1827 ;;		_CheckSensors
  1828 ;;		_InitUnit
  1829 ;;		_Lcd_Clear
  1830 ;;		_Lcd_Set_Cursor
  1831 ;;		_Lcd_Write_String
  1832 ;;		___awdiv
  1833 ;;		___awmod
  1834 ;;		_avgpow
  1835 ;;		_sprintf
  1836 ;; This function is called by:
  1837 ;;		Startup code after reset
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           
  1842                           ;psect for function _main
  1843  16E5                     _main:	
  1844                           
  1845                           ;RTC_F.c: 330: InitUnit();
  1846                           
  1847                           ;incstack = 0
  1848                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1849  16E5  120A  118A  2287  160A  118A  	fcall	_InitUnit
  1850  16EA  2F9B               	goto	l4274
  1851  16EB                     l4276:	
  1852                           
  1853                           ;RTC_F.c: 335: {
  1854                           ;RTC_F.c: 336: for(x=1;x<120;x++)
  1855  16EB  3001               	movlw	1
  1856  16EC  00E8               	movwf	_x
  1857  16ED  3000               	movlw	0
  1858  16EE  00E9               	movwf	_x+1
  1859  16EF                     L1:	
  1860  16EF  0869               	movf	_x+1,w
  1861  16F0  3A80               	xorlw	128
  1862  16F1  00FF               	movwf	127
  1863  16F2  3080               	movlw	128
  1864  16F3  027F               	subwf	127,w
  1865  16F4  1D03               	skipz
  1866  16F5  2EF8               	goto	u4345
  1867  16F6  3078               	movlw	120
  1868  16F7  0268               	subwf	_x,w
  1869  16F8                     u4345:	
  1870  16F8  1803               	btfsc	3,0
  1871  16F9  2F9B               	goto	l4274
  1872                           
  1873                           ;RTC_F.c: 337: {
  1874                           ;RTC_F.c: 338: mins=x/60;
  1875  16FA  303C               	movlw	60
  1876  16FB  00F0               	movwf	___awdiv@divisor
  1877  16FC  3000               	movlw	0
  1878  16FD  00F1               	movwf	___awdiv@divisor+1
  1879  16FE  1283               	bcf	3,5	;RP0=0, select bank0
  1880  16FF  1303               	bcf	3,6	;RP1=0, select bank0
  1881  1700  0869               	movf	_x+1,w
  1882  1701  00F3               	movwf	___awdiv@dividend+1
  1883  1702  0868               	movf	_x,w
  1884  1703  00F2               	movwf	___awdiv@dividend
  1885  1704  160A  118A  200F  160A  118A  	fcall	___awdiv
  1886  1709  0871               	movf	?___awdiv+1,w
  1887  170A  1283               	bcf	3,5	;RP0=0, select bank0
  1888  170B  1303               	bcf	3,6	;RP1=0, select bank0
  1889  170C  00E5               	movwf	_mins+1
  1890  170D  0870               	movf	?___awdiv,w
  1891  170E  00E4               	movwf	_mins
  1892                           
  1893                           ;RTC_F.c: 339: secs=x%60;
  1894  170F  303C               	movlw	60
  1895  1710  00F0               	movwf	___awmod@divisor
  1896  1711  3000               	movlw	0
  1897  1712  00F1               	movwf	___awmod@divisor+1
  1898  1713  0869               	movf	_x+1,w
  1899  1714  00F3               	movwf	___awmod@dividend+1
  1900  1715  0868               	movf	_x,w
  1901  1716  00F2               	movwf	___awmod@dividend
  1902  1717  160A  158A  27B5  160A  118A  	fcall	___awmod
  1903  171C  0871               	movf	?___awmod+1,w
  1904  171D  1283               	bcf	3,5	;RP0=0, select bank0
  1905  171E  1303               	bcf	3,6	;RP1=0, select bank0
  1906  171F  00E7               	movwf	_secs+1
  1907  1720  0870               	movf	?___awmod,w
  1908  1721  00E6               	movwf	_secs
  1909                           
  1910                           ;RTC_F.c: 340: sprintf(text,"      0%d:%d",mins,secs);
  1911  1722  306A               	movlw	low (STR_50| (0+32768))
  1912  1723  00A0               	movwf	sprintf@f
  1913  1724  3089               	movlw	high (STR_50| (0+32768))
  1914  1725  00A1               	movwf	sprintf@f+1
  1915  1726  0865               	movf	_mins+1,w
  1916  1727  00A3               	movwf	?_sprintf+3
  1917  1728  0864               	movf	_mins,w
  1918  1729  00A2               	movwf	?_sprintf+2
  1919  172A  0867               	movf	_secs+1,w
  1920  172B  00A5               	movwf	?_sprintf+5
  1921  172C  0866               	movf	_secs,w
  1922  172D  00A4               	movwf	?_sprintf+4
  1923  172E  30A4               	movlw	(low (_text| (0+256)))& (0+255)
  1924  172F  120A  158A  22DC  160A  118A  	fcall	_sprintf
  1925                           
  1926                           ;RTC_F.c: 341: Lcd_Clear();
  1927  1734  160A  158A  2331  160A  118A  	fcall	_Lcd_Clear
  1928                           
  1929                           ;RTC_F.c: 342: Lcd_Set_Cursor(1,1);
  1930  1739  01F4               	clrf	Lcd_Set_Cursor@b
  1931  173A  0AF4               	incf	Lcd_Set_Cursor@b,f
  1932  173B  3001               	movlw	1
  1933  173C  160A  158A  276B  160A  118A  	fcall	_Lcd_Set_Cursor
  1934                           
  1935                           ;RTC_F.c: 343: Lcd_Write_String(text);
  1936  1741  30A4               	movlw	(low (_text| (0+256)))& (0+255)
  1937  1742  00F5               	movwf	Lcd_Write_String@a
  1938  1743  3001               	movlw	1
  1939  1744  00F6               	movwf	Lcd_Write_String@a+1
  1940  1745  160A  158A  26A4  160A  118A  	fcall	_Lcd_Write_String
  1941                           
  1942                           ;RTC_F.c: 344: _delay((unsigned long)((800)*(8000000/4000.0)));
  1943  174A  3009               	movlw	9
  1944  174B  1283               	bcf	3,5	;RP0=0, select bank0
  1945  174C  1303               	bcf	3,6	;RP1=0, select bank0
  1946  174D  00C9               	movwf	??_main+2
  1947  174E  301E               	movlw	30
  1948  174F  00C8               	movwf	??_main+1
  1949  1750  30EB               	movlw	235
  1950  1751  00C7               	movwf	??_main
  1951  1752                     u4427:	
  1952  1752  0BC7               	decfsz	??_main,f
  1953  1753  2F52               	goto	u4427
  1954  1754  0BC8               	decfsz	??_main+1,f
  1955  1755  2F52               	goto	u4427
  1956  1756  0BC9               	decfsz	??_main+2,f
  1957  1757  2F52               	goto	u4427
  1958  1758  0000               	nop
  1959                           
  1960                           ;RTC_F.c: 346: CheckSensors();
  1961  1759  160A  118A  21F6  160A  118A  	fcall	_CheckSensors
  1962                           
  1963                           ;RTC_F.c: 349: if(RC0==1)
  1964  175E  1283               	bcf	3,5	;RP0=0, select bank0
  1965  175F  1303               	bcf	3,6	;RP1=0, select bank0
  1966  1760  1807               	btfsc	7,0	;volatile
  1967  1761  2F9B               	goto	l4274
  1968                           
  1969                           ;RTC_F.c: 352: if(x==119 || RE2==0)
  1970                           
  1971                           ;RTC_F.c: 350: break;
  1972  1762  3077               	movlw	119
  1973  1763  0668               	xorwf	_x,w
  1974  1764  0469               	iorwf	_x+1,w
  1975  1765  1903               	btfsc	3,2
  1976  1766  2F69               	goto	l521
  1977  1767  1909               	btfsc	9,2	;volatile
  1978  1768  2F92               	goto	l4314
  1979  1769                     l521:	
  1980                           
  1981                           ;RTC_F.c: 353: {
  1982                           ;RTC_F.c: 354: RD0=0;
  1983  1769  1008               	bcf	8,0	;volatile
  1984                           
  1985                           ;RTC_F.c: 355: Lcd_Clear();
  1986  176A  160A  158A  2331  160A  118A  	fcall	_Lcd_Clear
  1987                           
  1988                           ;RTC_F.c: 356: Lcd_Set_Cursor(1,1);
  1989  176F  01F4               	clrf	Lcd_Set_Cursor@b
  1990  1770  0AF4               	incf	Lcd_Set_Cursor@b,f
  1991  1771  3001               	movlw	1
  1992  1772  160A  158A  276B  160A  118A  	fcall	_Lcd_Set_Cursor
  1993                           
  1994                           ;RTC_F.c: 357: Lcd_Write_String("   Switched OFF");
  1995  1777  309B               	movlw	low (STR_51| (0+32768))
  1996  1778  00F5               	movwf	Lcd_Write_String@a
  1997  1779  3088               	movlw	high (STR_51| (0+32768))
  1998  177A  00F6               	movwf	Lcd_Write_String@a+1
  1999  177B  160A  158A  26A4  160A  118A  	fcall	_Lcd_Write_String
  2000                           
  2001                           ;RTC_F.c: 358: RE0=0;
  2002  1780  1283               	bcf	3,5	;RP0=0, select bank0
  2003  1781  1303               	bcf	3,6	;RP1=0, select bank0
  2004  1782  1009               	bcf	9,0	;volatile
  2005                           
  2006                           ;RTC_F.c: 359: RE1=1;
  2007  1783  1489               	bsf	9,1	;volatile
  2008                           
  2009                           ;RTC_F.c: 361: _delay((unsigned long)((20000)*(8000000/4000.0)));
  2010  1784  30CB               	movlw	203
  2011  1785  00C9               	movwf	??_main+2
  2012  1786  30ED               	movlw	237
  2013  1787  00C8               	movwf	??_main+1
  2014  1788  304C               	movlw	76
  2015  1789  00C7               	movwf	??_main
  2016  178A                     u4437:	
  2017  178A  0BC7               	decfsz	??_main,f
  2018  178B  2F8A               	goto	u4437
  2019  178C  0BC8               	decfsz	??_main+1,f
  2020  178D  2F8A               	goto	u4437
  2021  178E  0BC9               	decfsz	??_main+2,f
  2022  178F  2F8A               	goto	u4437
  2023  1790  2F91               	nop2
  2024  1791                     l522:	
  2025                           ;RTC_F.c: 362: while(1)
  2026                           
  2027                           
  2028                           ;RTC_F.c: 363: {}
  2029  1791  2F91               	goto	l522
  2030  1792                     l4314:	
  2031  1792  3001               	movlw	1
  2032  1793  1283               	bcf	3,5	;RP0=0, select bank0
  2033  1794  1303               	bcf	3,6	;RP1=0, select bank0
  2034  1795  07E8               	addwf	_x,f
  2035  1796  1803               	skipnc
  2036  1797  0AE9               	incf	_x+1,f
  2037  1798  3000               	movlw	0
  2038  1799  07E9               	addwf	_x+1,f
  2039  179A  2EEF               	goto	L1
  2040  179B                     l4274:	
  2041                           ;RTC_F.c: 332: while(1)
  2042                           
  2043                           ;RTC_F.c: 365: }
  2044                           ;RTC_F.c: 366: }
  2045                           ;RTC_F.c: 368: }
  2046                           
  2047                           
  2048                           ;RTC_F.c: 333: {
  2049                           ;RTC_F.c: 334: if(RC0==0)
  2050  179B  1283               	bcf	3,5	;RP0=0, select bank0
  2051  179C  1303               	bcf	3,6	;RP1=0, select bank0
  2052  179D  1C07               	btfss	7,0	;volatile
  2053  179E  2EEB               	goto	l4276
  2054                           
  2055                           ;RTC_F.c: 370: else
  2056                           ;RTC_F.c: 371: {
  2057                           ;RTC_F.c: 373: CheckSensors();
  2058  179F  160A  118A  21F6  160A  118A  	fcall	_CheckSensors
  2059                           
  2060                           ;RTC_F.c: 375: Lcd_Clear();
  2061  17A4  160A  158A  2331  160A  118A  	fcall	_Lcd_Clear
  2062                           
  2063                           ;RTC_F.c: 376: Lcd_Set_Cursor(1,1);
  2064  17A9  01F4               	clrf	Lcd_Set_Cursor@b
  2065  17AA  0AF4               	incf	Lcd_Set_Cursor@b,f
  2066  17AB  3001               	movlw	1
  2067  17AC  160A  158A  276B  160A  118A  	fcall	_Lcd_Set_Cursor
  2068                           
  2069                           ;RTC_F.c: 377: Lcd_Write_String("    Switch ON");
  2070  17B1  3033               	movlw	low (STR_31| (0+32768))
  2071  17B2  00F5               	movwf	Lcd_Write_String@a
  2072  17B3  3089               	movlw	high (STR_31| (0+32768))
  2073  17B4  00F6               	movwf	Lcd_Write_String@a+1
  2074  17B5  160A  158A  26A4  160A  118A  	fcall	_Lcd_Write_String
  2075                           
  2076                           ;RTC_F.c: 378: CLeakage();
  2077  17BA  120A  158A  2545  160A  118A  	fcall	_CLeakage
  2078                           
  2079                           ;RTC_F.c: 379: _delay((unsigned long)((1000)*(8000000/4000.0)));
  2080  17BF  300B               	movlw	11
  2081  17C0  1283               	bcf	3,5	;RP0=0, select bank0
  2082  17C1  1303               	bcf	3,6	;RP1=0, select bank0
  2083  17C2  00C9               	movwf	??_main+2
  2084  17C3  3026               	movlw	38
  2085  17C4  00C8               	movwf	??_main+1
  2086  17C5  3066               	movlw	102
  2087  17C6  00C7               	movwf	??_main
  2088  17C7                     u4447:	
  2089  17C7  0BC7               	decfsz	??_main,f
  2090  17C8  2FC7               	goto	u4447
  2091  17C9  0BC8               	decfsz	??_main+1,f
  2092  17CA  2FC7               	goto	u4447
  2093  17CB  0BC9               	decfsz	??_main+2,f
  2094  17CC  2FC7               	goto	u4447
  2095  17CD  2FCE               	nop2
  2096                           
  2097                           ;RTC_F.c: 381: if(RE2==0)
  2098  17CE  1283               	bcf	3,5	;RP0=0, select bank0
  2099  17CF  1303               	bcf	3,6	;RP1=0, select bank0
  2100  17D0  1909               	btfsc	9,2	;volatile
  2101  17D1  2F9B               	goto	l4274
  2102                           
  2103                           ;RTC_F.c: 382: {
  2104                           ;RTC_F.c: 383: RD0=0;
  2105  17D2  1008               	bcf	8,0	;volatile
  2106                           
  2107                           ;RTC_F.c: 384: Lcd_Clear();
  2108  17D3  160A  158A  2331  160A  118A  	fcall	_Lcd_Clear
  2109                           
  2110                           ;RTC_F.c: 385: Lcd_Set_Cursor(1,1);
  2111  17D8  01F4               	clrf	Lcd_Set_Cursor@b
  2112  17D9  0AF4               	incf	Lcd_Set_Cursor@b,f
  2113  17DA  3001               	movlw	1
  2114  17DB  160A  158A  276B  160A  118A  	fcall	_Lcd_Set_Cursor
  2115                           
  2116                           ;RTC_F.c: 386: Lcd_Write_String("   Switched OFF");
  2117  17E0  309B               	movlw	low (STR_51| (0+32768))
  2118  17E1  00F5               	movwf	Lcd_Write_String@a
  2119  17E2  3088               	movlw	high (STR_51| (0+32768))
  2120  17E3  00F6               	movwf	Lcd_Write_String@a+1
  2121  17E4  160A  158A  26A4  160A  118A  	fcall	_Lcd_Write_String
  2122                           
  2123                           ;RTC_F.c: 387: RE0=0;
  2124  17E9  1283               	bcf	3,5	;RP0=0, select bank0
  2125  17EA  1303               	bcf	3,6	;RP1=0, select bank0
  2126  17EB  1009               	bcf	9,0	;volatile
  2127                           
  2128                           ;RTC_F.c: 388: RE1=1;
  2129  17EC  1489               	bsf	9,1	;volatile
  2130                           
  2131                           ;RTC_F.c: 389: _delay((unsigned long)((1000)*(8000000/4000.0)));
  2132  17ED  300B               	movlw	11
  2133  17EE  00C9               	movwf	??_main+2
  2134  17EF  3026               	movlw	38
  2135  17F0  00C8               	movwf	??_main+1
  2136  17F1  3066               	movlw	102
  2137  17F2  00C7               	movwf	??_main
  2138  17F3                     u4457:	
  2139  17F3  0BC7               	decfsz	??_main,f
  2140  17F4  2FF3               	goto	u4457
  2141  17F5  0BC8               	decfsz	??_main+1,f
  2142  17F6  2FF3               	goto	u4457
  2143  17F7  0BC9               	decfsz	??_main+2,f
  2144  17F8  2FF3               	goto	u4457
  2145  17F9  2FFA               	nop2
  2146                           
  2147                           ;RTC_F.c: 390: avgpow();
  2148  17FA  160A  158A  25F7  160A  118A  	fcall	_avgpow
  2149  17FF                     l527:	
  2150                           ;RTC_F.c: 391: while(1)
  2151                           
  2152                           
  2153                           ;RTC_F.c: 392: {}
  2154  17FF  2FFF               	goto	l527
  2155  1800                     __end_of_main:	
  2156                           
  2157                           	psect	text1
  2158  1DF7                     __ptext1:	
  2159 ;; *************** function _avgpow *****************
  2160 ;; Defined at:
  2161 ;;		line 403 in file "RTC_F.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;		None
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;		None
  2166 ;; Return value:  Size  Location     Type
  2167 ;;		None               void
  2168 ;; Registers used:
  2169 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2170 ;; Tracked objects:
  2171 ;;		On entry : 0/0
  2172 ;;		On exit  : 0/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2175 ;;      Params:         0       0       0       0       0
  2176 ;;      Locals:         0       0       0       0       0
  2177 ;;      Temps:          0       0       0       0       0
  2178 ;;      Totals:         0       0       0       0       0
  2179 ;;Total ram usage:        0 bytes
  2180 ;; Hardware stack levels used:    1
  2181 ;; Hardware stack levels required when called:    3
  2182 ;; This function calls:
  2183 ;;		_Lcd_Clear
  2184 ;;		_Lcd_Set_Cursor
  2185 ;;		_Lcd_Write_String
  2186 ;;		___awdiv
  2187 ;;		_sprintf
  2188 ;; This function is called by:
  2189 ;;		_main
  2190 ;; This function uses a non-reentrant model
  2191 ;;
  2192                           
  2193                           
  2194                           ;psect for function _avgpow
  2195  1DF7                     _avgpow:	
  2196                           
  2197                           ;RTC_F.c: 405: Lcd_Clear();
  2198                           
  2199                           ;incstack = 0
  2200                           ; Regs used in _avgpow: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2201  1DF7  160A  158A  2331  160A  158A  	fcall	_Lcd_Clear
  2202                           
  2203                           ;RTC_F.c: 406: Lcd_Set_Cursor(1,1);
  2204  1DFC  01F4               	clrf	Lcd_Set_Cursor@b
  2205  1DFD  0AF4               	incf	Lcd_Set_Cursor@b,f
  2206  1DFE  3001               	movlw	1
  2207  1DFF  160A  158A  276B  160A  158A  	fcall	_Lcd_Set_Cursor
  2208                           
  2209                           ;RTC_F.c: 407: sprintf(text,"AVGPOWER = %d W",(avgpower/count));
  2210  1E04  30AB               	movlw	low (STR_54| (0+32768))
  2211  1E05  1283               	bcf	3,5	;RP0=0, select bank0
  2212  1E06  1303               	bcf	3,6	;RP1=0, select bank0
  2213  1E07  00A0               	movwf	sprintf@f
  2214  1E08  3088               	movlw	high (STR_54| (0+32768))
  2215  1E09  00A1               	movwf	sprintf@f+1
  2216  1E0A  1683               	bsf	3,5	;RP0=1, select bank1
  2217  1E0B  1303               	bcf	3,6	;RP1=0, select bank1
  2218  1E0C  0824               	movf	(_count+1)^(0+128),w
  2219  1E0D  00F1               	movwf	___awdiv@divisor+1
  2220  1E0E  0823               	movf	_count^(0+128),w
  2221  1E0F  00F0               	movwf	___awdiv@divisor
  2222  1E10  1283               	bcf	3,5	;RP0=0, select bank0
  2223  1E11  1303               	bcf	3,6	;RP1=0, select bank0
  2224  1E12  084D               	movf	_avgpower+1,w
  2225  1E13  00F3               	movwf	___awdiv@dividend+1
  2226  1E14  084C               	movf	_avgpower,w
  2227  1E15  00F2               	movwf	___awdiv@dividend
  2228  1E16  160A  118A  200F  160A  158A  	fcall	___awdiv
  2229  1E1B  0871               	movf	?___awdiv+1,w
  2230  1E1C  1283               	bcf	3,5	;RP0=0, select bank0
  2231  1E1D  1303               	bcf	3,6	;RP1=0, select bank0
  2232  1E1E  00A3               	movwf	?_sprintf+3
  2233  1E1F  0870               	movf	?___awdiv,w
  2234  1E20  00A2               	movwf	?_sprintf+2
  2235  1E21  30A4               	movlw	(low (_text| (0+256)))& (0+255)
  2236  1E22  120A  158A  22DC  160A  158A  	fcall	_sprintf
  2237                           
  2238                           ;RTC_F.c: 408: Lcd_Write_String(text);
  2239  1E27  30A4               	movlw	(low (_text| (0+256)))& (0+255)
  2240  1E28  00F5               	movwf	Lcd_Write_String@a
  2241  1E29  3001               	movlw	1
  2242  1E2A  00F6               	movwf	Lcd_Write_String@a+1
  2243  1E2B  160A  158A  26A4   	fcall	_Lcd_Write_String
  2244  1E2E  0008               	return
  2245  1E2F                     __end_of_avgpow:	
  2246                           
  2247                           	psect	text2
  2248  0287                     __ptext2:	
  2249 ;; *************** function _InitUnit *****************
  2250 ;; Defined at:
  2251 ;;		line 46 in file "RTC_F.c"
  2252 ;; Parameters:    Size  Location     Type
  2253 ;;		None
  2254 ;; Auto vars:     Size  Location     Type
  2255 ;;  Key             1   29[BANK0 ] unsigned char 
  2256 ;; Return value:  Size  Location     Type
  2257 ;;		None               void
  2258 ;; Registers used:
  2259 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2260 ;; Tracked objects:
  2261 ;;		On entry : 0/0
  2262 ;;		On exit  : 0/0
  2263 ;;		Unchanged: 0/0
  2264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2265 ;;      Params:         0       0       0       0       0
  2266 ;;      Locals:         0       1       0       0       0
  2267 ;;      Temps:          0       3       0       0       0
  2268 ;;      Totals:         0       4       0       0       0
  2269 ;;Total ram usage:        4 bytes
  2270 ;; Hardware stack levels used:    1
  2271 ;; Hardware stack levels required when called:    5
  2272 ;; This function calls:
  2273 ;;		_ADC_Init
  2274 ;;		_EEPROMGET
  2275 ;;		_GetKeySettings
  2276 ;;		_InitI2C
  2277 ;;		_InitKeypad
  2278 ;;		_Lcd_Clear
  2279 ;;		_Lcd_Init
  2280 ;;		_Lcd_Set_Cursor
  2281 ;;		_Lcd_Write_String
  2282 ;;		_Settings
  2283 ;; This function is called by:
  2284 ;;		_main
  2285 ;; This function uses a non-reentrant model
  2286 ;;
  2287                           
  2288                           
  2289                           ;psect for function _InitUnit
  2290  0287                     _InitUnit:	
  2291                           
  2292                           ;incstack = 0
  2293                           ; Regs used in _InitUnit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2294  0287  306E               	movlw	110
  2295  0288  1283               	bcf	3,5	;RP0=0, select bank0
  2296  0289  1303               	bcf	3,6	;RP1=0, select bank0
  2297  028A  00BA               	movwf	??_InitUnit
  2298  028B  083A               	movf	??_InitUnit,w
  2299  028C  00BD               	movwf	InitUnit@Key
  2300                           
  2301                           ;RTC_F.c: 48: EEPROMGET();
  2302  028D  160A  158A  2554  120A  118A  	fcall	_EEPROMGET
  2303                           
  2304                           ;RTC_F.c: 49: TRISA = 0xFF;
  2305  0292  30FF               	movlw	255
  2306  0293  1683               	bsf	3,5	;RP0=1, select bank1
  2307  0294  1303               	bcf	3,6	;RP1=0, select bank1
  2308  0295  0085               	movwf	5	;volatile
  2309                           
  2310                           ;RTC_F.c: 50: TRISD = 0x00;
  2311  0296  0188               	clrf	8	;volatile
  2312                           
  2313                           ;RTC_F.c: 51: PORTD = 0X00;
  2314  0297  1283               	bcf	3,5	;RP0=0, select bank0
  2315  0298  1303               	bcf	3,6	;RP1=0, select bank0
  2316  0299  0188               	clrf	8	;volatile
  2317                           
  2318                           ;RTC_F.c: 52: ADC_Init();
  2319  029A  160A  158A  230D  120A  118A  	fcall	_ADC_Init
  2320                           
  2321                           ;RTC_F.c: 53: TRISE=0x04;
  2322  029F  3004               	movlw	4
  2323  02A0  1683               	bsf	3,5	;RP0=1, select bank1
  2324  02A1  1303               	bcf	3,6	;RP1=0, select bank1
  2325  02A2  0089               	movwf	9	;volatile
  2326                           
  2327                           ;RTC_F.c: 54: RE0=0;
  2328  02A3  1283               	bcf	3,5	;RP0=0, select bank0
  2329  02A4  1303               	bcf	3,6	;RP1=0, select bank0
  2330  02A5  1009               	bcf	9,0	;volatile
  2331                           
  2332                           ;RTC_F.c: 55: RE1=1;
  2333  02A6  1489               	bsf	9,1	;volatile
  2334                           
  2335                           ;RTC_F.c: 56: TRISC=0XFF;
  2336  02A7  30FF               	movlw	255
  2337  02A8  1683               	bsf	3,5	;RP0=1, select bank1
  2338  02A9  1303               	bcf	3,6	;RP1=0, select bank1
  2339  02AA  0087               	movwf	7	;volatile
  2340                           
  2341                           ;RTC_F.c: 57: RD0=0;
  2342  02AB  1283               	bcf	3,5	;RP0=0, select bank0
  2343  02AC  1303               	bcf	3,6	;RP1=0, select bank0
  2344  02AD  1008               	bcf	8,0	;volatile
  2345                           
  2346                           ;RTC_F.c: 58: InitKeypad();
  2347  02AE  160A  158A  233C  120A  118A  	fcall	_InitKeypad
  2348                           
  2349                           ;RTC_F.c: 59: InitI2C();
  2350  02B3  160A  118A  2002  120A  118A  	fcall	_InitI2C
  2351                           
  2352                           ;RTC_F.c: 60: RE0=0;
  2353  02B8  1283               	bcf	3,5	;RP0=0, select bank0
  2354  02B9  1303               	bcf	3,6	;RP1=0, select bank0
  2355  02BA  1009               	bcf	9,0	;volatile
  2356                           
  2357                           ;RTC_F.c: 61: RE1=1;
  2358  02BB  1489               	bsf	9,1	;volatile
  2359                           
  2360                           ;RTC_F.c: 62: Lcd_Init();
  2361  02BC  160A  118A  20C1  120A  118A  	fcall	_Lcd_Init
  2362                           
  2363                           ;RTC_F.c: 63: Lcd_Clear();
  2364  02C1  160A  158A  2331  120A  118A  	fcall	_Lcd_Clear
  2365                           
  2366                           ;RTC_F.c: 64: Lcd_Set_Cursor(1,1);
  2367  02C6  01F4               	clrf	Lcd_Set_Cursor@b
  2368  02C7  0AF4               	incf	Lcd_Set_Cursor@b,f
  2369  02C8  3001               	movlw	1
  2370  02C9  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  2371                           
  2372                           ;RTC_F.c: 65: Lcd_Write_String("    WELCOME");
  2373  02CE  3084               	movlw	low (STR_24| (0+32768))
  2374  02CF  00F5               	movwf	Lcd_Write_String@a
  2375  02D0  3089               	movlw	high (STR_24| (0+32768))
  2376  02D1  00F6               	movwf	Lcd_Write_String@a+1
  2377  02D2  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  2378                           
  2379                           ;RTC_F.c: 66: Lcd_Set_Cursor(2,1);
  2380  02D7  01F4               	clrf	Lcd_Set_Cursor@b
  2381  02D8  0AF4               	incf	Lcd_Set_Cursor@b,f
  2382  02D9  3002               	movlw	2
  2383  02DA  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  2384                           
  2385                           ;RTC_F.c: 67: Lcd_Write_String("****************");
  2386  02DF  3069               	movlw	low (STR_25| (0+32768))
  2387  02E0  00F5               	movwf	Lcd_Write_String@a
  2388  02E1  3088               	movlw	high (STR_25| (0+32768))
  2389  02E2  00F6               	movwf	Lcd_Write_String@a+1
  2390  02E3  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  2391                           
  2392                           ;RTC_F.c: 68: RD1=1;
  2393  02E8  1283               	bcf	3,5	;RP0=0, select bank0
  2394  02E9  1303               	bcf	3,6	;RP1=0, select bank0
  2395  02EA  1488               	bsf	8,1	;volatile
  2396                           
  2397                           ;RTC_F.c: 69: _delay((unsigned long)((1500)*(8000000/4000.0)));
  2398  02EB  3010               	movlw	16
  2399  02EC  00BC               	movwf	??_InitUnit+2
  2400  02ED  3039               	movlw	57
  2401  02EE  00BB               	movwf	??_InitUnit+1
  2402  02EF  301B               	movlw	27
  2403  02F0  00BA               	movwf	??_InitUnit
  2404  02F1                     u4467:	
  2405  02F1  0BBA               	decfsz	??_InitUnit,f
  2406  02F2  2AF1               	goto	u4467
  2407  02F3  0BBB               	decfsz	??_InitUnit+1,f
  2408  02F4  2AF1               	goto	u4467
  2409  02F5  0BBC               	decfsz	??_InitUnit+2,f
  2410  02F6  2AF1               	goto	u4467
  2411  02F7  2AF8               	nop2
  2412                           
  2413                           ;RTC_F.c: 70: RD1=0;
  2414  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  2415  02F9  1303               	bcf	3,6	;RP1=0, select bank0
  2416  02FA  1088               	bcf	8,1	;volatile
  2417                           
  2418                           ;RTC_F.c: 71: _delay((unsigned long)((1500)*(8000000/4000.0)));
  2419  02FB  3010               	movlw	16
  2420  02FC  00BC               	movwf	??_InitUnit+2
  2421  02FD  3039               	movlw	57
  2422  02FE  00BB               	movwf	??_InitUnit+1
  2423  02FF  301B               	movlw	27
  2424  0300  00BA               	movwf	??_InitUnit
  2425  0301                     u4477:	
  2426  0301  0BBA               	decfsz	??_InitUnit,f
  2427  0302  2B01               	goto	u4477
  2428  0303  0BBB               	decfsz	??_InitUnit+1,f
  2429  0304  2B01               	goto	u4477
  2430  0305  0BBC               	decfsz	??_InitUnit+2,f
  2431  0306  2B01               	goto	u4477
  2432  0307  2B08               	nop2
  2433                           
  2434                           ;RTC_F.c: 72: Lcd_Clear();
  2435  0308  160A  158A  2331  120A  118A  	fcall	_Lcd_Clear
  2436                           
  2437                           ;RTC_F.c: 73: Lcd_Set_Cursor(1,1);
  2438  030D  01F4               	clrf	Lcd_Set_Cursor@b
  2439  030E  0AF4               	incf	Lcd_Set_Cursor@b,f
  2440  030F  3001               	movlw	1
  2441  0310  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  2442                           
  2443                           ;RTC_F.c: 74: Lcd_Write_String(" Initializing.!");
  2444  0315  308B               	movlw	low (STR_26| (0+32768))
  2445  0316  00F5               	movwf	Lcd_Write_String@a
  2446  0317  3088               	movlw	high (STR_26| (0+32768))
  2447  0318  00F6               	movwf	Lcd_Write_String@a+1
  2448  0319  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  2449                           
  2450                           ;RTC_F.c: 75: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2451  031E  3015               	movlw	21
  2452  031F  1283               	bcf	3,5	;RP0=0, select bank0
  2453  0320  1303               	bcf	3,6	;RP1=0, select bank0
  2454  0321  00BC               	movwf	??_InitUnit+2
  2455  0322  304B               	movlw	75
  2456  0323  00BB               	movwf	??_InitUnit+1
  2457  0324  30D1               	movlw	209
  2458  0325  00BA               	movwf	??_InitUnit
  2459  0326                     u4487:	
  2460  0326  0BBA               	decfsz	??_InitUnit,f
  2461  0327  2B26               	goto	u4487
  2462  0328  0BBB               	decfsz	??_InitUnit+1,f
  2463  0329  2B26               	goto	u4487
  2464  032A  0BBC               	decfsz	??_InitUnit+2,f
  2465  032B  2B26               	goto	u4487
  2466  032C  0000               	nop
  2467                           
  2468                           ;RTC_F.c: 76: Lcd_Clear();
  2469  032D  160A  158A  2331  120A  118A  	fcall	_Lcd_Clear
  2470                           
  2471                           ;RTC_F.c: 77: _delay((unsigned long)((300)*(8000000/4000.0)));
  2472  0332  3004               	movlw	4
  2473  0333  1283               	bcf	3,5	;RP0=0, select bank0
  2474  0334  1303               	bcf	3,6	;RP1=0, select bank0
  2475  0335  00BC               	movwf	??_InitUnit+2
  2476  0336  300C               	movlw	12
  2477  0337  00BB               	movwf	??_InitUnit+1
  2478  0338  3035               	movlw	53
  2479  0339  00BA               	movwf	??_InitUnit
  2480  033A                     u4497:	
  2481  033A  0BBA               	decfsz	??_InitUnit,f
  2482  033B  2B3A               	goto	u4497
  2483  033C  0BBB               	decfsz	??_InitUnit+1,f
  2484  033D  2B3A               	goto	u4497
  2485  033E  0BBC               	decfsz	??_InitUnit+2,f
  2486  033F  2B3A               	goto	u4497
  2487  0340  2B41               	nop2
  2488                           
  2489                           ;RTC_F.c: 78: Lcd_Set_Cursor(1,1);
  2490  0341  01F4               	clrf	Lcd_Set_Cursor@b
  2491  0342  0AF4               	incf	Lcd_Set_Cursor@b,f
  2492  0343  3001               	movlw	1
  2493  0344  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  2494                           
  2495                           ;RTC_F.c: 79: Lcd_Write_String(" Initializing.!");
  2496  0349  308B               	movlw	low (STR_26| (0+32768))
  2497  034A  00F5               	movwf	Lcd_Write_String@a
  2498  034B  3088               	movlw	high (STR_26| (0+32768))
  2499  034C  00F6               	movwf	Lcd_Write_String@a+1
  2500  034D  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  2501                           
  2502                           ;RTC_F.c: 80: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2503  0352  3015               	movlw	21
  2504  0353  1283               	bcf	3,5	;RP0=0, select bank0
  2505  0354  1303               	bcf	3,6	;RP1=0, select bank0
  2506  0355  00BC               	movwf	??_InitUnit+2
  2507  0356  304B               	movlw	75
  2508  0357  00BB               	movwf	??_InitUnit+1
  2509  0358  30D1               	movlw	209
  2510  0359  00BA               	movwf	??_InitUnit
  2511  035A                     u4507:	
  2512  035A  0BBA               	decfsz	??_InitUnit,f
  2513  035B  2B5A               	goto	u4507
  2514  035C  0BBB               	decfsz	??_InitUnit+1,f
  2515  035D  2B5A               	goto	u4507
  2516  035E  0BBC               	decfsz	??_InitUnit+2,f
  2517  035F  2B5A               	goto	u4507
  2518  0360  0000               	nop
  2519                           
  2520                           ;RTC_F.c: 81: Lcd_Clear();
  2521  0361  160A  158A  2331  120A  118A  	fcall	_Lcd_Clear
  2522                           
  2523                           ;RTC_F.c: 82: _delay((unsigned long)((300)*(8000000/4000.0)));
  2524  0366  3004               	movlw	4
  2525  0367  1283               	bcf	3,5	;RP0=0, select bank0
  2526  0368  1303               	bcf	3,6	;RP1=0, select bank0
  2527  0369  00BC               	movwf	??_InitUnit+2
  2528  036A  300C               	movlw	12
  2529  036B  00BB               	movwf	??_InitUnit+1
  2530  036C  3035               	movlw	53
  2531  036D  00BA               	movwf	??_InitUnit
  2532  036E                     u4517:	
  2533  036E  0BBA               	decfsz	??_InitUnit,f
  2534  036F  2B6E               	goto	u4517
  2535  0370  0BBB               	decfsz	??_InitUnit+1,f
  2536  0371  2B6E               	goto	u4517
  2537  0372  0BBC               	decfsz	??_InitUnit+2,f
  2538  0373  2B6E               	goto	u4517
  2539  0374  2B75               	nop2
  2540                           
  2541                           ;RTC_F.c: 83: Lcd_Set_Cursor(1,1);
  2542  0375  01F4               	clrf	Lcd_Set_Cursor@b
  2543  0376  0AF4               	incf	Lcd_Set_Cursor@b,f
  2544  0377  3001               	movlw	1
  2545  0378  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  2546                           
  2547                           ;RTC_F.c: 84: Lcd_Write_String(" Initializing.!");
  2548  037D  308B               	movlw	low (STR_26| (0+32768))
  2549  037E  00F5               	movwf	Lcd_Write_String@a
  2550  037F  3088               	movlw	high (STR_26| (0+32768))
  2551  0380  00F6               	movwf	Lcd_Write_String@a+1
  2552  0381  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  2553                           
  2554                           ;RTC_F.c: 85: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2555  0386  3015               	movlw	21
  2556  0387  1283               	bcf	3,5	;RP0=0, select bank0
  2557  0388  1303               	bcf	3,6	;RP1=0, select bank0
  2558  0389  00BC               	movwf	??_InitUnit+2
  2559  038A  304B               	movlw	75
  2560  038B  00BB               	movwf	??_InitUnit+1
  2561  038C  30D1               	movlw	209
  2562  038D  00BA               	movwf	??_InitUnit
  2563  038E                     u4527:	
  2564  038E  0BBA               	decfsz	??_InitUnit,f
  2565  038F  2B8E               	goto	u4527
  2566  0390  0BBB               	decfsz	??_InitUnit+1,f
  2567  0391  2B8E               	goto	u4527
  2568  0392  0BBC               	decfsz	??_InitUnit+2,f
  2569  0393  2B8E               	goto	u4527
  2570  0394  0000               	nop
  2571                           
  2572                           ;RTC_F.c: 86: Lcd_Clear();
  2573  0395  160A  158A  2331  120A  118A  	fcall	_Lcd_Clear
  2574                           
  2575                           ;RTC_F.c: 87: _delay((unsigned long)((300)*(8000000/4000.0)));
  2576  039A  3004               	movlw	4
  2577  039B  1283               	bcf	3,5	;RP0=0, select bank0
  2578  039C  1303               	bcf	3,6	;RP1=0, select bank0
  2579  039D  00BC               	movwf	??_InitUnit+2
  2580  039E  300C               	movlw	12
  2581  039F  00BB               	movwf	??_InitUnit+1
  2582  03A0  3035               	movlw	53
  2583  03A1  00BA               	movwf	??_InitUnit
  2584  03A2                     u4537:	
  2585  03A2  0BBA               	decfsz	??_InitUnit,f
  2586  03A3  2BA2               	goto	u4537
  2587  03A4  0BBB               	decfsz	??_InitUnit+1,f
  2588  03A5  2BA2               	goto	u4537
  2589  03A6  0BBC               	decfsz	??_InitUnit+2,f
  2590  03A7  2BA2               	goto	u4537
  2591  03A8  2BA9               	nop2
  2592                           
  2593                           ;RTC_F.c: 88: Lcd_Set_Cursor(1,1);
  2594  03A9  01F4               	clrf	Lcd_Set_Cursor@b
  2595  03AA  0AF4               	incf	Lcd_Set_Cursor@b,f
  2596  03AB  3001               	movlw	1
  2597  03AC  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  2598                           
  2599                           ;RTC_F.c: 89: Lcd_Write_String("Press");
  2600  03B1  30DF               	movlw	low (STR_29| (0+32768))
  2601  03B2  00F5               	movwf	Lcd_Write_String@a
  2602  03B3  3089               	movlw	high (STR_29| (0+32768))
  2603  03B4  00F6               	movwf	Lcd_Write_String@a+1
  2604  03B5  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  2605                           
  2606                           ;RTC_F.c: 90: Lcd_Set_Cursor(2,1);
  2607  03BA  01F4               	clrf	Lcd_Set_Cursor@b
  2608  03BB  0AF4               	incf	Lcd_Set_Cursor@b,f
  2609  03BC  3002               	movlw	2
  2610  03BD  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  2611                           
  2612                           ;RTC_F.c: 91: Lcd_Write_String("F1 for Settings");
  2613  03C2  30CB               	movlw	low (STR_30| (0+32768))
  2614  03C3  00F5               	movwf	Lcd_Write_String@a
  2615  03C4  3088               	movlw	high (STR_30| (0+32768))
  2616  03C5  00F6               	movwf	Lcd_Write_String@a+1
  2617  03C6  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  2618                           
  2619                           ;RTC_F.c: 92: Key = GetKeySettings();
  2620  03CB  160A  158A  24BF  120A  118A  	fcall	_GetKeySettings
  2621  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  2622  03D1  1303               	bcf	3,6	;RP1=0, select bank0
  2623  03D2  00BA               	movwf	??_InitUnit
  2624  03D3  083A               	movf	??_InitUnit,w
  2625  03D4  00BD               	movwf	InitUnit@Key
  2626                           
  2627                           ;RTC_F.c: 93: if(Key=='/')
  2628  03D5  302F               	movlw	47
  2629  03D6  063D               	xorwf	InitUnit@Key,w
  2630  03D7  1D03               	btfss	3,2
  2631  03D8  2BDE               	goto	l4192
  2632                           
  2633                           ;RTC_F.c: 94: Settings();
  2634  03D9  120A  118A  2416  120A  118A  	fcall	_Settings
  2635  03DE                     l4192:	
  2636                           
  2637                           ;RTC_F.c: 95: Lcd_Clear();
  2638  03DE  160A  158A  2331  120A  118A  	fcall	_Lcd_Clear
  2639                           
  2640                           ;RTC_F.c: 96: _delay((unsigned long)((300)*(8000000/4000.0)));
  2641  03E3  3004               	movlw	4
  2642  03E4  1283               	bcf	3,5	;RP0=0, select bank0
  2643  03E5  1303               	bcf	3,6	;RP1=0, select bank0
  2644  03E6  00BC               	movwf	??_InitUnit+2
  2645  03E7  300C               	movlw	12
  2646  03E8  00BB               	movwf	??_InitUnit+1
  2647  03E9  3035               	movlw	53
  2648  03EA  00BA               	movwf	??_InitUnit
  2649  03EB                     u4547:	
  2650  03EB  0BBA               	decfsz	??_InitUnit,f
  2651  03EC  2BEB               	goto	u4547
  2652  03ED  0BBB               	decfsz	??_InitUnit+1,f
  2653  03EE  2BEB               	goto	u4547
  2654  03EF  0BBC               	decfsz	??_InitUnit+2,f
  2655  03F0  2BEB               	goto	u4547
  2656  03F1  2BF2               	nop2
  2657                           
  2658                           ;RTC_F.c: 97: Lcd_Set_Cursor(1,1);
  2659  03F2  01F4               	clrf	Lcd_Set_Cursor@b
  2660  03F3  0AF4               	incf	Lcd_Set_Cursor@b,f
  2661  03F4  3001               	movlw	1
  2662  03F5  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  2663                           
  2664                           ;RTC_F.c: 98: Lcd_Write_String("    Switch ON");
  2665  03FA  3033               	movlw	low (STR_31| (0+32768))
  2666  03FB  00F5               	movwf	Lcd_Write_String@a
  2667  03FC  3089               	movlw	high (STR_31| (0+32768))
  2668  03FD  00F6               	movwf	Lcd_Write_String@a+1
  2669  03FE  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  2670                           
  2671                           ;RTC_F.c: 100: RD0=1;
  2672  0403  1283               	bcf	3,5	;RP0=0, select bank0
  2673  0404  1303               	bcf	3,6	;RP1=0, select bank0
  2674  0405  1408               	bsf	8,0	;volatile
  2675                           
  2676                           ;RTC_F.c: 101: RE0=1;
  2677  0406  1409               	bsf	9,0	;volatile
  2678                           
  2679                           ;RTC_F.c: 102: RE1=0;
  2680  0407  1089               	bcf	9,1	;volatile
  2681                           
  2682                           ;RTC_F.c: 103: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2683  0408  3015               	movlw	21
  2684  0409  00BC               	movwf	??_InitUnit+2
  2685  040A  304B               	movlw	75
  2686  040B  00BB               	movwf	??_InitUnit+1
  2687  040C  30D1               	movlw	209
  2688  040D  00BA               	movwf	??_InitUnit
  2689  040E                     u4557:	
  2690  040E  0BBA               	decfsz	??_InitUnit,f
  2691  040F  2C0E               	goto	u4557
  2692  0410  0BBB               	decfsz	??_InitUnit+1,f
  2693  0411  2C0E               	goto	u4557
  2694  0412  0BBC               	decfsz	??_InitUnit+2,f
  2695  0413  2C0E               	goto	u4557
  2696  0414  0000               	nop
  2697  0415  0008               	return
  2698  0416                     __end_of_InitUnit:	
  2699                           
  2700                           	psect	text3
  2701  0416                     __ptext3:	
  2702 ;; *************** function _Settings *****************
  2703 ;; Defined at:
  2704 ;;		line 107 in file "RTC_F.c"
  2705 ;; Parameters:    Size  Location     Type
  2706 ;;		None
  2707 ;; Auto vars:     Size  Location     Type
  2708 ;;  x               2   22[BANK0 ] int 
  2709 ;;  nkey            1   25[BANK0 ] unsigned char 
  2710 ;;  Key             1   24[BANK0 ] unsigned char 
  2711 ;; Return value:  Size  Location     Type
  2712 ;;		None               void
  2713 ;; Registers used:
  2714 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2715 ;; Tracked objects:
  2716 ;;		On entry : 0/0
  2717 ;;		On exit  : 0/0
  2718 ;;		Unchanged: 0/0
  2719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2720 ;;      Params:         0       0       0       0       0
  2721 ;;      Locals:         0       4       0       0       0
  2722 ;;      Temps:          0       4       0       0       0
  2723 ;;      Totals:         0       8       0       0       0
  2724 ;;Total ram usage:        8 bytes
  2725 ;; Hardware stack levels used:    1
  2726 ;; Hardware stack levels required when called:    4
  2727 ;; This function calls:
  2728 ;;		_DisplayDateOnLCD
  2729 ;;		_DisplayTimeToLCD
  2730 ;;		_EEPROMSET
  2731 ;;		_GetKey
  2732 ;;		_GetKeyDate
  2733 ;;		_GetKeyNumber
  2734 ;;		_GetKeyTime
  2735 ;;		_Get_DS1307_RTC_Date
  2736 ;;		_Get_DS1307_RTC_Time
  2737 ;;		_Lcd_Clear
  2738 ;;		_Lcd_Set_Cursor
  2739 ;;		_Lcd_Write_Char
  2740 ;;		_Lcd_Write_String
  2741 ;;		_Set_DS1307_RTC_Date
  2742 ;;		_Set_DS1307_RTC_Time
  2743 ;;		_atoi
  2744 ;;		_sprintf
  2745 ;; This function is called by:
  2746 ;;		_InitUnit
  2747 ;; This function uses a non-reentrant model
  2748 ;;
  2749                           
  2750                           
  2751                           ;psect for function _Settings
  2752  0416                     _Settings:	
  2753  0416                     l467:	
  2754                           ;incstack = 0
  2755                           ; Regs used in _Settings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2756                           ;RTC_F.c: 109: while(1)
  2757                           
  2758                           
  2759                           ;RTC_F.c: 110: {
  2760                           ;RTC_F.c: 111: char Key = 'n';
  2761  0416  306E               	movlw	110
  2762  0417  1283               	bcf	3,5	;RP0=0, select bank0
  2763  0418  1303               	bcf	3,6	;RP1=0, select bank0
  2764  0419  00B2               	movwf	??_Settings
  2765  041A  0832               	movf	??_Settings,w
  2766  041B  00B8               	movwf	Settings@Key
  2767                           
  2768                           ;RTC_F.c: 112: char nkey='n';
  2769  041C  306E               	movlw	110
  2770  041D  00B2               	movwf	??_Settings
  2771  041E  0832               	movf	??_Settings,w
  2772  041F  00B9               	movwf	Settings@nkey
  2773                           
  2774                           ;RTC_F.c: 113: Lcd_Clear();
  2775  0420  160A  158A  2331  120A  118A  	fcall	_Lcd_Clear
  2776                           
  2777                           ;RTC_F.c: 114: Lcd_Set_Cursor(1,1);
  2778  0425  01F4               	clrf	Lcd_Set_Cursor@b
  2779  0426  0AF4               	incf	Lcd_Set_Cursor@b,f
  2780  0427  3001               	movlw	1
  2781  0428  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  2782                           
  2783                           ;RTC_F.c: 115: Lcd_Write_String("1:Numb 2:Time ");
  2784  042D  30DB               	movlw	low (STR_32| (0+32768))
  2785  042E  00F5               	movwf	Lcd_Write_String@a
  2786  042F  3088               	movlw	high (STR_32| (0+32768))
  2787  0430  00F6               	movwf	Lcd_Write_String@a+1
  2788  0431  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  2789                           
  2790                           ;RTC_F.c: 116: Lcd_Set_Cursor(2,1);
  2791  0436  01F4               	clrf	Lcd_Set_Cursor@b
  2792  0437  0AF4               	incf	Lcd_Set_Cursor@b,f
  2793  0438  3002               	movlw	2
  2794  0439  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  2795                           
  2796                           ;RTC_F.c: 117: Lcd_Write_String("3:Date 4:ShowInf");
  2797  043E  307A               	movlw	low (STR_33| (0+32768))
  2798  043F  00F5               	movwf	Lcd_Write_String@a
  2799  0440  3088               	movlw	high (STR_33| (0+32768))
  2800  0441  00F6               	movwf	Lcd_Write_String@a+1
  2801  0442  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  2802                           
  2803                           ;RTC_F.c: 118: Key = GetKey();
  2804  0447  160A  158A  2355  120A  118A  	fcall	_GetKey
  2805  044C  1283               	bcf	3,5	;RP0=0, select bank0
  2806  044D  1303               	bcf	3,6	;RP1=0, select bank0
  2807  044E  00B2               	movwf	??_Settings
  2808  044F  0832               	movf	??_Settings,w
  2809  0450  00B8               	movwf	Settings@Key
  2810                           
  2811                           ;RTC_F.c: 119: switch(Key)
  2812  0451  2F9E               	goto	l3992
  2813  0452                     l3860:	
  2814                           ;RTC_F.c: 120: {
  2815                           ;RTC_F.c: 121: case '1': Lcd_Clear();
  2816                           
  2817  0452  160A  158A  2331  120A  118A  	fcall	_Lcd_Clear
  2818                           
  2819                           ;RTC_F.c: 122: Lcd_Set_Cursor(1,1);
  2820  0457  01F4               	clrf	Lcd_Set_Cursor@b
  2821  0458  0AF4               	incf	Lcd_Set_Cursor@b,f
  2822  0459  3001               	movlw	1
  2823  045A  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  2824                           
  2825                           ;RTC_F.c: 123: Lcd_Write_String("Enter number");
  2826  045F  3077               	movlw	low (STR_34| (0+32768))
  2827  0460  00F5               	movwf	Lcd_Write_String@a
  2828  0461  3089               	movlw	high (STR_34| (0+32768))
  2829  0462  00F6               	movwf	Lcd_Write_String@a+1
  2830  0463  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  2831                           
  2832                           ;RTC_F.c: 124: _delay((unsigned long)((1000)*(8000000/4000.0)));
  2833  0468  300B               	movlw	11
  2834  0469  1283               	bcf	3,5	;RP0=0, select bank0
  2835  046A  1303               	bcf	3,6	;RP1=0, select bank0
  2836  046B  00B4               	movwf	??_Settings+2
  2837  046C  3026               	movlw	38
  2838  046D  00B3               	movwf	??_Settings+1
  2839  046E  3066               	movlw	102
  2840  046F  00B2               	movwf	??_Settings
  2841  0470                     u4567:	
  2842  0470  0BB2               	decfsz	??_Settings,f
  2843  0471  2C70               	goto	u4567
  2844  0472  0BB3               	decfsz	??_Settings+1,f
  2845  0473  2C70               	goto	u4567
  2846  0474  0BB4               	decfsz	??_Settings+2,f
  2847  0475  2C70               	goto	u4567
  2848  0476  2C77               	nop2
  2849                           
  2850                           ;RTC_F.c: 125: Lcd_Clear();
  2851  0477  160A  158A  2331  120A  118A  	fcall	_Lcd_Clear
  2852  047C                     l3868:	
  2853                           ;RTC_F.c: 126: while(1)
  2854                           
  2855                           
  2856                           ;RTC_F.c: 127: {
  2857                           ;RTC_F.c: 129: nkey=GetKeyNumber();
  2858  047C  160A  158A  2409  120A  118A  	fcall	_GetKeyNumber
  2859  0481  1283               	bcf	3,5	;RP0=0, select bank0
  2860  0482  1303               	bcf	3,6	;RP1=0, select bank0
  2861  0483  00B2               	movwf	??_Settings
  2862  0484  0832               	movf	??_Settings,w
  2863  0485  00B9               	movwf	Settings@nkey
  2864                           
  2865                           ;RTC_F.c: 130: Lcd_Clear();
  2866  0486  160A  158A  2331  120A  118A  	fcall	_Lcd_Clear
  2867                           
  2868                           ;RTC_F.c: 131: Lcd_Set_Cursor(1,8);
  2869  048B  3008               	movlw	8
  2870  048C  1283               	bcf	3,5	;RP0=0, select bank0
  2871  048D  1303               	bcf	3,6	;RP1=0, select bank0
  2872  048E  00B2               	movwf	??_Settings
  2873  048F  0832               	movf	??_Settings,w
  2874  0490  00F4               	movwf	Lcd_Set_Cursor@b
  2875  0491  3001               	movlw	1
  2876  0492  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  2877                           
  2878                           ;RTC_F.c: 132: Lcd_Write_Char(nkey);
  2879  0497  1283               	bcf	3,5	;RP0=0, select bank0
  2880  0498  1303               	bcf	3,6	;RP1=0, select bank0
  2881  0499  0839               	movf	Settings@nkey,w
  2882  049A  160A  158A  262F  120A  118A  	fcall	_Lcd_Write_Char
  2883                           
  2884                           ;RTC_F.c: 133: Lcd_Set_Cursor(2,1);
  2885  049F  01F4               	clrf	Lcd_Set_Cursor@b
  2886  04A0  0AF4               	incf	Lcd_Set_Cursor@b,f
  2887  04A1  3002               	movlw	2
  2888  04A2  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  2889                           
  2890                           ;RTC_F.c: 134: Lcd_Write_String(number);
  2891  04A7  30AD               	movlw	(low (_number| 0))& (0+255)
  2892  04A8  00F5               	movwf	Lcd_Write_String@a
  2893  04A9  3000               	movlw	0
  2894  04AA  00F6               	movwf	Lcd_Write_String@a+1
  2895  04AB  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  2896                           
  2897                           ;RTC_F.c: 136: if(x==12)
  2898  04B0  300C               	movlw	12
  2899  04B1  1283               	bcf	3,5	;RP0=0, select bank0
  2900  04B2  1303               	bcf	3,6	;RP1=0, select bank0
  2901  04B3  0668               	xorwf	_x,w
  2902  04B4  0469               	iorwf	_x+1,w
  2903  04B5  1D03               	btfss	3,2
  2904  04B6  2C7C               	goto	l3868
  2905                           
  2906                           ;RTC_F.c: 137: {
  2907                           ;RTC_F.c: 138: Lcd_Clear();
  2908  04B7  160A  158A  2331  120A  118A  	fcall	_Lcd_Clear
  2909                           
  2910                           ;RTC_F.c: 139: Lcd_Set_Cursor(1,1);
  2911  04BC  01F4               	clrf	Lcd_Set_Cursor@b
  2912  04BD  0AF4               	incf	Lcd_Set_Cursor@b,f
  2913  04BE  3001               	movlw	1
  2914  04BF  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  2915                           
  2916                           ;RTC_F.c: 140: Lcd_Write_String(" Entered Number");
  2917  04C4  30BB               	movlw	low (STR_35| (0+32768))
  2918  04C5  00F5               	movwf	Lcd_Write_String@a
  2919  04C6  3088               	movlw	high (STR_35| (0+32768))
  2920  04C7  00F6               	movwf	Lcd_Write_String@a+1
  2921  04C8  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  2922                           
  2923                           ;RTC_F.c: 141: Lcd_Set_Cursor(2,2);
  2924  04CD  3002               	movlw	2
  2925  04CE  1283               	bcf	3,5	;RP0=0, select bank0
  2926  04CF  1303               	bcf	3,6	;RP1=0, select bank0
  2927  04D0  00B2               	movwf	??_Settings
  2928  04D1  0832               	movf	??_Settings,w
  2929  04D2  00F4               	movwf	Lcd_Set_Cursor@b
  2930  04D3  3002               	movlw	2
  2931  04D4  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  2932                           
  2933                           ;RTC_F.c: 142: Lcd_Write_String(number);
  2934  04D9  30AD               	movlw	(low (_number| 0))& (0+255)
  2935  04DA  00F5               	movwf	Lcd_Write_String@a
  2936  04DB  3000               	movlw	0
  2937  04DC  00F6               	movwf	Lcd_Write_String@a+1
  2938  04DD  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  2939                           
  2940                           ;RTC_F.c: 143: EEPROMSET();
  2941  04E2  160A  158A  2589  120A  118A  	fcall	_EEPROMSET
  2942                           
  2943                           ;RTC_F.c: 144: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2944  04E7  3015               	movlw	21
  2945  04E8  1283               	bcf	3,5	;RP0=0, select bank0
  2946  04E9  1303               	bcf	3,6	;RP1=0, select bank0
  2947  04EA  00B4               	movwf	??_Settings+2
  2948  04EB  304B               	movlw	75
  2949  04EC  00B3               	movwf	??_Settings+1
  2950  04ED  30D1               	movlw	209
  2951  04EE  00B2               	movwf	??_Settings
  2952  04EF                     u4577:	
  2953  04EF  0BB2               	decfsz	??_Settings,f
  2954  04F0  2CEF               	goto	u4577
  2955  04F1  0BB3               	decfsz	??_Settings+1,f
  2956  04F2  2CEF               	goto	u4577
  2957  04F3  0BB4               	decfsz	??_Settings+2,f
  2958  04F4  2CEF               	goto	u4577
  2959  04F5  0000               	nop
  2960                           
  2961                           ;RTC_F.c: 145: break;
  2962  04F6  2FAE               	goto	l3994
  2963  04F7                     l3890:	
  2964                           ;RTC_F.c: 150: case '2': Lcd_Clear();
  2965                           
  2966                           ;RTC_F.c: 146: }
  2967                           ;RTC_F.c: 147: }
  2968                           ;RTC_F.c: 148: break;
  2969                           
  2970  04F7  160A  158A  2331  120A  118A  	fcall	_Lcd_Clear
  2971                           
  2972                           ;RTC_F.c: 151: Lcd_Set_Cursor(1,1);
  2973  04FC  01F4               	clrf	Lcd_Set_Cursor@b
  2974  04FD  0AF4               	incf	Lcd_Set_Cursor@b,f
  2975  04FE  3001               	movlw	1
  2976  04FF  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  2977                           
  2978                           ;RTC_F.c: 152: Lcd_Write_String("HH:MM:SS:AM/PM");
  2979  0504  3008               	movlw	low (STR_36| (0+32768))
  2980  0505  00F5               	movwf	Lcd_Write_String@a
  2981  0506  3089               	movlw	high (STR_36| (0+32768))
  2982  0507  00F6               	movwf	Lcd_Write_String@a+1
  2983  0508  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  2984                           
  2985                           ;RTC_F.c: 153: Lcd_Set_Cursor(2,1);
  2986  050D  01F4               	clrf	Lcd_Set_Cursor@b
  2987  050E  0AF4               	incf	Lcd_Set_Cursor@b,f
  2988  050F  3002               	movlw	2
  2989  0510  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  2990                           
  2991                           ;RTC_F.c: 154: Lcd_Write_String("AM - 1    PM-2");
  2992  0515  30EA               	movlw	low (STR_37| (0+32768))
  2993  0516  00F5               	movwf	Lcd_Write_String@a
  2994  0517  3088               	movlw	high (STR_37| (0+32768))
  2995  0518  00F6               	movwf	Lcd_Write_String@a+1
  2996  0519  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  2997  051E                     l476:	
  2998                           ;RTC_F.c: 155: while(1)
  2999                           
  3000                           
  3001                           ;RTC_F.c: 156: {
  3002                           ;RTC_F.c: 157: nkey=GetKeyTime();
  3003  051E  160A  118A  22F1  120A  118A  	fcall	_GetKeyTime
  3004  0523  1283               	bcf	3,5	;RP0=0, select bank0
  3005  0524  1303               	bcf	3,6	;RP1=0, select bank0
  3006  0525  00B2               	movwf	??_Settings
  3007  0526  0832               	movf	??_Settings,w
  3008  0527  00B9               	movwf	Settings@nkey
  3009                           
  3010                           ;RTC_F.c: 158: Lcd_Clear();
  3011  0528  160A  158A  2331  120A  118A  	fcall	_Lcd_Clear
  3012                           
  3013                           ;RTC_F.c: 159: Lcd_Set_Cursor(1,8);
  3014  052D  3008               	movlw	8
  3015  052E  1283               	bcf	3,5	;RP0=0, select bank0
  3016  052F  1303               	bcf	3,6	;RP1=0, select bank0
  3017  0530  00B2               	movwf	??_Settings
  3018  0531  0832               	movf	??_Settings,w
  3019  0532  00F4               	movwf	Lcd_Set_Cursor@b
  3020  0533  3001               	movlw	1
  3021  0534  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  3022                           
  3023                           ;RTC_F.c: 160: Lcd_Write_Char(nkey);
  3024  0539  1283               	bcf	3,5	;RP0=0, select bank0
  3025  053A  1303               	bcf	3,6	;RP1=0, select bank0
  3026  053B  0839               	movf	Settings@nkey,w
  3027  053C  160A  158A  262F  120A  118A  	fcall	_Lcd_Write_Char
  3028                           
  3029                           ;RTC_F.c: 161: Lcd_Set_Cursor(2,1);
  3030  0541  01F4               	clrf	Lcd_Set_Cursor@b
  3031  0542  0AF4               	incf	Lcd_Set_Cursor@b,f
  3032  0543  3002               	movlw	2
  3033  0544  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  3034                           
  3035                           ;RTC_F.c: 162: sprintf(txt,"%s:%s:%s:%s",hh,mm,ss,ap);
  3036  0549  30A8               	movlw	low (STR_38| (0+32768))
  3037  054A  1283               	bcf	3,5	;RP0=0, select bank0
  3038  054B  1303               	bcf	3,6	;RP1=0, select bank0
  3039  054C  00A0               	movwf	sprintf@f
  3040  054D  3089               	movlw	high (STR_38| (0+32768))
  3041  054E  00A1               	movwf	sprintf@f+1
  3042  054F  30DF               	movlw	(low (_hh| 0))& (0+255)
  3043  0550  00B2               	movwf	??_Settings
  3044  0551  0832               	movf	??_Settings,w
  3045  0552  00A2               	movwf	low ((?_sprintf| 0+2))
  3046  0553  30E4               	movlw	(low (_mm| 0))& (0+255)
  3047  0554  00B3               	movwf	??_Settings+1
  3048  0555  0833               	movf	??_Settings+1,w
  3049  0556  00A3               	movwf	low ((?_sprintf| 0+3))
  3050  0557  30E9               	movlw	(low (_ss| 0))& (0+255)
  3051  0558  00B4               	movwf	??_Settings+2
  3052  0559  0834               	movf	??_Settings+2,w
  3053  055A  00A4               	movwf	low ((?_sprintf| 0+4))
  3054  055B  30D5               	movlw	(low (_ap| 0))& (0+255)
  3055  055C  00B5               	movwf	??_Settings+3
  3056  055D  0835               	movf	??_Settings+3,w
  3057  055E  00A5               	movwf	low ((?_sprintf| 0+5))
  3058  055F  3090               	movlw	(low (_txt| (0+256)))& (0+255)
  3059  0560  120A  158A  22DC  120A  118A  	fcall	_sprintf
  3060                           
  3061                           ;RTC_F.c: 163: Lcd_Write_String(txt);
  3062  0565  3090               	movlw	(low (_txt| (0+256)))& (0+255)
  3063  0566  00F5               	movwf	Lcd_Write_String@a
  3064  0567  3001               	movlw	1
  3065  0568  00F6               	movwf	Lcd_Write_String@a+1
  3066  0569  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  3067                           
  3068                           ;RTC_F.c: 165: if(c==3)
  3069  056E  3003               	movlw	3
  3070  056F  1283               	bcf	3,5	;RP0=0, select bank0
  3071  0570  1303               	bcf	3,6	;RP1=0, select bank0
  3072  0571  0650               	xorwf	_c,w
  3073  0572  0451               	iorwf	_c+1,w
  3074  0573  1D03               	btfss	3,2
  3075  0574  2D1E               	goto	l476
  3076                           
  3077                           ;RTC_F.c: 166: {
  3078                           ;RTC_F.c: 167: Lcd_Clear();
  3079  0575  160A  158A  2331  120A  118A  	fcall	_Lcd_Clear
  3080                           
  3081                           ;RTC_F.c: 168: Lcd_Set_Cursor(1,1);
  3082  057A  01F4               	clrf	Lcd_Set_Cursor@b
  3083  057B  0AF4               	incf	Lcd_Set_Cursor@b,f
  3084  057C  3001               	movlw	1
  3085  057D  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  3086                           
  3087                           ;RTC_F.c: 169: Lcd_Write_String(" Entered Time");
  3088  0582  3041               	movlw	low (STR_39| (0+32768))
  3089  0583  00F5               	movwf	Lcd_Write_String@a
  3090  0584  3089               	movlw	high (STR_39| (0+32768))
  3091  0585  00F6               	movwf	Lcd_Write_String@a+1
  3092  0586  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  3093                           
  3094                           ;RTC_F.c: 170: Lcd_Set_Cursor(2,2);
  3095  058B  3002               	movlw	2
  3096  058C  1283               	bcf	3,5	;RP0=0, select bank0
  3097  058D  1303               	bcf	3,6	;RP1=0, select bank0
  3098  058E  00B2               	movwf	??_Settings
  3099  058F  0832               	movf	??_Settings,w
  3100  0590  00F4               	movwf	Lcd_Set_Cursor@b
  3101  0591  3002               	movlw	2
  3102  0592  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  3103                           
  3104                           ;RTC_F.c: 171: Lcd_Write_String(txt);
  3105  0597  3090               	movlw	(low (_txt| (0+256)))& (0+255)
  3106  0598  00F5               	movwf	Lcd_Write_String@a
  3107  0599  3001               	movlw	1
  3108  059A  00F6               	movwf	Lcd_Write_String@a+1
  3109  059B  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  3110                           
  3111                           ;RTC_F.c: 173: _delay((unsigned long)((2000)*(8000000/4000.0)));
  3112  05A0  3015               	movlw	21
  3113  05A1  1283               	bcf	3,5	;RP0=0, select bank0
  3114  05A2  1303               	bcf	3,6	;RP1=0, select bank0
  3115  05A3  00B4               	movwf	??_Settings+2
  3116  05A4  304B               	movlw	75
  3117  05A5  00B3               	movwf	??_Settings+1
  3118  05A6  30D1               	movlw	209
  3119  05A7  00B2               	movwf	??_Settings
  3120  05A8                     u4587:	
  3121  05A8  0BB2               	decfsz	??_Settings,f
  3122  05A9  2DA8               	goto	u4587
  3123  05AA  0BB3               	decfsz	??_Settings+1,f
  3124  05AB  2DA8               	goto	u4587
  3125  05AC  0BB4               	decfsz	??_Settings+2,f
  3126  05AD  2DA8               	goto	u4587
  3127  05AE  0000               	nop
  3128                           
  3129                           ;RTC_F.c: 174: ihh = atoi(hh);
  3130  05AF  30DF               	movlw	(low (_hh| 0))& (0+255)
  3131  05B0  00F6               	movwf	atoi@s
  3132  05B1  3000               	movlw	0
  3133  05B2  00F7               	movwf	atoi@s+1
  3134  05B3  160A  118A  240E  120A  118A  	fcall	_atoi
  3135  05B8  0877               	movf	?_atoi+1,w
  3136  05B9  1283               	bcf	3,5	;RP0=0, select bank0
  3137  05BA  1303               	bcf	3,6	;RP1=0, select bank0
  3138  05BB  00DF               	movwf	_ihh+1
  3139  05BC  0876               	movf	?_atoi,w
  3140  05BD  00DE               	movwf	_ihh
  3141                           
  3142                           ;RTC_F.c: 175: imm = atoi(mm);
  3143  05BE  30E4               	movlw	(low (_mm| 0))& (0+255)
  3144  05BF  00F6               	movwf	atoi@s
  3145  05C0  3000               	movlw	0
  3146  05C1  00F7               	movwf	atoi@s+1
  3147  05C2  160A  118A  240E  120A  118A  	fcall	_atoi
  3148  05C7  0877               	movf	?_atoi+1,w
  3149  05C8  1283               	bcf	3,5	;RP0=0, select bank0
  3150  05C9  1303               	bcf	3,6	;RP1=0, select bank0
  3151  05CA  00E1               	movwf	_imm+1
  3152  05CB  0876               	movf	?_atoi,w
  3153  05CC  00E0               	movwf	_imm
  3154                           
  3155                           ;RTC_F.c: 176: iss = atoi(ss);
  3156  05CD  30E9               	movlw	(low (_ss| 0))& (0+255)
  3157  05CE  00F6               	movwf	atoi@s
  3158  05CF  3000               	movlw	0
  3159  05D0  00F7               	movwf	atoi@s+1
  3160  05D1  160A  118A  240E  120A  118A  	fcall	_atoi
  3161  05D6  0877               	movf	?_atoi+1,w
  3162  05D7  1283               	bcf	3,5	;RP0=0, select bank0
  3163  05D8  1303               	bcf	3,6	;RP1=0, select bank0
  3164  05D9  00E3               	movwf	_iss+1
  3165  05DA  0876               	movf	?_atoi,w
  3166  05DB  00E2               	movwf	_iss
  3167                           
  3168                           ;RTC_F.c: 177: iss = atoi(nkey);
  3169  05DC  0839               	movf	Settings@nkey,w
  3170  05DD  00B2               	movwf	??_Settings
  3171  05DE  01B3               	clrf	??_Settings+1
  3172  05DF  0832               	movf	??_Settings,w
  3173  05E0  00F6               	movwf	atoi@s
  3174  05E1  0833               	movf	??_Settings+1,w
  3175  05E2  00F7               	movwf	atoi@s+1
  3176  05E3  160A  118A  240E  120A  118A  	fcall	_atoi
  3177  05E8  0877               	movf	?_atoi+1,w
  3178  05E9  1283               	bcf	3,5	;RP0=0, select bank0
  3179  05EA  1303               	bcf	3,6	;RP1=0, select bank0
  3180  05EB  00E3               	movwf	_iss+1
  3181  05EC  0876               	movf	?_atoi,w
  3182  05ED  00E2               	movwf	_iss
  3183                           
  3184                           ;RTC_F.c: 178: Set_DS1307_RTC_Time(iap, ihh, imm, iss);
  3185  05EE  085E               	movf	_ihh,w
  3186  05EF  00B2               	movwf	??_Settings
  3187  05F0  0832               	movf	??_Settings,w
  3188  05F1  00F9               	movwf	Set_DS1307_RTC_Time@Hours
  3189  05F2  0860               	movf	_imm,w
  3190  05F3  00B3               	movwf	??_Settings+1
  3191  05F4  0833               	movf	??_Settings+1,w
  3192  05F5  00FA               	movwf	Set_DS1307_RTC_Time@Mins
  3193  05F6  0862               	movf	_iss,w
  3194  05F7  00B4               	movwf	??_Settings+2
  3195  05F8  0834               	movf	??_Settings+2,w
  3196  05F9  00FB               	movwf	Set_DS1307_RTC_Time@Secs
  3197  05FA  085C               	movf	_iap,w
  3198  05FB  160A  118A  253B  120A  118A  	fcall	_Set_DS1307_RTC_Time
  3199                           
  3200                           ;RTC_F.c: 180: Lcd_Clear();
  3201  0600  160A  158A  2331  120A  118A  	fcall	_Lcd_Clear
  3202                           
  3203                           ;RTC_F.c: 181: break;
  3204  0605  2FAE               	goto	l3994
  3205  0606                     l3926:	
  3206                           ;RTC_F.c: 186: case '3': Lcd_Clear();
  3207                           
  3208                           ;RTC_F.c: 182: }
  3209                           ;RTC_F.c: 183: }
  3210                           ;RTC_F.c: 184: break;
  3211                           
  3212  0606  160A  158A  2331  120A  118A  	fcall	_Lcd_Clear
  3213                           
  3214                           ;RTC_F.c: 187: Lcd_Set_Cursor(1,1);
  3215  060B  01F4               	clrf	Lcd_Set_Cursor@b
  3216  060C  0AF4               	incf	Lcd_Set_Cursor@b,f
  3217  060D  3001               	movlw	1
  3218  060E  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  3219                           
  3220                           ;RTC_F.c: 188: Lcd_Write_String("DD:MM:YY:DAY");
  3221  0613  305D               	movlw	low (STR_40| (0+32768))
  3222  0614  00F5               	movwf	Lcd_Write_String@a
  3223  0615  3089               	movlw	high (STR_40| (0+32768))
  3224  0616  00F6               	movwf	Lcd_Write_String@a+1
  3225  0617  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  3226  061C                     l3930:	
  3227                           ;RTC_F.c: 189: while(1)
  3228                           
  3229                           
  3230                           ;RTC_F.c: 190: {
  3231                           ;RTC_F.c: 191: nkey=GetKeyDate();
  3232  061C  120A  118A  2012  120A  118A  	fcall	_GetKeyDate
  3233  0621  1283               	bcf	3,5	;RP0=0, select bank0
  3234  0622  1303               	bcf	3,6	;RP1=0, select bank0
  3235  0623  00B2               	movwf	??_Settings
  3236  0624  0832               	movf	??_Settings,w
  3237  0625  00B9               	movwf	Settings@nkey
  3238                           
  3239                           ;RTC_F.c: 192: Lcd_Clear();
  3240  0626  160A  158A  2331  120A  118A  	fcall	_Lcd_Clear
  3241                           
  3242                           ;RTC_F.c: 193: Lcd_Set_Cursor(1,8);
  3243  062B  3008               	movlw	8
  3244  062C  1283               	bcf	3,5	;RP0=0, select bank0
  3245  062D  1303               	bcf	3,6	;RP1=0, select bank0
  3246  062E  00B2               	movwf	??_Settings
  3247  062F  0832               	movf	??_Settings,w
  3248  0630  00F4               	movwf	Lcd_Set_Cursor@b
  3249  0631  3001               	movlw	1
  3250  0632  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  3251                           
  3252                           ;RTC_F.c: 194: Lcd_Write_Char(nkey);
  3253  0637  1283               	bcf	3,5	;RP0=0, select bank0
  3254  0638  1303               	bcf	3,6	;RP1=0, select bank0
  3255  0639  0839               	movf	Settings@nkey,w
  3256  063A  160A  158A  262F  120A  118A  	fcall	_Lcd_Write_Char
  3257                           
  3258                           ;RTC_F.c: 195: Lcd_Set_Cursor(2,1);
  3259  063F  01F4               	clrf	Lcd_Set_Cursor@b
  3260  0640  0AF4               	incf	Lcd_Set_Cursor@b,f
  3261  0641  3002               	movlw	2
  3262  0642  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  3263                           
  3264                           ;RTC_F.c: 196: sprintf(txt,"%s:%s:%s %s",DD,MM,YY,DAY);
  3265  0647  309C               	movlw	low (STR_41| (0+32768))
  3266  0648  1283               	bcf	3,5	;RP0=0, select bank0
  3267  0649  1303               	bcf	3,6	;RP1=0, select bank0
  3268  064A  00A0               	movwf	sprintf@f
  3269  064B  3089               	movlw	high (STR_41| (0+32768))
  3270  064C  00A1               	movwf	sprintf@f+1
  3271  064D  30C6               	movlw	(low (_DD| 0))& (0+255)
  3272  064E  00B2               	movwf	??_Settings
  3273  064F  0832               	movf	??_Settings,w
  3274  0650  00A2               	movwf	low ((?_sprintf| 0+2))
  3275  0651  30CB               	movlw	(low (_MM| 0))& (0+255)
  3276  0652  00B3               	movwf	??_Settings+1
  3277  0653  0833               	movf	??_Settings+1,w
  3278  0654  00A3               	movwf	low ((?_sprintf| 0+3))
  3279  0655  30D0               	movlw	(low (_YY| 0))& (0+255)
  3280  0656  00B4               	movwf	??_Settings+2
  3281  0657  0834               	movf	??_Settings+2,w
  3282  0658  00A4               	movwf	low ((?_sprintf| 0+4))
  3283  0659  30BC               	movlw	(low (_DAY| 0))& (0+255)
  3284  065A  00B5               	movwf	??_Settings+3
  3285  065B  0835               	movf	??_Settings+3,w
  3286  065C  00A5               	movwf	low ((?_sprintf| 0+5))
  3287  065D  3090               	movlw	(low (_txt| (0+256)))& (0+255)
  3288  065E  120A  158A  22DC  120A  118A  	fcall	_sprintf
  3289                           
  3290                           ;RTC_F.c: 197: Lcd_Write_String(txt);
  3291  0663  3090               	movlw	(low (_txt| (0+256)))& (0+255)
  3292  0664  00F5               	movwf	Lcd_Write_String@a
  3293  0665  3001               	movlw	1
  3294  0666  00F6               	movwf	Lcd_Write_String@a+1
  3295  0667  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  3296                           
  3297                           ;RTC_F.c: 199: if(h==1)
  3298  066C  1283               	bcf	3,5	;RP0=0, select bank0
  3299  066D  1303               	bcf	3,6	;RP1=0, select bank0
  3300  066E  0358               	decf	_h,w
  3301  066F  0459               	iorwf	_h+1,w
  3302  0670  1D03               	btfss	3,2
  3303  0671  2E1C               	goto	l3930
  3304                           
  3305                           ;RTC_F.c: 200: {
  3306                           ;RTC_F.c: 201: Lcd_Clear();
  3307  0672  160A  158A  2331  120A  118A  	fcall	_Lcd_Clear
  3308                           
  3309                           ;RTC_F.c: 202: Lcd_Set_Cursor(1,1);
  3310  0677  01F4               	clrf	Lcd_Set_Cursor@b
  3311  0678  0AF4               	incf	Lcd_Set_Cursor@b,f
  3312  0679  3001               	movlw	1
  3313  067A  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  3314                           
  3315                           ;RTC_F.c: 203: Lcd_Write_String(" Entered Date");
  3316  067F  304F               	movlw	low (STR_42| (0+32768))
  3317  0680  00F5               	movwf	Lcd_Write_String@a
  3318  0681  3089               	movlw	high (STR_42| (0+32768))
  3319  0682  00F6               	movwf	Lcd_Write_String@a+1
  3320  0683  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  3321                           
  3322                           ;RTC_F.c: 204: Lcd_Set_Cursor(2,2);
  3323  0688  3002               	movlw	2
  3324  0689  1283               	bcf	3,5	;RP0=0, select bank0
  3325  068A  1303               	bcf	3,6	;RP1=0, select bank0
  3326  068B  00B2               	movwf	??_Settings
  3327  068C  0832               	movf	??_Settings,w
  3328  068D  00F4               	movwf	Lcd_Set_Cursor@b
  3329  068E  3002               	movlw	2
  3330  068F  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  3331                           
  3332                           ;RTC_F.c: 205: Lcd_Write_String(txt);
  3333  0694  3090               	movlw	(low (_txt| (0+256)))& (0+255)
  3334  0695  00F5               	movwf	Lcd_Write_String@a
  3335  0696  3001               	movlw	1
  3336  0697  00F6               	movwf	Lcd_Write_String@a+1
  3337  0698  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  3338                           
  3339                           ;RTC_F.c: 206: _delay((unsigned long)((2000)*(8000000/4000.0)));
  3340  069D  3015               	movlw	21
  3341  069E  1283               	bcf	3,5	;RP0=0, select bank0
  3342  069F  1303               	bcf	3,6	;RP1=0, select bank0
  3343  06A0  00B4               	movwf	??_Settings+2
  3344  06A1  304B               	movlw	75
  3345  06A2  00B3               	movwf	??_Settings+1
  3346  06A3  30D1               	movlw	209
  3347  06A4  00B2               	movwf	??_Settings
  3348  06A5                     u4597:	
  3349  06A5  0BB2               	decfsz	??_Settings,f
  3350  06A6  2EA5               	goto	u4597
  3351  06A7  0BB3               	decfsz	??_Settings+1,f
  3352  06A8  2EA5               	goto	u4597
  3353  06A9  0BB4               	decfsz	??_Settings+2,f
  3354  06AA  2EA5               	goto	u4597
  3355  06AB  0000               	nop
  3356                           
  3357                           ;RTC_F.c: 207: iDD = atoi(DD);
  3358  06AC  30C6               	movlw	(low (_DD| 0))& (0+255)
  3359  06AD  00F6               	movwf	atoi@s
  3360  06AE  3000               	movlw	0
  3361  06AF  00F7               	movwf	atoi@s+1
  3362  06B0  160A  118A  240E  120A  118A  	fcall	_atoi
  3363  06B5  0877               	movf	?_atoi+1,w
  3364  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  3365  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  3366  06B8  00DB               	movwf	_iDD+1
  3367  06B9  0876               	movf	?_atoi,w
  3368  06BA  00DA               	movwf	_iDD
  3369                           
  3370                           ;RTC_F.c: 208: iMM = atoi(MM);
  3371  06BB  30CB               	movlw	(low (_MM| 0))& (0+255)
  3372  06BC  00F6               	movwf	atoi@s
  3373  06BD  3000               	movlw	0
  3374  06BE  00F7               	movwf	atoi@s+1
  3375  06BF  160A  118A  240E  120A  118A  	fcall	_atoi
  3376  06C4  0877               	movf	?_atoi+1,w
  3377  06C5  1683               	bsf	3,5	;RP0=1, select bank1
  3378  06C6  1303               	bcf	3,6	;RP1=0, select bank1
  3379  06C7  00AA               	movwf	(_iMM+1)^(0+128)
  3380  06C8  0876               	movf	?_atoi,w
  3381  06C9  00A9               	movwf	_iMM^(0+128)
  3382                           
  3383                           ;RTC_F.c: 209: iYY = atoi(YY);
  3384  06CA  30D0               	movlw	(low (_YY| 0))& (0+255)
  3385  06CB  00F6               	movwf	atoi@s
  3386  06CC  3000               	movlw	0
  3387  06CD  00F7               	movwf	atoi@s+1
  3388  06CE  160A  118A  240E  120A  118A  	fcall	_atoi
  3389  06D3  0877               	movf	?_atoi+1,w
  3390  06D4  1683               	bsf	3,5	;RP0=1, select bank1
  3391  06D5  1303               	bcf	3,6	;RP1=0, select bank1
  3392  06D6  00AC               	movwf	(_iYY+1)^(0+128)
  3393  06D7  0876               	movf	?_atoi,w
  3394  06D8  00AB               	movwf	_iYY^(0+128)
  3395                           
  3396                           ;RTC_F.c: 210: iDAY= atoi(cDAY);
  3397  06D9  30DA               	movlw	(low (_cDAY| 0))& (0+255)
  3398  06DA  00F6               	movwf	atoi@s
  3399  06DB  3000               	movlw	0
  3400  06DC  00F7               	movwf	atoi@s+1
  3401  06DD  160A  118A  240E  120A  118A  	fcall	_atoi
  3402  06E2  0877               	movf	?_atoi+1,w
  3403  06E3  1683               	bsf	3,5	;RP0=1, select bank1
  3404  06E4  1303               	bcf	3,6	;RP1=0, select bank1
  3405  06E5  00A8               	movwf	(_iDAY+1)^(0+128)
  3406  06E6  0876               	movf	?_atoi,w
  3407  06E7  00A7               	movwf	_iDAY^(0+128)
  3408                           
  3409                           ;RTC_F.c: 213: Set_DS1307_RTC_Date(iDD, iMM, iYY, iDAY);
  3410  06E8  0829               	movf	_iMM^(0+128),w
  3411  06E9  1283               	bcf	3,5	;RP0=0, select bank0
  3412  06EA  1303               	bcf	3,6	;RP1=0, select bank0
  3413  06EB  00B2               	movwf	??_Settings
  3414  06EC  0832               	movf	??_Settings,w
  3415  06ED  00F9               	movwf	Set_DS1307_RTC_Date@Month
  3416  06EE  1683               	bsf	3,5	;RP0=1, select bank1
  3417  06EF  1303               	bcf	3,6	;RP1=0, select bank1
  3418  06F0  082B               	movf	_iYY^(0+128),w
  3419  06F1  1283               	bcf	3,5	;RP0=0, select bank0
  3420  06F2  1303               	bcf	3,6	;RP1=0, select bank0
  3421  06F3  00B3               	movwf	??_Settings+1
  3422  06F4  0833               	movf	??_Settings+1,w
  3423  06F5  00FA               	movwf	Set_DS1307_RTC_Date@Year
  3424  06F6  1683               	bsf	3,5	;RP0=1, select bank1
  3425  06F7  1303               	bcf	3,6	;RP1=0, select bank1
  3426  06F8  0827               	movf	_iDAY^(0+128),w
  3427  06F9  1283               	bcf	3,5	;RP0=0, select bank0
  3428  06FA  1303               	bcf	3,6	;RP1=0, select bank0
  3429  06FB  00B4               	movwf	??_Settings+2
  3430  06FC  0834               	movf	??_Settings+2,w
  3431  06FD  00FB               	movwf	Set_DS1307_RTC_Date@Day
  3432  06FE  085A               	movf	_iDD,w
  3433  06FF  160A  118A  25FD  120A  118A  	fcall	_Set_DS1307_RTC_Date
  3434                           
  3435                           ;RTC_F.c: 215: _delay((unsigned long)((2000)*(8000000/4000.0)));
  3436  0704  3015               	movlw	21
  3437  0705  1283               	bcf	3,5	;RP0=0, select bank0
  3438  0706  1303               	bcf	3,6	;RP1=0, select bank0
  3439  0707  00B4               	movwf	??_Settings+2
  3440  0708  304B               	movlw	75
  3441  0709  00B3               	movwf	??_Settings+1
  3442  070A  30D1               	movlw	209
  3443  070B  00B2               	movwf	??_Settings
  3444  070C                     u4607:	
  3445  070C  0BB2               	decfsz	??_Settings,f
  3446  070D  2F0C               	goto	u4607
  3447  070E  0BB3               	decfsz	??_Settings+1,f
  3448  070F  2F0C               	goto	u4607
  3449  0710  0BB4               	decfsz	??_Settings+2,f
  3450  0711  2F0C               	goto	u4607
  3451  0712  0000               	nop
  3452                           
  3453                           ;RTC_F.c: 216: break;
  3454  0713  2FAE               	goto	l3994
  3455  0714                     l3958:	
  3456                           ;RTC_F.c: 221: case '4': Lcd_Clear();
  3457                           
  3458                           ;RTC_F.c: 217: }
  3459                           ;RTC_F.c: 218: }
  3460                           ;RTC_F.c: 219: break;
  3461                           
  3462  0714  160A  158A  2331  120A  118A  	fcall	_Lcd_Clear
  3463                           
  3464                           ;RTC_F.c: 222: Lcd_Set_Cursor(1,1);
  3465  0719  01F4               	clrf	Lcd_Set_Cursor@b
  3466  071A  0AF4               	incf	Lcd_Set_Cursor@b,f
  3467  071B  3001               	movlw	1
  3468  071C  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  3469                           
  3470                           ;RTC_F.c: 223: int x=0;
  3471  0721  1283               	bcf	3,5	;RP0=0, select bank0
  3472  0722  1303               	bcf	3,6	;RP1=0, select bank0
  3473  0723  01B6               	clrf	Settings@x
  3474  0724  01B7               	clrf	Settings@x+1
  3475  0725                     l3962:	
  3476                           ;RTC_F.c: 224: while(1)
  3477                           
  3478                           
  3479                           ;RTC_F.c: 225: {
  3480                           ;RTC_F.c: 226: Lcd_Clear();
  3481  0725  160A  158A  2331  120A  118A  	fcall	_Lcd_Clear
  3482                           
  3483                           ;RTC_F.c: 227: Lcd_Set_Cursor(1,1);
  3484  072A  01F4               	clrf	Lcd_Set_Cursor@b
  3485  072B  0AF4               	incf	Lcd_Set_Cursor@b,f
  3486  072C  3001               	movlw	1
  3487  072D  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  3488                           
  3489                           ;RTC_F.c: 229: DisplayTimeToLCD(Get_DS1307_RTC_Time());
  3490  0732  160A  118A  24A0  120A  118A  	fcall	_Get_DS1307_RTC_Time
  3491  0737  120A  158A  23FF  120A  118A  	fcall	_DisplayTimeToLCD
  3492                           
  3493                           ;RTC_F.c: 232: DisplayDateOnLCD(Get_DS1307_RTC_Date());
  3494  073C  160A  118A  2189  120A  118A  	fcall	_Get_DS1307_RTC_Date
  3495  0741  120A  118A  2106  120A  118A  	fcall	_DisplayDateOnLCD
  3496                           
  3497                           ;RTC_F.c: 234: _delay((unsigned long)((1500)*(8000000/4000.0)));
  3498  0746  3010               	movlw	16
  3499  0747  1283               	bcf	3,5	;RP0=0, select bank0
  3500  0748  1303               	bcf	3,6	;RP1=0, select bank0
  3501  0749  00B4               	movwf	??_Settings+2
  3502  074A  3039               	movlw	57
  3503  074B  00B3               	movwf	??_Settings+1
  3504  074C  301B               	movlw	27
  3505  074D  00B2               	movwf	??_Settings
  3506  074E                     u4617:	
  3507  074E  0BB2               	decfsz	??_Settings,f
  3508  074F  2F4E               	goto	u4617
  3509  0750  0BB3               	decfsz	??_Settings+1,f
  3510  0751  2F4E               	goto	u4617
  3511  0752  0BB4               	decfsz	??_Settings+2,f
  3512  0753  2F4E               	goto	u4617
  3513  0754  2F55               	nop2
  3514                           
  3515                           ;RTC_F.c: 236: Lcd_Clear();
  3516  0755  160A  158A  2331  120A  118A  	fcall	_Lcd_Clear
  3517                           
  3518                           ;RTC_F.c: 237: Lcd_Set_Cursor(1,1);
  3519  075A  01F4               	clrf	Lcd_Set_Cursor@b
  3520  075B  0AF4               	incf	Lcd_Set_Cursor@b,f
  3521  075C  3001               	movlw	1
  3522  075D  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  3523                           
  3524                           ;RTC_F.c: 238: Lcd_Write_String("Phone Number :");
  3525  0762  30F9               	movlw	low (STR_43| (0+32768))
  3526  0763  00F5               	movwf	Lcd_Write_String@a
  3527  0764  3088               	movlw	high (STR_43| (0+32768))
  3528  0765  00F6               	movwf	Lcd_Write_String@a+1
  3529  0766  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  3530                           
  3531                           ;RTC_F.c: 239: Lcd_Set_Cursor(2,1);
  3532  076B  01F4               	clrf	Lcd_Set_Cursor@b
  3533  076C  0AF4               	incf	Lcd_Set_Cursor@b,f
  3534  076D  3002               	movlw	2
  3535  076E  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  3536                           
  3537                           ;RTC_F.c: 240: Lcd_Write_String(number);
  3538  0773  30AD               	movlw	(low (_number| 0))& (0+255)
  3539  0774  00F5               	movwf	Lcd_Write_String@a
  3540  0775  3000               	movlw	0
  3541  0776  00F6               	movwf	Lcd_Write_String@a+1
  3542  0777  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  3543                           
  3544                           ;RTC_F.c: 241: _delay((unsigned long)((1500)*(8000000/4000.0)));
  3545  077C  3010               	movlw	16
  3546  077D  1283               	bcf	3,5	;RP0=0, select bank0
  3547  077E  1303               	bcf	3,6	;RP1=0, select bank0
  3548  077F  00B4               	movwf	??_Settings+2
  3549  0780  3039               	movlw	57
  3550  0781  00B3               	movwf	??_Settings+1
  3551  0782  301B               	movlw	27
  3552  0783  00B2               	movwf	??_Settings
  3553  0784                     u4627:	
  3554  0784  0BB2               	decfsz	??_Settings,f
  3555  0785  2F84               	goto	u4627
  3556  0786  0BB3               	decfsz	??_Settings+1,f
  3557  0787  2F84               	goto	u4627
  3558  0788  0BB4               	decfsz	??_Settings+2,f
  3559  0789  2F84               	goto	u4627
  3560  078A  2F8B               	nop2
  3561                           
  3562                           ;RTC_F.c: 242: x++;
  3563  078B  3001               	movlw	1
  3564  078C  1283               	bcf	3,5	;RP0=0, select bank0
  3565  078D  1303               	bcf	3,6	;RP1=0, select bank0
  3566  078E  07B6               	addwf	Settings@x,f
  3567  078F  1803               	skipnc
  3568  0790  0AB7               	incf	Settings@x+1,f
  3569  0791  3000               	movlw	0
  3570  0792  07B7               	addwf	Settings@x+1,f
  3571                           
  3572                           ;RTC_F.c: 243: if(x==3)
  3573  0793  3003               	movlw	3
  3574  0794  0636               	xorwf	Settings@x,w
  3575  0795  0437               	iorwf	Settings@x+1,w
  3576  0796  1D03               	btfss	3,2
  3577  0797  2F25               	goto	l3962
  3578                           
  3579                           ;RTC_F.c: 244: {
  3580                           ;RTC_F.c: 245: Lcd_Clear();
  3581  0798  160A  158A  2331  120A  118A  	fcall	_Lcd_Clear
  3582                           
  3583                           ;RTC_F.c: 246: break;
  3584  079D  2FAE               	goto	l3994
  3585  079E                     l3992:	
  3586                           ;RTC_F.c: 253: }
  3587                           
  3588                           ;RTC_F.c: 251: default : continue;
  3589                           
  3590                           ;RTC_F.c: 247: }
  3591                           ;RTC_F.c: 248: }
  3592                           ;RTC_F.c: 249: break;
  3593                           
  3594  079E  1283               	bcf	3,5	;RP0=0, select bank0
  3595  079F  1303               	bcf	3,6	;RP1=0, select bank0
  3596  07A0  0838               	movf	Settings@Key,w
  3597                           
  3598                           ; Switch size 1, requested type "space"
  3599                           ; Number of cases is 4, Range of values is 49 to 52
  3600                           ; switch strategies available:
  3601                           ; Name         Instructions Cycles
  3602                           ; simple_byte           13     7 (average)
  3603                           ; direct_byte           23    11 (fixed)
  3604                           ; jumptable            263     9 (fixed)
  3605                           ;	Chosen strategy is simple_byte
  3606  07A1  3A31               	xorlw	49	; case 49
  3607  07A2  1903               	skipnz
  3608  07A3  2C52               	goto	l3860
  3609  07A4  3A03               	xorlw	3	; case 50
  3610  07A5  1903               	skipnz
  3611  07A6  2CF7               	goto	l3890
  3612  07A7  3A01               	xorlw	1	; case 51
  3613  07A8  1903               	skipnz
  3614  07A9  2E06               	goto	l3926
  3615  07AA  3A07               	xorlw	7	; case 52
  3616  07AB  1903               	skipnz
  3617  07AC  2F14               	goto	l3958
  3618  07AD  2C16               	goto	l467
  3619  07AE                     l3994:	
  3620                           
  3621                           ;RTC_F.c: 255: Lcd_Clear();
  3622  07AE  160A  158A  2331  120A  118A  	fcall	_Lcd_Clear
  3623                           
  3624                           ;RTC_F.c: 256: Lcd_Set_Cursor(1,1);
  3625  07B3  01F4               	clrf	Lcd_Set_Cursor@b
  3626  07B4  0AF4               	incf	Lcd_Set_Cursor@b,f
  3627  07B5  3001               	movlw	1
  3628  07B6  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  3629                           
  3630                           ;RTC_F.c: 257: Lcd_Write_String("F1:Edit ");
  3631  07BB  30BE               	movlw	low (STR_44| (0+32768))
  3632  07BC  00F5               	movwf	Lcd_Write_String@a
  3633  07BD  3089               	movlw	high (STR_44| (0+32768))
  3634  07BE  00F6               	movwf	Lcd_Write_String@a+1
  3635  07BF  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  3636                           
  3637                           ;RTC_F.c: 258: Lcd_Set_Cursor(2,1);
  3638  07C4  01F4               	clrf	Lcd_Set_Cursor@b
  3639  07C5  0AF4               	incf	Lcd_Set_Cursor@b,f
  3640  07C6  3002               	movlw	2
  3641  07C7  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  3642                           
  3643                           ;RTC_F.c: 259: Lcd_Write_String("F2:Exit");
  3644  07CC  30D0               	movlw	low (STR_45| (0+32768))
  3645  07CD  00F5               	movwf	Lcd_Write_String@a
  3646  07CE  3089               	movlw	high (STR_45| (0+32768))
  3647  07CF  00F6               	movwf	Lcd_Write_String@a+1
  3648  07D0  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  3649                           
  3650                           ;RTC_F.c: 260: Key = GetKey();
  3651  07D5  160A  158A  2355  120A  118A  	fcall	_GetKey
  3652  07DA  1283               	bcf	3,5	;RP0=0, select bank0
  3653  07DB  1303               	bcf	3,6	;RP1=0, select bank0
  3654  07DC  00B2               	movwf	??_Settings
  3655  07DD  0832               	movf	??_Settings,w
  3656  07DE  00B8               	movwf	Settings@Key
  3657                           
  3658                           ;RTC_F.c: 261: if(Key=='x')
  3659  07DF  3078               	movlw	120
  3660  07E0  0638               	xorwf	Settings@Key,w
  3661  07E1  1903               	btfsc	3,2
  3662  07E2  0008               	return
  3663  07E3  2C16               	goto	l467
  3664  07E4                     __end_of_Settings:	
  3665                           ;RTC_F.c: 263: else
  3666                           ;RTC_F.c: 264: continue;
  3667                           
  3668                           ;RTC_F.c: 262: break;
  3669                           
  3670                           
  3671                           	psect	text4
  3672  140E                     __ptext4:	
  3673 ;; *************** function _atoi *****************
  3674 ;; Defined at:
  3675 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\atoi.c"
  3676 ;; Parameters:    Size  Location     Type
  3677 ;;  s               2    6[COMMON] PTR const unsigned char 
  3678 ;;		 -> ROM(8192), cDAY(5), YY(5), MM(5), 
  3679 ;;		 -> DD(5), ss(5), mm(5), hh(5), 
  3680 ;; Auto vars:     Size  Location     Type
  3681 ;;  a               2   11[COMMON] int 
  3682 ;;  sign            1   10[COMMON] unsigned char 
  3683 ;; Return value:  Size  Location     Type
  3684 ;;                  2    6[COMMON] int 
  3685 ;; Registers used:
  3686 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3687 ;; Tracked objects:
  3688 ;;		On entry : 0/0
  3689 ;;		On exit  : 0/0
  3690 ;;		Unchanged: 0/0
  3691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3692 ;;      Params:         2       0       0       0       0
  3693 ;;      Locals:         3       0       0       0       0
  3694 ;;      Temps:          2       0       0       0       0
  3695 ;;      Totals:         7       0       0       0       0
  3696 ;;Total ram usage:        7 bytes
  3697 ;; Hardware stack levels used:    1
  3698 ;; Hardware stack levels required when called:    1
  3699 ;; This function calls:
  3700 ;;		___wmul
  3701 ;;		_isdigit
  3702 ;; This function is called by:
  3703 ;;		_Settings
  3704 ;; This function uses a non-reentrant model
  3705 ;;
  3706                           
  3707                           
  3708                           ;psect for function _atoi
  3709  140E                     _atoi:	
  3710  140E                     l3634:	
  3711                           ;incstack = 0
  3712                           ; Regs used in _atoi: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3713                           
  3714  140E  0877               	movf	atoi@s+1,w
  3715  140F  1283               	bcf	3,5	;RP0=0, select bank0
  3716  1410  1303               	bcf	3,6	;RP1=0, select bank0
  3717  1411  00FF               	movwf	127
  3718  1412  0876               	movf	atoi@s,w
  3719  1413  0084               	movwf	4
  3720  1414  120A  158A  2000  160A  118A  	fcall	stringtab
  3721  1419  3A20               	xorlw	32
  3722  141A  1D03               	btfss	3,2
  3723  141B  2C23               	goto	l3636
  3724  141C                     l3632:	
  3725  141C  3001               	movlw	1
  3726  141D  07F6               	addwf	atoi@s,f
  3727  141E  1803               	skipnc
  3728  141F  0AF7               	incf	atoi@s+1,f
  3729  1420  3000               	movlw	0
  3730  1421  07F7               	addwf	atoi@s+1,f
  3731  1422  2C0E               	goto	l3634
  3732  1423                     l3636:	
  3733  1423  0877               	movf	atoi@s+1,w
  3734  1424  00FF               	movwf	127
  3735  1425  0876               	movf	atoi@s,w
  3736  1426  0084               	movwf	4
  3737  1427  120A  158A  2000  160A  118A  	fcall	stringtab
  3738  142C  3A09               	xorlw	9
  3739  142D  1903               	skipnz
  3740  142E  2C1C               	goto	l3632
  3741  142F  01FB               	clrf	atoi@a
  3742  1430  01FC               	clrf	atoi@a+1
  3743  1431  01FA               	clrf	atoi@sign
  3744  1432  0877               	movf	atoi@s+1,w
  3745  1433  00FF               	movwf	127
  3746  1434  0876               	movf	atoi@s,w
  3747  1435  0084               	movwf	4
  3748  1436  120A  158A  2000  160A  118A  	fcall	stringtab
  3749  143B  3A2D               	xorlw	45
  3750  143C  1D03               	skipz
  3751  143D  2C43               	goto	l3646
  3752  143E  3001               	movlw	1
  3753  143F  00F8               	movwf	??_atoi
  3754  1440  0878               	movf	??_atoi,w
  3755  1441  07FA               	addwf	atoi@sign,f
  3756  1442  2C4F               	goto	l3652
  3757  1443                     l3646:	
  3758  1443  0877               	movf	atoi@s+1,w
  3759  1444  00FF               	movwf	127
  3760  1445  0876               	movf	atoi@s,w
  3761  1446  0084               	movwf	4
  3762  1447  120A  158A  2000  160A  118A  	fcall	stringtab
  3763  144C  3A2B               	xorlw	43
  3764  144D  1D03               	skipz
  3765  144E  2C55               	goto	l3654
  3766  144F                     l3652:	
  3767  144F  3001               	movlw	1
  3768  1450  07F6               	addwf	atoi@s,f
  3769  1451  1803               	skipnc
  3770  1452  0AF7               	incf	atoi@s+1,f
  3771  1453  3000               	movlw	0
  3772  1454  07F7               	addwf	atoi@s+1,f
  3773  1455                     l3654:	
  3774  1455  0877               	movf	atoi@s+1,w
  3775  1456  00FF               	movwf	127
  3776  1457  0876               	movf	atoi@s,w
  3777  1458  0084               	movwf	4
  3778  1459  120A  158A  2000  160A  118A  	fcall	stringtab
  3779  145E  120A  118A  2004  160A  118A  	fcall	_isdigit
  3780  1463  1C03               	btfss	3,0
  3781  1464  2C8C               	goto	l3656
  3782  1465  087C               	movf	atoi@a+1,w
  3783  1466  00F1               	movwf	___wmul@multiplier+1
  3784  1467  087B               	movf	atoi@a,w
  3785  1468  00F0               	movwf	___wmul@multiplier
  3786  1469  300A               	movlw	10
  3787  146A  00F2               	movwf	___wmul@multiplicand
  3788  146B  3000               	movlw	0
  3789  146C  00F3               	movwf	___wmul@multiplicand+1
  3790  146D  160A  158A  2429  160A  118A  	fcall	___wmul
  3791  1472  0877               	movf	atoi@s+1,w
  3792  1473  1283               	bcf	3,5	;RP0=0, select bank0
  3793  1474  1303               	bcf	3,6	;RP1=0, select bank0
  3794  1475  00FF               	movwf	127
  3795  1476  0876               	movf	atoi@s,w
  3796  1477  0084               	movwf	4
  3797  1478  120A  158A  2000  160A  118A  	fcall	stringtab
  3798  147D  0770               	addwf	?___wmul,w
  3799  147E  00F8               	movwf	??_atoi
  3800  147F  0871               	movf	?___wmul+1,w
  3801  1480  1803               	skipnc
  3802  1481  0A71               	incf	?___wmul+1,w
  3803  1482  00F9               	movwf	??_atoi+1
  3804  1483  0878               	movf	??_atoi,w
  3805  1484  3ED0               	addlw	208
  3806  1485  00FB               	movwf	atoi@a
  3807  1486  0879               	movf	??_atoi+1,w
  3808  1487  1803               	skipnc
  3809  1488  3E01               	addlw	1
  3810  1489  3EFF               	addlw	255
  3811  148A  00FC               	movwf	atoi@a+1
  3812  148B  2C4F               	goto	l3652
  3813  148C                     l3656:	
  3814  148C  087A               	movf	atoi@sign,w
  3815  148D  1903               	btfsc	3,2
  3816  148E  2C9B               	goto	l3662
  3817  148F  097B               	comf	atoi@a,w
  3818  1490  00F8               	movwf	??_atoi
  3819  1491  097C               	comf	atoi@a+1,w
  3820  1492  00F9               	movwf	??_atoi+1
  3821  1493  0AF8               	incf	??_atoi,f
  3822  1494  1903               	skipnz
  3823  1495  0AF9               	incf	??_atoi+1,f
  3824  1496  0878               	movf	??_atoi,w
  3825  1497  00F6               	movwf	?_atoi
  3826  1498  0879               	movf	??_atoi+1,w
  3827  1499  00F7               	movwf	?_atoi+1
  3828  149A  0008               	return
  3829  149B                     l3662:	
  3830  149B  087C               	movf	atoi@a+1,w
  3831  149C  00F7               	movwf	?_atoi+1
  3832  149D  087B               	movf	atoi@a,w
  3833  149E  00F6               	movwf	?_atoi
  3834  149F  0008               	return
  3835  14A0                     __end_of_atoi:	
  3836                           
  3837                           	psect	text5
  3838  0004                     __ptext5:	
  3839 ;; *************** function _isdigit *****************
  3840 ;; Defined at:
  3841 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3842 ;; Parameters:    Size  Location     Type
  3843 ;;  c               1    wreg     unsigned char 
  3844 ;; Auto vars:     Size  Location     Type
  3845 ;;  c               1    1[COMMON] unsigned char 
  3846 ;; Return value:  Size  Location     Type
  3847 ;;		None               void
  3848 ;; Registers used:
  3849 ;;		wreg, status,2, status,0
  3850 ;; Tracked objects:
  3851 ;;		On entry : 0/0
  3852 ;;		On exit  : 0/0
  3853 ;;		Unchanged: 0/0
  3854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3855 ;;      Params:         0       0       0       0       0
  3856 ;;      Locals:         2       0       0       0       0
  3857 ;;      Temps:          0       0       0       0       0
  3858 ;;      Totals:         2       0       0       0       0
  3859 ;;Total ram usage:        2 bytes
  3860 ;; Hardware stack levels used:    1
  3861 ;; This function calls:
  3862 ;;		Nothing
  3863 ;; This function is called by:
  3864 ;;		_atoi
  3865 ;; This function uses a non-reentrant model
  3866 ;;
  3867                           
  3868                           
  3869                           ;psect for function _isdigit
  3870  0004                     _isdigit:	
  3871                           
  3872                           ;incstack = 0
  3873                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3874                           ;isdigit@c stored from wreg
  3875  0004  00F1               	movwf	isdigit@c
  3876  0005  01F0               	clrf	_isdigit$633
  3877  0006  303A               	movlw	58
  3878  0007  0271               	subwf	isdigit@c,w
  3879  0008  1803               	skipnc
  3880  0009  2810               	goto	l3282
  3881  000A  3030               	movlw	48
  3882  000B  0271               	subwf	isdigit@c,w
  3883  000C  1C03               	skipc
  3884  000D  2810               	goto	l3282
  3885  000E  01F0               	clrf	_isdigit$633
  3886  000F  0AF0               	incf	_isdigit$633,f
  3887  0010                     l3282:	
  3888  0010  0C70               	rrf	_isdigit$633,w
  3889  0011  0008               	return
  3890  0012                     __end_of_isdigit:	
  3891                           
  3892                           	psect	text6
  3893  1C29                     __ptext6:	
  3894 ;; *************** function ___wmul *****************
  3895 ;; Defined at:
  3896 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  3897 ;; Parameters:    Size  Location     Type
  3898 ;;  multiplier      2    0[COMMON] unsigned int 
  3899 ;;  multiplicand    2    2[COMMON] unsigned int 
  3900 ;; Auto vars:     Size  Location     Type
  3901 ;;  product         2    4[COMMON] unsigned int 
  3902 ;; Return value:  Size  Location     Type
  3903 ;;                  2    0[COMMON] unsigned int 
  3904 ;; Registers used:
  3905 ;;		wreg, status,2, status,0
  3906 ;; Tracked objects:
  3907 ;;		On entry : 0/0
  3908 ;;		On exit  : 0/0
  3909 ;;		Unchanged: 0/0
  3910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3911 ;;      Params:         4       0       0       0       0
  3912 ;;      Locals:         2       0       0       0       0
  3913 ;;      Temps:          0       0       0       0       0
  3914 ;;      Totals:         6       0       0       0       0
  3915 ;;Total ram usage:        6 bytes
  3916 ;; Hardware stack levels used:    1
  3917 ;; This function calls:
  3918 ;;		Nothing
  3919 ;; This function is called by:
  3920 ;;		_atoi
  3921 ;; This function uses a non-reentrant model
  3922 ;;
  3923                           
  3924                           
  3925                           ;psect for function ___wmul
  3926  1C29                     ___wmul:	
  3927                           
  3928                           ;incstack = 0
  3929                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3930  1C29  01F4               	clrf	___wmul@product
  3931  1C2A  01F5               	clrf	___wmul@product+1
  3932  1C2B                     l3208:	
  3933  1C2B  1C70               	btfss	___wmul@multiplier,0
  3934  1C2C  2C33               	goto	l794
  3935  1C2D  0872               	movf	___wmul@multiplicand,w
  3936  1C2E  07F4               	addwf	___wmul@product,f
  3937  1C2F  1803               	skipnc
  3938  1C30  0AF5               	incf	___wmul@product+1,f
  3939  1C31  0873               	movf	___wmul@multiplicand+1,w
  3940  1C32  07F5               	addwf	___wmul@product+1,f
  3941  1C33                     l794:	
  3942  1C33  3001               	movlw	1
  3943  1C34                     u3065:	
  3944  1C34  1003               	clrc
  3945  1C35  0DF2               	rlf	___wmul@multiplicand,f
  3946  1C36  0DF3               	rlf	___wmul@multiplicand+1,f
  3947  1C37  3EFF               	addlw	-1
  3948  1C38  1D03               	skipz
  3949  1C39  2C34               	goto	u3065
  3950  1C3A  3001               	movlw	1
  3951  1C3B                     u3075:	
  3952  1C3B  1003               	clrc
  3953  1C3C  0CF1               	rrf	___wmul@multiplier+1,f
  3954  1C3D  0CF0               	rrf	___wmul@multiplier,f
  3955  1C3E  3EFF               	addlw	-1
  3956  1C3F  1D03               	skipz
  3957  1C40  2C3B               	goto	u3075
  3958  1C41  0870               	movf	___wmul@multiplier,w
  3959  1C42  0471               	iorwf	___wmul@multiplier+1,w
  3960  1C43  1D03               	btfss	3,2
  3961  1C44  2C2B               	goto	l3208
  3962  1C45  0875               	movf	___wmul@product+1,w
  3963  1C46  00F1               	movwf	?___wmul+1
  3964  1C47  0874               	movf	___wmul@product,w
  3965  1C48  00F0               	movwf	?___wmul
  3966  1C49  0008               	return
  3967  1C4A                     __end_of___wmul:	
  3968                           
  3969                           	psect	text7
  3970  153B                     __ptext7:	
  3971 ;; *************** function _Set_DS1307_RTC_Time *****************
  3972 ;; Defined at:
  3973 ;;		line 116 in file "DS1307.c"
  3974 ;; Parameters:    Size  Location     Type
  3975 ;;  Mode            1    wreg     unsigned char 
  3976 ;;  Hours           1    9[COMMON] unsigned char 
  3977 ;;  Mins            1   10[COMMON] unsigned char 
  3978 ;;  Secs            1   11[COMMON] unsigned char 
  3979 ;; Auto vars:     Size  Location     Type
  3980 ;;  Mode            1   12[COMMON] unsigned char 
  3981 ;; Return value:  Size  Location     Type
  3982 ;;		None               void
  3983 ;; Registers used:
  3984 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3985 ;; Tracked objects:
  3986 ;;		On entry : 0/0
  3987 ;;		On exit  : 0/0
  3988 ;;		Unchanged: 0/0
  3989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3990 ;;      Params:         3       0       0       0       0
  3991 ;;      Locals:         1       0       0       0       0
  3992 ;;      Temps:          0       8       0       0       0
  3993 ;;      Totals:         4       8       0       0       0
  3994 ;;Total ram usage:       12 bytes
  3995 ;; Hardware stack levels used:    1
  3996 ;; Hardware stack levels required when called:    2
  3997 ;; This function calls:
  3998 ;;		_Write_Bytes_To_DS1307_RTC
  3999 ;;		___awdiv
  4000 ;;		___awmod
  4001 ;; This function is called by:
  4002 ;;		_Settings
  4003 ;; This function uses a non-reentrant model
  4004 ;;
  4005                           
  4006                           
  4007                           ;psect for function _Set_DS1307_RTC_Time
  4008  153B                     _Set_DS1307_RTC_Time:	
  4009                           
  4010                           ;incstack = 0
  4011                           ; Regs used in _Set_DS1307_RTC_Time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4012                           ;Set_DS1307_RTC_Time@Mode stored from wreg
  4013  153B  00FC               	movwf	Set_DS1307_RTC_Time@Mode
  4014                           
  4015                           ;DS1307.c: 119: pRTCArray[0] = (((unsigned char)(Secs/10))<<4)|((unsigned char)(Secs%10)
      +                          );
  4016  153C  300A               	movlw	10
  4017  153D  00F0               	movwf	___awmod@divisor
  4018  153E  3000               	movlw	0
  4019  153F  00F1               	movwf	___awmod@divisor+1
  4020  1540  087B               	movf	Set_DS1307_RTC_Time@Secs,w
  4021  1541  1283               	bcf	3,5	;RP0=0, select bank0
  4022  1542  1303               	bcf	3,6	;RP1=0, select bank0
  4023  1543  00A0               	movwf	??_Set_DS1307_RTC_Time
  4024  1544  01A1               	clrf	??_Set_DS1307_RTC_Time+1
  4025  1545  0820               	movf	??_Set_DS1307_RTC_Time,w
  4026  1546  00F2               	movwf	___awmod@dividend
  4027  1547  0821               	movf	??_Set_DS1307_RTC_Time+1,w
  4028  1548  00F3               	movwf	___awmod@dividend+1
  4029  1549  160A  158A  27B5  160A  118A  	fcall	___awmod
  4030  154E  0870               	movf	?___awmod,w
  4031  154F  1283               	bcf	3,5	;RP0=0, select bank0
  4032  1550  1303               	bcf	3,6	;RP1=0, select bank0
  4033  1551  00A2               	movwf	??_Set_DS1307_RTC_Time+2
  4034  1552  0871               	movf	?___awmod+1,w
  4035  1553  00A3               	movwf	??_Set_DS1307_RTC_Time+3
  4036  1554  300A               	movlw	10
  4037  1555  00F0               	movwf	___awdiv@divisor
  4038  1556  3000               	movlw	0
  4039  1557  00F1               	movwf	___awdiv@divisor+1
  4040  1558  087B               	movf	Set_DS1307_RTC_Time@Secs,w
  4041  1559  00A4               	movwf	??_Set_DS1307_RTC_Time+4
  4042  155A  01A5               	clrf	??_Set_DS1307_RTC_Time+5
  4043  155B  0824               	movf	??_Set_DS1307_RTC_Time+4,w
  4044  155C  00F2               	movwf	___awdiv@dividend
  4045  155D  0825               	movf	??_Set_DS1307_RTC_Time+5,w
  4046  155E  00F3               	movwf	___awdiv@dividend+1
  4047  155F  160A  118A  200F  160A  118A  	fcall	___awdiv
  4048  1564  0870               	movf	?___awdiv,w
  4049  1565  1283               	bcf	3,5	;RP0=0, select bank0
  4050  1566  1303               	bcf	3,6	;RP1=0, select bank0
  4051  1567  00A6               	movwf	??_Set_DS1307_RTC_Time+6
  4052  1568  3003               	movlw	3
  4053  1569                     u3645:	
  4054  1569  1003               	clrc
  4055  156A  0DA6               	rlf	??_Set_DS1307_RTC_Time+6,f
  4056  156B  3EFF               	addlw	-1
  4057  156C  1D03               	skipz
  4058  156D  2D69               	goto	u3645
  4059  156E  1003               	clrc
  4060  156F  0D26               	rlf	??_Set_DS1307_RTC_Time+6,w
  4061  1570  0422               	iorwf	??_Set_DS1307_RTC_Time+2,w
  4062  1571  00A7               	movwf	??_Set_DS1307_RTC_Time+7
  4063  1572  0827               	movf	??_Set_DS1307_RTC_Time+7,w
  4064  1573  00EA               	movwf	_pRTCArray
  4065                           
  4066                           ;DS1307.c: 120: pRTCArray[1] = (((unsigned char)(Mins/10))<<4)|((unsigned char)(Mins%10)
      +                          );
  4067  1574  300A               	movlw	10
  4068  1575  00F0               	movwf	___awmod@divisor
  4069  1576  3000               	movlw	0
  4070  1577  00F1               	movwf	___awmod@divisor+1
  4071  1578  087A               	movf	Set_DS1307_RTC_Time@Mins,w
  4072  1579  00A0               	movwf	??_Set_DS1307_RTC_Time
  4073  157A  01A1               	clrf	??_Set_DS1307_RTC_Time+1
  4074  157B  0820               	movf	??_Set_DS1307_RTC_Time,w
  4075  157C  00F2               	movwf	___awmod@dividend
  4076  157D  0821               	movf	??_Set_DS1307_RTC_Time+1,w
  4077  157E  00F3               	movwf	___awmod@dividend+1
  4078  157F  160A  158A  27B5  160A  118A  	fcall	___awmod
  4079  1584  0870               	movf	?___awmod,w
  4080  1585  1283               	bcf	3,5	;RP0=0, select bank0
  4081  1586  1303               	bcf	3,6	;RP1=0, select bank0
  4082  1587  00A2               	movwf	??_Set_DS1307_RTC_Time+2
  4083  1588  0871               	movf	?___awmod+1,w
  4084  1589  00A3               	movwf	??_Set_DS1307_RTC_Time+3
  4085  158A  300A               	movlw	10
  4086  158B  00F0               	movwf	___awdiv@divisor
  4087  158C  3000               	movlw	0
  4088  158D  00F1               	movwf	___awdiv@divisor+1
  4089  158E  087A               	movf	Set_DS1307_RTC_Time@Mins,w
  4090  158F  00A4               	movwf	??_Set_DS1307_RTC_Time+4
  4091  1590  01A5               	clrf	??_Set_DS1307_RTC_Time+5
  4092  1591  0824               	movf	??_Set_DS1307_RTC_Time+4,w
  4093  1592  00F2               	movwf	___awdiv@dividend
  4094  1593  0825               	movf	??_Set_DS1307_RTC_Time+5,w
  4095  1594  00F3               	movwf	___awdiv@dividend+1
  4096  1595  160A  118A  200F  160A  118A  	fcall	___awdiv
  4097  159A  0870               	movf	?___awdiv,w
  4098  159B  1283               	bcf	3,5	;RP0=0, select bank0
  4099  159C  1303               	bcf	3,6	;RP1=0, select bank0
  4100  159D  00A6               	movwf	??_Set_DS1307_RTC_Time+6
  4101  159E  3003               	movlw	3
  4102  159F                     u3655:	
  4103  159F  1003               	clrc
  4104  15A0  0DA6               	rlf	??_Set_DS1307_RTC_Time+6,f
  4105  15A1  3EFF               	addlw	-1
  4106  15A2  1D03               	skipz
  4107  15A3  2D9F               	goto	u3655
  4108  15A4  1003               	clrc
  4109  15A5  0D26               	rlf	??_Set_DS1307_RTC_Time+6,w
  4110  15A6  0422               	iorwf	??_Set_DS1307_RTC_Time+2,w
  4111  15A7  00A7               	movwf	??_Set_DS1307_RTC_Time+7
  4112  15A8  0827               	movf	??_Set_DS1307_RTC_Time+7,w
  4113  15A9  00EB               	movwf	_pRTCArray+1
  4114                           
  4115                           ;DS1307.c: 121: pRTCArray[2] = (((unsigned char)(Hours/10))<<4)|((unsigned char)(Hours%1
      +                          0));
  4116  15AA  300A               	movlw	10
  4117  15AB  00F0               	movwf	___awmod@divisor
  4118  15AC  3000               	movlw	0
  4119  15AD  00F1               	movwf	___awmod@divisor+1
  4120  15AE  0879               	movf	Set_DS1307_RTC_Time@Hours,w
  4121  15AF  00A0               	movwf	??_Set_DS1307_RTC_Time
  4122  15B0  01A1               	clrf	??_Set_DS1307_RTC_Time+1
  4123  15B1  0820               	movf	??_Set_DS1307_RTC_Time,w
  4124  15B2  00F2               	movwf	___awmod@dividend
  4125  15B3  0821               	movf	??_Set_DS1307_RTC_Time+1,w
  4126  15B4  00F3               	movwf	___awmod@dividend+1
  4127  15B5  160A  158A  27B5  160A  118A  	fcall	___awmod
  4128  15BA  0870               	movf	?___awmod,w
  4129  15BB  1283               	bcf	3,5	;RP0=0, select bank0
  4130  15BC  1303               	bcf	3,6	;RP1=0, select bank0
  4131  15BD  00A2               	movwf	??_Set_DS1307_RTC_Time+2
  4132  15BE  0871               	movf	?___awmod+1,w
  4133  15BF  00A3               	movwf	??_Set_DS1307_RTC_Time+3
  4134  15C0  300A               	movlw	10
  4135  15C1  00F0               	movwf	___awdiv@divisor
  4136  15C2  3000               	movlw	0
  4137  15C3  00F1               	movwf	___awdiv@divisor+1
  4138  15C4  0879               	movf	Set_DS1307_RTC_Time@Hours,w
  4139  15C5  00A4               	movwf	??_Set_DS1307_RTC_Time+4
  4140  15C6  01A5               	clrf	??_Set_DS1307_RTC_Time+5
  4141  15C7  0824               	movf	??_Set_DS1307_RTC_Time+4,w
  4142  15C8  00F2               	movwf	___awdiv@dividend
  4143  15C9  0825               	movf	??_Set_DS1307_RTC_Time+5,w
  4144  15CA  00F3               	movwf	___awdiv@dividend+1
  4145  15CB  160A  118A  200F  160A  118A  	fcall	___awdiv
  4146  15D0  0870               	movf	?___awdiv,w
  4147  15D1  1283               	bcf	3,5	;RP0=0, select bank0
  4148  15D2  1303               	bcf	3,6	;RP1=0, select bank0
  4149  15D3  00A6               	movwf	??_Set_DS1307_RTC_Time+6
  4150  15D4  3003               	movlw	3
  4151  15D5                     u3665:	
  4152  15D5  1003               	clrc
  4153  15D6  0DA6               	rlf	??_Set_DS1307_RTC_Time+6,f
  4154  15D7  3EFF               	addlw	-1
  4155  15D8  1D03               	skipz
  4156  15D9  2DD5               	goto	u3665
  4157  15DA  1003               	clrc
  4158  15DB  0D26               	rlf	??_Set_DS1307_RTC_Time+6,w
  4159  15DC  0422               	iorwf	??_Set_DS1307_RTC_Time+2,w
  4160  15DD  00A7               	movwf	??_Set_DS1307_RTC_Time+7
  4161  15DE  0827               	movf	??_Set_DS1307_RTC_Time+7,w
  4162  15DF  00EC               	movwf	_pRTCArray+2
  4163                           
  4164                           ;DS1307.c: 123: switch(Mode)
  4165  15E0  2DE8               	goto	l3672
  4166  15E1                     l660:	
  4167                           ;DS1307.c: 124: {
  4168                           ;DS1307.c: 125: case '1': pRTCArray[2] |= 0x40; break;
  4169                           
  4170  15E1  176C               	bsf	_pRTCArray+2,6
  4171  15E2  2DF0               	goto	l3674
  4172  15E3                     l3668:	
  4173                           ;DS1307.c: 126: case '2': pRTCArray[2] |= 0x60; break;
  4174                           
  4175  15E3  3060               	movlw	96
  4176  15E4  00A0               	movwf	??_Set_DS1307_RTC_Time
  4177  15E5  0820               	movf	??_Set_DS1307_RTC_Time,w
  4178  15E6  04EC               	iorwf	_pRTCArray+2,f
  4179                           
  4180                           ;DS1307.c: 129: }
  4181                           
  4182                           ;DS1307.c: 128: default: break;
  4183  15E7  2DF0               	goto	l3674
  4184  15E8                     l3672:	
  4185  15E8  087C               	movf	Set_DS1307_RTC_Time@Mode,w
  4186                           
  4187                           ; Switch size 1, requested type "space"
  4188                           ; Number of cases is 2, Range of values is 49 to 50
  4189                           ; switch strategies available:
  4190                           ; Name         Instructions Cycles
  4191                           ; simple_byte            7     4 (average)
  4192                           ; direct_byte           17    11 (fixed)
  4193                           ; jumptable            263     9 (fixed)
  4194                           ;	Chosen strategy is simple_byte
  4195  15E9  3A31               	xorlw	49	; case 49
  4196  15EA  1903               	skipnz
  4197  15EB  2DE1               	goto	l660
  4198  15EC  3A03               	xorlw	3	; case 50
  4199  15ED  1903               	skipnz
  4200  15EE  2DE3               	goto	l3668
  4201  15EF  2DF0               	goto	l3674
  4202  15F0                     l3674:	
  4203                           
  4204                           ;DS1307.c: 132: Write_Bytes_To_DS1307_RTC(0x00, pRTCArray, 3);
  4205  15F0  306A               	movlw	(low (_pRTCArray| 0))& (0+255)
  4206  15F1  00A0               	movwf	??_Set_DS1307_RTC_Time
  4207  15F2  0820               	movf	??_Set_DS1307_RTC_Time,w
  4208  15F3  00F1               	movwf	Write_Bytes_To_DS1307_RTC@pData
  4209  15F4  3003               	movlw	3
  4210  15F5  00A1               	movwf	??_Set_DS1307_RTC_Time+1
  4211  15F6  0821               	movf	??_Set_DS1307_RTC_Time+1,w
  4212  15F7  00F2               	movwf	Write_Bytes_To_DS1307_RTC@NoOfBytes
  4213  15F8  3000               	movlw	0
  4214  15F9  160A  158A  25BF   	fcall	_Write_Bytes_To_DS1307_RTC
  4215  15FC  0008               	return
  4216  15FD                     __end_of_Set_DS1307_RTC_Time:	
  4217                           
  4218                           	psect	text8
  4219  15FD                     __ptext8:	
  4220 ;; *************** function _Set_DS1307_RTC_Date *****************
  4221 ;; Defined at:
  4222 ;;		line 188 in file "DS1307.c"
  4223 ;; Parameters:    Size  Location     Type
  4224 ;;  Date            1    wreg     unsigned char 
  4225 ;;  Month           1    9[COMMON] unsigned char 
  4226 ;;  Year            1   10[COMMON] unsigned char 
  4227 ;;  Day             1   11[COMMON] unsigned char 
  4228 ;; Auto vars:     Size  Location     Type
  4229 ;;  Date            1   12[COMMON] unsigned char 
  4230 ;; Return value:  Size  Location     Type
  4231 ;;		None               void
  4232 ;; Registers used:
  4233 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4234 ;; Tracked objects:
  4235 ;;		On entry : 0/0
  4236 ;;		On exit  : 0/0
  4237 ;;		Unchanged: 0/0
  4238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4239 ;;      Params:         3       0       0       0       0
  4240 ;;      Locals:         1       0       0       0       0
  4241 ;;      Temps:          0       8       0       0       0
  4242 ;;      Totals:         4       8       0       0       0
  4243 ;;Total ram usage:       12 bytes
  4244 ;; Hardware stack levels used:    1
  4245 ;; Hardware stack levels required when called:    2
  4246 ;; This function calls:
  4247 ;;		_Write_Bytes_To_DS1307_RTC
  4248 ;;		___awdiv
  4249 ;;		___awmod
  4250 ;; This function is called by:
  4251 ;;		_Settings
  4252 ;; This function uses a non-reentrant model
  4253 ;;
  4254                           
  4255                           
  4256                           ;psect for function _Set_DS1307_RTC_Date
  4257  15FD                     _Set_DS1307_RTC_Date:	
  4258                           
  4259                           ;incstack = 0
  4260                           ; Regs used in _Set_DS1307_RTC_Date: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4261                           ;Set_DS1307_RTC_Date@Date stored from wreg
  4262  15FD  00FC               	movwf	Set_DS1307_RTC_Date@Date
  4263                           
  4264                           ;DS1307.c: 191: pRTCArray[0] = (((unsigned char)(Day/10))<<4)|((unsigned char)(Day%10));
  4265  15FE  300A               	movlw	10
  4266  15FF  00F0               	movwf	___awmod@divisor
  4267  1600  3000               	movlw	0
  4268  1601  00F1               	movwf	___awmod@divisor+1
  4269  1602  087B               	movf	Set_DS1307_RTC_Date@Day,w
  4270  1603  1283               	bcf	3,5	;RP0=0, select bank0
  4271  1604  1303               	bcf	3,6	;RP1=0, select bank0
  4272  1605  00A0               	movwf	??_Set_DS1307_RTC_Date
  4273  1606  01A1               	clrf	??_Set_DS1307_RTC_Date+1
  4274  1607  0820               	movf	??_Set_DS1307_RTC_Date,w
  4275  1608  00F2               	movwf	___awmod@dividend
  4276  1609  0821               	movf	??_Set_DS1307_RTC_Date+1,w
  4277  160A  00F3               	movwf	___awmod@dividend+1
  4278  160B  160A  158A  27B5  160A  118A  	fcall	___awmod
  4279  1610  0870               	movf	?___awmod,w
  4280  1611  1283               	bcf	3,5	;RP0=0, select bank0
  4281  1612  1303               	bcf	3,6	;RP1=0, select bank0
  4282  1613  00A2               	movwf	??_Set_DS1307_RTC_Date+2
  4283  1614  0871               	movf	?___awmod+1,w
  4284  1615  00A3               	movwf	??_Set_DS1307_RTC_Date+3
  4285  1616  300A               	movlw	10
  4286  1617  00F0               	movwf	___awdiv@divisor
  4287  1618  3000               	movlw	0
  4288  1619  00F1               	movwf	___awdiv@divisor+1
  4289  161A  087B               	movf	Set_DS1307_RTC_Date@Day,w
  4290  161B  00A4               	movwf	??_Set_DS1307_RTC_Date+4
  4291  161C  01A5               	clrf	??_Set_DS1307_RTC_Date+5
  4292  161D  0824               	movf	??_Set_DS1307_RTC_Date+4,w
  4293  161E  00F2               	movwf	___awdiv@dividend
  4294  161F  0825               	movf	??_Set_DS1307_RTC_Date+5,w
  4295  1620  00F3               	movwf	___awdiv@dividend+1
  4296  1621  160A  118A  200F  160A  118A  	fcall	___awdiv
  4297  1626  0870               	movf	?___awdiv,w
  4298  1627  1283               	bcf	3,5	;RP0=0, select bank0
  4299  1628  1303               	bcf	3,6	;RP1=0, select bank0
  4300  1629  00A6               	movwf	??_Set_DS1307_RTC_Date+6
  4301  162A  3003               	movlw	3
  4302  162B                     u3675:	
  4303  162B  1003               	clrc
  4304  162C  0DA6               	rlf	??_Set_DS1307_RTC_Date+6,f
  4305  162D  3EFF               	addlw	-1
  4306  162E  1D03               	skipz
  4307  162F  2E2B               	goto	u3675
  4308  1630  1003               	clrc
  4309  1631  0D26               	rlf	??_Set_DS1307_RTC_Date+6,w
  4310  1632  0422               	iorwf	??_Set_DS1307_RTC_Date+2,w
  4311  1633  00A7               	movwf	??_Set_DS1307_RTC_Date+7
  4312  1634  0827               	movf	??_Set_DS1307_RTC_Date+7,w
  4313  1635  00EA               	movwf	_pRTCArray
  4314                           
  4315                           ;DS1307.c: 192: pRTCArray[1] = (((unsigned char)(Date/10))<<4)|((unsigned char)(Date%10)
      +                          );
  4316  1636  300A               	movlw	10
  4317  1637  00F0               	movwf	___awmod@divisor
  4318  1638  3000               	movlw	0
  4319  1639  00F1               	movwf	___awmod@divisor+1
  4320  163A  087C               	movf	Set_DS1307_RTC_Date@Date,w
  4321  163B  00A0               	movwf	??_Set_DS1307_RTC_Date
  4322  163C  01A1               	clrf	??_Set_DS1307_RTC_Date+1
  4323  163D  0820               	movf	??_Set_DS1307_RTC_Date,w
  4324  163E  00F2               	movwf	___awmod@dividend
  4325  163F  0821               	movf	??_Set_DS1307_RTC_Date+1,w
  4326  1640  00F3               	movwf	___awmod@dividend+1
  4327  1641  160A  158A  27B5  160A  118A  	fcall	___awmod
  4328  1646  0870               	movf	?___awmod,w
  4329  1647  1283               	bcf	3,5	;RP0=0, select bank0
  4330  1648  1303               	bcf	3,6	;RP1=0, select bank0
  4331  1649  00A2               	movwf	??_Set_DS1307_RTC_Date+2
  4332  164A  0871               	movf	?___awmod+1,w
  4333  164B  00A3               	movwf	??_Set_DS1307_RTC_Date+3
  4334  164C  300A               	movlw	10
  4335  164D  00F0               	movwf	___awdiv@divisor
  4336  164E  3000               	movlw	0
  4337  164F  00F1               	movwf	___awdiv@divisor+1
  4338  1650  087C               	movf	Set_DS1307_RTC_Date@Date,w
  4339  1651  00A4               	movwf	??_Set_DS1307_RTC_Date+4
  4340  1652  01A5               	clrf	??_Set_DS1307_RTC_Date+5
  4341  1653  0824               	movf	??_Set_DS1307_RTC_Date+4,w
  4342  1654  00F2               	movwf	___awdiv@dividend
  4343  1655  0825               	movf	??_Set_DS1307_RTC_Date+5,w
  4344  1656  00F3               	movwf	___awdiv@dividend+1
  4345  1657  160A  118A  200F  160A  118A  	fcall	___awdiv
  4346  165C  0870               	movf	?___awdiv,w
  4347  165D  1283               	bcf	3,5	;RP0=0, select bank0
  4348  165E  1303               	bcf	3,6	;RP1=0, select bank0
  4349  165F  00A6               	movwf	??_Set_DS1307_RTC_Date+6
  4350  1660  3003               	movlw	3
  4351  1661                     u3685:	
  4352  1661  1003               	clrc
  4353  1662  0DA6               	rlf	??_Set_DS1307_RTC_Date+6,f
  4354  1663  3EFF               	addlw	-1
  4355  1664  1D03               	skipz
  4356  1665  2E61               	goto	u3685
  4357  1666  1003               	clrc
  4358  1667  0D26               	rlf	??_Set_DS1307_RTC_Date+6,w
  4359  1668  0422               	iorwf	??_Set_DS1307_RTC_Date+2,w
  4360  1669  00A7               	movwf	??_Set_DS1307_RTC_Date+7
  4361  166A  0827               	movf	??_Set_DS1307_RTC_Date+7,w
  4362  166B  00EB               	movwf	_pRTCArray+1
  4363                           
  4364                           ;DS1307.c: 193: pRTCArray[2] = (((unsigned char)(Month/10))<<4)|((unsigned char)(Month%1
      +                          0));
  4365  166C  300A               	movlw	10
  4366  166D  00F0               	movwf	___awmod@divisor
  4367  166E  3000               	movlw	0
  4368  166F  00F1               	movwf	___awmod@divisor+1
  4369  1670  0879               	movf	Set_DS1307_RTC_Date@Month,w
  4370  1671  00A0               	movwf	??_Set_DS1307_RTC_Date
  4371  1672  01A1               	clrf	??_Set_DS1307_RTC_Date+1
  4372  1673  0820               	movf	??_Set_DS1307_RTC_Date,w
  4373  1674  00F2               	movwf	___awmod@dividend
  4374  1675  0821               	movf	??_Set_DS1307_RTC_Date+1,w
  4375  1676  00F3               	movwf	___awmod@dividend+1
  4376  1677  160A  158A  27B5  160A  118A  	fcall	___awmod
  4377  167C  0870               	movf	?___awmod,w
  4378  167D  1283               	bcf	3,5	;RP0=0, select bank0
  4379  167E  1303               	bcf	3,6	;RP1=0, select bank0
  4380  167F  00A2               	movwf	??_Set_DS1307_RTC_Date+2
  4381  1680  0871               	movf	?___awmod+1,w
  4382  1681  00A3               	movwf	??_Set_DS1307_RTC_Date+3
  4383  1682  300A               	movlw	10
  4384  1683  00F0               	movwf	___awdiv@divisor
  4385  1684  3000               	movlw	0
  4386  1685  00F1               	movwf	___awdiv@divisor+1
  4387  1686  0879               	movf	Set_DS1307_RTC_Date@Month,w
  4388  1687  00A4               	movwf	??_Set_DS1307_RTC_Date+4
  4389  1688  01A5               	clrf	??_Set_DS1307_RTC_Date+5
  4390  1689  0824               	movf	??_Set_DS1307_RTC_Date+4,w
  4391  168A  00F2               	movwf	___awdiv@dividend
  4392  168B  0825               	movf	??_Set_DS1307_RTC_Date+5,w
  4393  168C  00F3               	movwf	___awdiv@dividend+1
  4394  168D  160A  118A  200F  160A  118A  	fcall	___awdiv
  4395  1692  0870               	movf	?___awdiv,w
  4396  1693  1283               	bcf	3,5	;RP0=0, select bank0
  4397  1694  1303               	bcf	3,6	;RP1=0, select bank0
  4398  1695  00A6               	movwf	??_Set_DS1307_RTC_Date+6
  4399  1696  3003               	movlw	3
  4400  1697                     u3695:	
  4401  1697  1003               	clrc
  4402  1698  0DA6               	rlf	??_Set_DS1307_RTC_Date+6,f
  4403  1699  3EFF               	addlw	-1
  4404  169A  1D03               	skipz
  4405  169B  2E97               	goto	u3695
  4406  169C  1003               	clrc
  4407  169D  0D26               	rlf	??_Set_DS1307_RTC_Date+6,w
  4408  169E  0422               	iorwf	??_Set_DS1307_RTC_Date+2,w
  4409  169F  00A7               	movwf	??_Set_DS1307_RTC_Date+7
  4410  16A0  0827               	movf	??_Set_DS1307_RTC_Date+7,w
  4411  16A1  00EC               	movwf	_pRTCArray+2
  4412                           
  4413                           ;DS1307.c: 194: pRTCArray[3] = (((unsigned char)(Year/10))<<4)|((unsigned char)(Year%10)
      +                          );
  4414  16A2  300A               	movlw	10
  4415  16A3  00F0               	movwf	___awmod@divisor
  4416  16A4  3000               	movlw	0
  4417  16A5  00F1               	movwf	___awmod@divisor+1
  4418  16A6  087A               	movf	Set_DS1307_RTC_Date@Year,w
  4419  16A7  00A0               	movwf	??_Set_DS1307_RTC_Date
  4420  16A8  01A1               	clrf	??_Set_DS1307_RTC_Date+1
  4421  16A9  0820               	movf	??_Set_DS1307_RTC_Date,w
  4422  16AA  00F2               	movwf	___awmod@dividend
  4423  16AB  0821               	movf	??_Set_DS1307_RTC_Date+1,w
  4424  16AC  00F3               	movwf	___awmod@dividend+1
  4425  16AD  160A  158A  27B5  160A  118A  	fcall	___awmod
  4426  16B2  0870               	movf	?___awmod,w
  4427  16B3  1283               	bcf	3,5	;RP0=0, select bank0
  4428  16B4  1303               	bcf	3,6	;RP1=0, select bank0
  4429  16B5  00A2               	movwf	??_Set_DS1307_RTC_Date+2
  4430  16B6  0871               	movf	?___awmod+1,w
  4431  16B7  00A3               	movwf	??_Set_DS1307_RTC_Date+3
  4432  16B8  300A               	movlw	10
  4433  16B9  00F0               	movwf	___awdiv@divisor
  4434  16BA  3000               	movlw	0
  4435  16BB  00F1               	movwf	___awdiv@divisor+1
  4436  16BC  087A               	movf	Set_DS1307_RTC_Date@Year,w
  4437  16BD  00A4               	movwf	??_Set_DS1307_RTC_Date+4
  4438  16BE  01A5               	clrf	??_Set_DS1307_RTC_Date+5
  4439  16BF  0824               	movf	??_Set_DS1307_RTC_Date+4,w
  4440  16C0  00F2               	movwf	___awdiv@dividend
  4441  16C1  0825               	movf	??_Set_DS1307_RTC_Date+5,w
  4442  16C2  00F3               	movwf	___awdiv@dividend+1
  4443  16C3  160A  118A  200F  160A  118A  	fcall	___awdiv
  4444  16C8  0870               	movf	?___awdiv,w
  4445  16C9  1283               	bcf	3,5	;RP0=0, select bank0
  4446  16CA  1303               	bcf	3,6	;RP1=0, select bank0
  4447  16CB  00A6               	movwf	??_Set_DS1307_RTC_Date+6
  4448  16CC  3003               	movlw	3
  4449  16CD                     u3705:	
  4450  16CD  1003               	clrc
  4451  16CE  0DA6               	rlf	??_Set_DS1307_RTC_Date+6,f
  4452  16CF  3EFF               	addlw	-1
  4453  16D0  1D03               	skipz
  4454  16D1  2ECD               	goto	u3705
  4455  16D2  1003               	clrc
  4456  16D3  0D26               	rlf	??_Set_DS1307_RTC_Date+6,w
  4457  16D4  0422               	iorwf	??_Set_DS1307_RTC_Date+2,w
  4458  16D5  00A7               	movwf	??_Set_DS1307_RTC_Date+7
  4459  16D6  0827               	movf	??_Set_DS1307_RTC_Date+7,w
  4460  16D7  00ED               	movwf	_pRTCArray+3
  4461                           
  4462                           ;DS1307.c: 197: Write_Bytes_To_DS1307_RTC(0x03, pRTCArray, 4);
  4463  16D8  306A               	movlw	(low (_pRTCArray| 0))& (0+255)
  4464  16D9  00A0               	movwf	??_Set_DS1307_RTC_Date
  4465  16DA  0820               	movf	??_Set_DS1307_RTC_Date,w
  4466  16DB  00F1               	movwf	Write_Bytes_To_DS1307_RTC@pData
  4467  16DC  3004               	movlw	4
  4468  16DD  00A1               	movwf	??_Set_DS1307_RTC_Date+1
  4469  16DE  0821               	movf	??_Set_DS1307_RTC_Date+1,w
  4470  16DF  00F2               	movwf	Write_Bytes_To_DS1307_RTC@NoOfBytes
  4471  16E0  3003               	movlw	3
  4472  16E1  160A  158A  25BF   	fcall	_Write_Bytes_To_DS1307_RTC
  4473  16E4  0008               	return
  4474  16E5                     __end_of_Set_DS1307_RTC_Date:	
  4475                           
  4476                           	psect	text9
  4477  1DBF                     __ptext9:	
  4478 ;; *************** function _Write_Bytes_To_DS1307_RTC *****************
  4479 ;; Defined at:
  4480 ;;		line 56 in file "DS1307.c"
  4481 ;; Parameters:    Size  Location     Type
  4482 ;;  Address         1    wreg     unsigned char 
  4483 ;;  pData           1    1[COMMON] PTR unsigned char 
  4484 ;;		 -> pRTCArray(4), 
  4485 ;;  NoOfBytes       1    2[COMMON] unsigned char 
  4486 ;; Auto vars:     Size  Location     Type
  4487 ;;  Address         1    5[COMMON] unsigned char 
  4488 ;;  i               2    6[COMMON] unsigned int 
  4489 ;; Return value:  Size  Location     Type
  4490 ;;		None               void
  4491 ;; Registers used:
  4492 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4493 ;; Tracked objects:
  4494 ;;		On entry : 0/0
  4495 ;;		On exit  : 0/0
  4496 ;;		Unchanged: 0/0
  4497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4498 ;;      Params:         2       0       0       0       0
  4499 ;;      Locals:         3       0       0       0       0
  4500 ;;      Temps:          2       0       0       0       0
  4501 ;;      Totals:         7       0       0       0       0
  4502 ;;Total ram usage:        7 bytes
  4503 ;; Hardware stack levels used:    1
  4504 ;; Hardware stack levels required when called:    1
  4505 ;; This function calls:
  4506 ;;		_I2C_Start
  4507 ;;		_I2C_Stop
  4508 ;;		_I2C_Write_Byte
  4509 ;; This function is called by:
  4510 ;;		_Set_DS1307_RTC_Time
  4511 ;;		_Set_DS1307_RTC_Date
  4512 ;; This function uses a non-reentrant model
  4513 ;;
  4514                           
  4515                           
  4516                           ;psect for function _Write_Bytes_To_DS1307_RTC
  4517  1DBF                     _Write_Bytes_To_DS1307_RTC:	
  4518                           
  4519                           ;incstack = 0
  4520                           ; Regs used in _Write_Bytes_To_DS1307_RTC: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4521                           ;Write_Bytes_To_DS1307_RTC@Address stored from wreg
  4522  1DBF  00F5               	movwf	Write_Bytes_To_DS1307_RTC@Address
  4523  1DC0                     L2:	
  4524                           
  4525                           ;DS1307.c: 58: unsigned int i;
  4526                           ;DS1307.c: 60: I2C_Start();
  4527  1DC0  160A  158A  22F5  160A  158A  	fcall	_I2C_Start
  4528                           
  4529                           ;DS1307.c: 63: while(I2C_Write_Byte(0xD0 + 0) == 1)
  4530  1DC5  30D0               	movlw	208
  4531  1DC6  160A  158A  2365  160A  158A  	fcall	_I2C_Write_Byte
  4532  1DCB  1803               	btfsc	3,0
  4533  1DCC  2DC0               	goto	L2
  4534                           
  4535                           ;DS1307.c: 66: I2C_Write_Byte(Address);
  4536                           
  4537                           ;DS1307.c: 64: { I2C_Start(); }
  4538  1DCD  0875               	movf	Write_Bytes_To_DS1307_RTC@Address,w
  4539  1DCE  160A  158A  2365  160A  158A  	fcall	_I2C_Write_Byte
  4540                           
  4541                           ;DS1307.c: 68: for(i=0;i<NoOfBytes;i++)
  4542  1DD3  01F6               	clrf	Write_Bytes_To_DS1307_RTC@i
  4543  1DD4  01F7               	clrf	Write_Bytes_To_DS1307_RTC@i+1
  4544  1DD5                     l3176:	
  4545  1DD5  0872               	movf	Write_Bytes_To_DS1307_RTC@NoOfBytes,w
  4546  1DD6  00F3               	movwf	??_Write_Bytes_To_DS1307_RTC
  4547  1DD7  01F4               	clrf	??_Write_Bytes_To_DS1307_RTC+1
  4548  1DD8  0874               	movf	??_Write_Bytes_To_DS1307_RTC+1,w
  4549  1DD9  0277               	subwf	Write_Bytes_To_DS1307_RTC@i+1,w
  4550  1DDA  1D03               	skipz
  4551  1DDB  2DDE               	goto	u3025
  4552  1DDC  0873               	movf	??_Write_Bytes_To_DS1307_RTC,w
  4553  1DDD  0276               	subwf	Write_Bytes_To_DS1307_RTC@i,w
  4554  1DDE                     u3025:	
  4555  1DDE  1803               	btfsc	3,0
  4556  1DDF  2DF3               	goto	l3178
  4557                           
  4558                           ;DS1307.c: 69: I2C_Write_Byte(pData[i]);
  4559  1DE0  0876               	movf	Write_Bytes_To_DS1307_RTC@i,w
  4560  1DE1  0771               	addwf	Write_Bytes_To_DS1307_RTC@pData,w
  4561  1DE2  00F3               	movwf	??_Write_Bytes_To_DS1307_RTC
  4562  1DE3  0873               	movf	??_Write_Bytes_To_DS1307_RTC,w
  4563  1DE4  0084               	movwf	4
  4564  1DE5  1383               	bcf	3,7	;select IRP bank0
  4565  1DE6  0800               	movf	0,w
  4566  1DE7  160A  158A  2365  160A  158A  	fcall	_I2C_Write_Byte
  4567  1DEC  3001               	movlw	1
  4568  1DED  07F6               	addwf	Write_Bytes_To_DS1307_RTC@i,f
  4569  1DEE  1803               	skipnc
  4570  1DEF  0AF7               	incf	Write_Bytes_To_DS1307_RTC@i+1,f
  4571  1DF0  3000               	movlw	0
  4572  1DF1  07F7               	addwf	Write_Bytes_To_DS1307_RTC@i+1,f
  4573  1DF2  2DD5               	goto	l3176
  4574  1DF3                     l3178:	
  4575                           
  4576                           ;DS1307.c: 71: I2C_Stop();
  4577  1DF3  160A  158A  22FD   	fcall	_I2C_Stop
  4578  1DF6  0008               	return
  4579  1DF7                     __end_of_Write_Bytes_To_DS1307_RTC:	
  4580                           
  4581                           	psect	text10
  4582  14A0                     __ptext10:	
  4583 ;; *************** function _Get_DS1307_RTC_Time *****************
  4584 ;; Defined at:
  4585 ;;		line 145 in file "DS1307.c"
  4586 ;; Parameters:    Size  Location     Type
  4587 ;;		None
  4588 ;; Auto vars:     Size  Location     Type
  4589 ;;		None
  4590 ;; Return value:  Size  Location     Type
  4591 ;;                  1    wreg      PTR unsigned char 
  4592 ;; Registers used:
  4593 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4594 ;; Tracked objects:
  4595 ;;		On entry : 0/0
  4596 ;;		On exit  : 0/0
  4597 ;;		Unchanged: 0/0
  4598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4599 ;;      Params:         0       0       0       0       0
  4600 ;;      Locals:         0       0       0       0       0
  4601 ;;      Temps:          4       0       0       0       0
  4602 ;;      Totals:         4       0       0       0       0
  4603 ;;Total ram usage:        4 bytes
  4604 ;; Hardware stack levels used:    1
  4605 ;; Hardware stack levels required when called:    2
  4606 ;; This function calls:
  4607 ;;		_Read_Bytes_From_DS1307_RTC
  4608 ;;		___bmul
  4609 ;; This function is called by:
  4610 ;;		_Settings
  4611 ;; This function uses a non-reentrant model
  4612 ;;
  4613                           
  4614                           
  4615                           ;psect for function _Get_DS1307_RTC_Time
  4616  14A0                     _Get_DS1307_RTC_Time:	
  4617                           
  4618                           ;DS1307.c: 148: Read_Bytes_From_DS1307_RTC(0x00, pRTCArray, 3);
  4619                           
  4620                           ;incstack = 0
  4621                           ; Regs used in _Get_DS1307_RTC_Time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4622  14A0  306A               	movlw	(low (_pRTCArray| 0))& (0+255)
  4623  14A1  00F9               	movwf	??_Get_DS1307_RTC_Time
  4624  14A2  0879               	movf	??_Get_DS1307_RTC_Time,w
  4625  14A3  00F1               	movwf	Read_Bytes_From_DS1307_RTC@pData
  4626  14A4  3003               	movlw	3
  4627  14A5  00F2               	movwf	Read_Bytes_From_DS1307_RTC@NoOfBytes
  4628  14A6  3000               	movlw	0
  4629  14A7  00F3               	movwf	Read_Bytes_From_DS1307_RTC@NoOfBytes+1
  4630  14A8  3000               	movlw	0
  4631  14A9  160A  118A  2068  160A  118A  	fcall	_Read_Bytes_From_DS1307_RTC
  4632                           
  4633                           ;DS1307.c: 151: Temp = pRTCArray[0];
  4634  14AE  1283               	bcf	3,5	;RP0=0, select bank0
  4635  14AF  1303               	bcf	3,6	;RP1=0, select bank0
  4636  14B0  086A               	movf	_pRTCArray,w
  4637  14B1  00F9               	movwf	??_Get_DS1307_RTC_Time
  4638  14B2  0879               	movf	??_Get_DS1307_RTC_Time,w
  4639  14B3  00EE               	movwf	_Temp
  4640                           
  4641                           ;DS1307.c: 152: pRTCArray[0] = ((Temp&0x7F)>>4)*10 + (Temp&0x0F);
  4642  14B4  300F               	movlw	15
  4643  14B5  056E               	andwf	_Temp,w
  4644  14B6  00F9               	movwf	??_Get_DS1307_RTC_Time
  4645  14B7  300A               	movlw	10
  4646  14B8  00FA               	movwf	??_Get_DS1307_RTC_Time+1
  4647  14B9  087A               	movf	??_Get_DS1307_RTC_Time+1,w
  4648  14BA  00F0               	movwf	___bmul@multiplicand
  4649  14BB  086E               	movf	_Temp,w
  4650  14BC  00FB               	movwf	??_Get_DS1307_RTC_Time+2
  4651  14BD  3004               	movlw	4
  4652  14BE                     u3715:	
  4653  14BE  1003               	clrc
  4654  14BF  0CFB               	rrf	??_Get_DS1307_RTC_Time+2,f
  4655  14C0  3EFF               	addlw	-1
  4656  14C1  1D03               	skipz
  4657  14C2  2CBE               	goto	u3715
  4658  14C3  087B               	movf	??_Get_DS1307_RTC_Time+2,w
  4659  14C4  3907               	andlw	7
  4660  14C5  160A  158A  2375  160A  118A  	fcall	___bmul
  4661  14CA  0779               	addwf	??_Get_DS1307_RTC_Time,w
  4662  14CB  00FC               	movwf	??_Get_DS1307_RTC_Time+3
  4663  14CC  087C               	movf	??_Get_DS1307_RTC_Time+3,w
  4664  14CD  1283               	bcf	3,5	;RP0=0, select bank0
  4665  14CE  1303               	bcf	3,6	;RP1=0, select bank0
  4666  14CF  00EA               	movwf	_pRTCArray
  4667                           
  4668                           ;DS1307.c: 155: Temp = pRTCArray[1];
  4669  14D0  086B               	movf	_pRTCArray+1,w
  4670  14D1  00F9               	movwf	??_Get_DS1307_RTC_Time
  4671  14D2  0879               	movf	??_Get_DS1307_RTC_Time,w
  4672  14D3  00EE               	movwf	_Temp
  4673                           
  4674                           ;DS1307.c: 156: pRTCArray[1] = (Temp>>4)*10 + (Temp&0x0F);
  4675  14D4  300F               	movlw	15
  4676  14D5  056E               	andwf	_Temp,w
  4677  14D6  00F9               	movwf	??_Get_DS1307_RTC_Time
  4678  14D7  300A               	movlw	10
  4679  14D8  00FA               	movwf	??_Get_DS1307_RTC_Time+1
  4680  14D9  087A               	movf	??_Get_DS1307_RTC_Time+1,w
  4681  14DA  00F0               	movwf	___bmul@multiplicand
  4682  14DB  086E               	movf	_Temp,w
  4683  14DC  00FB               	movwf	??_Get_DS1307_RTC_Time+2
  4684  14DD  3004               	movlw	4
  4685  14DE                     u3725:	
  4686  14DE  1003               	clrc
  4687  14DF  0CFB               	rrf	??_Get_DS1307_RTC_Time+2,f
  4688  14E0  3EFF               	addlw	-1
  4689  14E1  1D03               	skipz
  4690  14E2  2CDE               	goto	u3725
  4691  14E3  087B               	movf	??_Get_DS1307_RTC_Time+2,w
  4692  14E4  160A  158A  2375  160A  118A  	fcall	___bmul
  4693  14E9  0779               	addwf	??_Get_DS1307_RTC_Time,w
  4694  14EA  00FC               	movwf	??_Get_DS1307_RTC_Time+3
  4695  14EB  087C               	movf	??_Get_DS1307_RTC_Time+3,w
  4696  14EC  1283               	bcf	3,5	;RP0=0, select bank0
  4697  14ED  1303               	bcf	3,6	;RP1=0, select bank0
  4698  14EE  00EB               	movwf	_pRTCArray+1
  4699                           
  4700                           ;DS1307.c: 159: if(pRTCArray[2]&0x40)
  4701  14EF  1F6C               	btfss	_pRTCArray+2,6
  4702  14F0  2D18               	goto	l3702
  4703                           
  4704                           ;DS1307.c: 160: {
  4705                           ;DS1307.c: 161: if(pRTCArray[2]&0x20)
  4706  14F1  1EEC               	btfss	_pRTCArray+2,5
  4707  14F2  2CF6               	goto	l3696
  4708                           
  4709                           ;DS1307.c: 162: pRTCArray[3] = 1;
  4710  14F3  01ED               	clrf	_pRTCArray+3
  4711  14F4  0AED               	incf	_pRTCArray+3,f
  4712  14F5  2CF7               	goto	l3698
  4713  14F6                     l3696:	
  4714                           
  4715                           ;DS1307.c: 163: else
  4716                           ;DS1307.c: 164: pRTCArray[3] = 0;
  4717  14F6  01ED               	clrf	_pRTCArray+3
  4718  14F7                     l3698:	
  4719                           
  4720                           ;DS1307.c: 166: Temp = pRTCArray[2];
  4721  14F7  086C               	movf	_pRTCArray+2,w
  4722  14F8  00F9               	movwf	??_Get_DS1307_RTC_Time
  4723  14F9  0879               	movf	??_Get_DS1307_RTC_Time,w
  4724  14FA  00EE               	movwf	_Temp
  4725                           
  4726                           ;DS1307.c: 167: pRTCArray[2] = ((Temp&0x1F)>>4)*10 + (Temp&0x0F);
  4727  14FB  300F               	movlw	15
  4728  14FC  056E               	andwf	_Temp,w
  4729  14FD  00F9               	movwf	??_Get_DS1307_RTC_Time
  4730  14FE  300A               	movlw	10
  4731  14FF  00FA               	movwf	??_Get_DS1307_RTC_Time+1
  4732  1500  087A               	movf	??_Get_DS1307_RTC_Time+1,w
  4733  1501  00F0               	movwf	___bmul@multiplicand
  4734  1502  086E               	movf	_Temp,w
  4735  1503  00FB               	movwf	??_Get_DS1307_RTC_Time+2
  4736  1504  3004               	movlw	4
  4737  1505                     u3755:	
  4738  1505  1003               	clrc
  4739  1506  0CFB               	rrf	??_Get_DS1307_RTC_Time+2,f
  4740  1507  3EFF               	addlw	-1
  4741  1508  1D03               	skipz
  4742  1509  2D05               	goto	u3755
  4743  150A  087B               	movf	??_Get_DS1307_RTC_Time+2,w
  4744  150B  3901               	andlw	1
  4745  150C  160A  158A  2375  160A  118A  	fcall	___bmul
  4746  1511  0779               	addwf	??_Get_DS1307_RTC_Time,w
  4747  1512  00FC               	movwf	??_Get_DS1307_RTC_Time+3
  4748  1513  087C               	movf	??_Get_DS1307_RTC_Time+3,w
  4749  1514  1283               	bcf	3,5	;RP0=0, select bank0
  4750  1515  1303               	bcf	3,6	;RP1=0, select bank0
  4751  1516  00EC               	movwf	_pRTCArray+2
  4752                           
  4753                           ;DS1307.c: 168: }
  4754  1517  2D39               	goto	l3708
  4755  1518                     l3702:	
  4756                           
  4757                           ;DS1307.c: 169: else
  4758                           ;DS1307.c: 170: {
  4759                           ;DS1307.c: 171: Temp = pRTCArray[2];
  4760  1518  086C               	movf	_pRTCArray+2,w
  4761  1519  00F9               	movwf	??_Get_DS1307_RTC_Time
  4762  151A  0879               	movf	??_Get_DS1307_RTC_Time,w
  4763  151B  00EE               	movwf	_Temp
  4764                           
  4765                           ;DS1307.c: 172: pRTCArray[2] = (Temp>>4)*10 + (Temp&0x0F);
  4766  151C  300F               	movlw	15
  4767  151D  056E               	andwf	_Temp,w
  4768  151E  00F9               	movwf	??_Get_DS1307_RTC_Time
  4769  151F  300A               	movlw	10
  4770  1520  00FA               	movwf	??_Get_DS1307_RTC_Time+1
  4771  1521  087A               	movf	??_Get_DS1307_RTC_Time+1,w
  4772  1522  00F0               	movwf	___bmul@multiplicand
  4773  1523  086E               	movf	_Temp,w
  4774  1524  00FB               	movwf	??_Get_DS1307_RTC_Time+2
  4775  1525  3004               	movlw	4
  4776  1526                     u3765:	
  4777  1526  1003               	clrc
  4778  1527  0CFB               	rrf	??_Get_DS1307_RTC_Time+2,f
  4779  1528  3EFF               	addlw	-1
  4780  1529  1D03               	skipz
  4781  152A  2D26               	goto	u3765
  4782  152B  087B               	movf	??_Get_DS1307_RTC_Time+2,w
  4783  152C  160A  158A  2375   	fcall	___bmul
  4784  152F  0779               	addwf	??_Get_DS1307_RTC_Time,w
  4785  1530  00FC               	movwf	??_Get_DS1307_RTC_Time+3
  4786  1531  087C               	movf	??_Get_DS1307_RTC_Time+3,w
  4787  1532  1283               	bcf	3,5	;RP0=0, select bank0
  4788  1533  1303               	bcf	3,6	;RP1=0, select bank0
  4789  1534  00EC               	movwf	_pRTCArray+2
  4790                           
  4791                           ;DS1307.c: 173: pRTCArray[3] = 2;
  4792  1535  3002               	movlw	2
  4793  1536  00F9               	movwf	??_Get_DS1307_RTC_Time
  4794  1537  0879               	movf	??_Get_DS1307_RTC_Time,w
  4795  1538  00ED               	movwf	_pRTCArray+3
  4796  1539                     l3708:	
  4797                           
  4798                           ;DS1307.c: 174: }
  4799                           ;DS1307.c: 176: return pRTCArray;
  4800  1539  306A               	movlw	(low (_pRTCArray| 0))& (0+255)
  4801  153A  0008               	return
  4802  153B                     __end_of_Get_DS1307_RTC_Time:	
  4803                           
  4804                           	psect	text11
  4805  1189                     __ptext11:	
  4806 ;; *************** function _Get_DS1307_RTC_Date *****************
  4807 ;; Defined at:
  4808 ;;		line 209 in file "DS1307.c"
  4809 ;; Parameters:    Size  Location     Type
  4810 ;;		None
  4811 ;; Auto vars:     Size  Location     Type
  4812 ;;		None
  4813 ;; Return value:  Size  Location     Type
  4814 ;;                  1    wreg      PTR unsigned char 
  4815 ;; Registers used:
  4816 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4817 ;; Tracked objects:
  4818 ;;		On entry : 0/0
  4819 ;;		On exit  : 0/0
  4820 ;;		Unchanged: 0/0
  4821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4822 ;;      Params:         0       0       0       0       0
  4823 ;;      Locals:         0       0       0       0       0
  4824 ;;      Temps:          4       0       0       0       0
  4825 ;;      Totals:         4       0       0       0       0
  4826 ;;Total ram usage:        4 bytes
  4827 ;; Hardware stack levels used:    1
  4828 ;; Hardware stack levels required when called:    2
  4829 ;; This function calls:
  4830 ;;		_Read_Bytes_From_DS1307_RTC
  4831 ;;		___bmul
  4832 ;; This function is called by:
  4833 ;;		_Settings
  4834 ;; This function uses a non-reentrant model
  4835 ;;
  4836                           
  4837                           
  4838                           ;psect for function _Get_DS1307_RTC_Date
  4839  1189                     _Get_DS1307_RTC_Date:	
  4840                           
  4841                           ;DS1307.c: 212: Read_Bytes_From_DS1307_RTC(0x03, pRTCArray, 4);
  4842                           
  4843                           ;incstack = 0
  4844                           ; Regs used in _Get_DS1307_RTC_Date: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4845  1189  306A               	movlw	(low (_pRTCArray| 0))& (0+255)
  4846  118A  00F9               	movwf	??_Get_DS1307_RTC_Date
  4847  118B  0879               	movf	??_Get_DS1307_RTC_Date,w
  4848  118C  00F1               	movwf	Read_Bytes_From_DS1307_RTC@pData
  4849  118D  3004               	movlw	4
  4850  118E  00F2               	movwf	Read_Bytes_From_DS1307_RTC@NoOfBytes
  4851  118F  3000               	movlw	0
  4852  1190  00F3               	movwf	Read_Bytes_From_DS1307_RTC@NoOfBytes+1
  4853  1191  3003               	movlw	3
  4854  1192  160A  118A  2068  160A  118A  	fcall	_Read_Bytes_From_DS1307_RTC
  4855                           
  4856                           ;DS1307.c: 215: Temp = pRTCArray[1];
  4857  1197  1283               	bcf	3,5	;RP0=0, select bank0
  4858  1198  1303               	bcf	3,6	;RP1=0, select bank0
  4859  1199  086B               	movf	_pRTCArray+1,w
  4860  119A  00F9               	movwf	??_Get_DS1307_RTC_Date
  4861  119B  0879               	movf	??_Get_DS1307_RTC_Date,w
  4862  119C  00EE               	movwf	_Temp
  4863                           
  4864                           ;DS1307.c: 216: pRTCArray[1] = (Temp>>4)*10 + (Temp&0x0F);
  4865  119D  300F               	movlw	15
  4866  119E  056E               	andwf	_Temp,w
  4867  119F  00F9               	movwf	??_Get_DS1307_RTC_Date
  4868  11A0  300A               	movlw	10
  4869  11A1  00FA               	movwf	??_Get_DS1307_RTC_Date+1
  4870  11A2  087A               	movf	??_Get_DS1307_RTC_Date+1,w
  4871  11A3  00F0               	movwf	___bmul@multiplicand
  4872  11A4  086E               	movf	_Temp,w
  4873  11A5  00FB               	movwf	??_Get_DS1307_RTC_Date+2
  4874  11A6  3004               	movlw	4
  4875  11A7                     u3775:	
  4876  11A7  1003               	clrc
  4877  11A8  0CFB               	rrf	??_Get_DS1307_RTC_Date+2,f
  4878  11A9  3EFF               	addlw	-1
  4879  11AA  1D03               	skipz
  4880  11AB  29A7               	goto	u3775
  4881  11AC  087B               	movf	??_Get_DS1307_RTC_Date+2,w
  4882  11AD  160A  158A  2375  160A  118A  	fcall	___bmul
  4883  11B2  0779               	addwf	??_Get_DS1307_RTC_Date,w
  4884  11B3  00FC               	movwf	??_Get_DS1307_RTC_Date+3
  4885  11B4  087C               	movf	??_Get_DS1307_RTC_Date+3,w
  4886  11B5  1283               	bcf	3,5	;RP0=0, select bank0
  4887  11B6  1303               	bcf	3,6	;RP1=0, select bank0
  4888  11B7  00EB               	movwf	_pRTCArray+1
  4889                           
  4890                           ;DS1307.c: 219: Temp = pRTCArray[2];
  4891  11B8  086C               	movf	_pRTCArray+2,w
  4892  11B9  00F9               	movwf	??_Get_DS1307_RTC_Date
  4893  11BA  0879               	movf	??_Get_DS1307_RTC_Date,w
  4894  11BB  00EE               	movwf	_Temp
  4895                           
  4896                           ;DS1307.c: 220: pRTCArray[2] = (Temp>>4)*10 + (Temp&0x0F);
  4897  11BC  300F               	movlw	15
  4898  11BD  056E               	andwf	_Temp,w
  4899  11BE  00F9               	movwf	??_Get_DS1307_RTC_Date
  4900  11BF  300A               	movlw	10
  4901  11C0  00FA               	movwf	??_Get_DS1307_RTC_Date+1
  4902  11C1  087A               	movf	??_Get_DS1307_RTC_Date+1,w
  4903  11C2  00F0               	movwf	___bmul@multiplicand
  4904  11C3  086E               	movf	_Temp,w
  4905  11C4  00FB               	movwf	??_Get_DS1307_RTC_Date+2
  4906  11C5  3004               	movlw	4
  4907  11C6                     u3785:	
  4908  11C6  1003               	clrc
  4909  11C7  0CFB               	rrf	??_Get_DS1307_RTC_Date+2,f
  4910  11C8  3EFF               	addlw	-1
  4911  11C9  1D03               	skipz
  4912  11CA  29C6               	goto	u3785
  4913  11CB  087B               	movf	??_Get_DS1307_RTC_Date+2,w
  4914  11CC  160A  158A  2375  160A  118A  	fcall	___bmul
  4915  11D1  0779               	addwf	??_Get_DS1307_RTC_Date,w
  4916  11D2  00FC               	movwf	??_Get_DS1307_RTC_Date+3
  4917  11D3  087C               	movf	??_Get_DS1307_RTC_Date+3,w
  4918  11D4  1283               	bcf	3,5	;RP0=0, select bank0
  4919  11D5  1303               	bcf	3,6	;RP1=0, select bank0
  4920  11D6  00EC               	movwf	_pRTCArray+2
  4921                           
  4922                           ;DS1307.c: 223: Temp = pRTCArray[3];
  4923  11D7  086D               	movf	_pRTCArray+3,w
  4924  11D8  00F9               	movwf	??_Get_DS1307_RTC_Date
  4925  11D9  0879               	movf	??_Get_DS1307_RTC_Date,w
  4926  11DA  00EE               	movwf	_Temp
  4927                           
  4928                           ;DS1307.c: 224: pRTCArray[3] = (Temp>>4)*10 + (Temp&0x0F);
  4929  11DB  300F               	movlw	15
  4930  11DC  056E               	andwf	_Temp,w
  4931  11DD  00F9               	movwf	??_Get_DS1307_RTC_Date
  4932  11DE  300A               	movlw	10
  4933  11DF  00FA               	movwf	??_Get_DS1307_RTC_Date+1
  4934  11E0  087A               	movf	??_Get_DS1307_RTC_Date+1,w
  4935  11E1  00F0               	movwf	___bmul@multiplicand
  4936  11E2  086E               	movf	_Temp,w
  4937  11E3  00FB               	movwf	??_Get_DS1307_RTC_Date+2
  4938  11E4  3004               	movlw	4
  4939  11E5                     u3795:	
  4940  11E5  1003               	clrc
  4941  11E6  0CFB               	rrf	??_Get_DS1307_RTC_Date+2,f
  4942  11E7  3EFF               	addlw	-1
  4943  11E8  1D03               	skipz
  4944  11E9  29E5               	goto	u3795
  4945  11EA  087B               	movf	??_Get_DS1307_RTC_Date+2,w
  4946  11EB  160A  158A  2375   	fcall	___bmul
  4947  11EE  0779               	addwf	??_Get_DS1307_RTC_Date,w
  4948  11EF  00FC               	movwf	??_Get_DS1307_RTC_Date+3
  4949  11F0  087C               	movf	??_Get_DS1307_RTC_Date+3,w
  4950  11F1  1283               	bcf	3,5	;RP0=0, select bank0
  4951  11F2  1303               	bcf	3,6	;RP1=0, select bank0
  4952  11F3  00ED               	movwf	_pRTCArray+3
  4953                           
  4954                           ;DS1307.c: 226: return pRTCArray;
  4955  11F4  306A               	movlw	(low (_pRTCArray| 0))& (0+255)
  4956  11F5  0008               	return
  4957  11F6                     __end_of_Get_DS1307_RTC_Date:	
  4958                           
  4959                           	psect	text12
  4960  1B75                     __ptext12:	
  4961 ;; *************** function ___bmul *****************
  4962 ;; Defined at:
  4963 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul8.c"
  4964 ;; Parameters:    Size  Location     Type
  4965 ;;  multiplier      1    wreg     unsigned char 
  4966 ;;  multiplicand    1    0[COMMON] unsigned char 
  4967 ;; Auto vars:     Size  Location     Type
  4968 ;;  multiplier      1    3[COMMON] unsigned char 
  4969 ;;  product         1    2[COMMON] unsigned char 
  4970 ;; Return value:  Size  Location     Type
  4971 ;;                  1    wreg      unsigned char 
  4972 ;; Registers used:
  4973 ;;		wreg, status,2, status,0
  4974 ;; Tracked objects:
  4975 ;;		On entry : 0/0
  4976 ;;		On exit  : 0/0
  4977 ;;		Unchanged: 0/0
  4978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4979 ;;      Params:         1       0       0       0       0
  4980 ;;      Locals:         2       0       0       0       0
  4981 ;;      Temps:          1       0       0       0       0
  4982 ;;      Totals:         4       0       0       0       0
  4983 ;;Total ram usage:        4 bytes
  4984 ;; Hardware stack levels used:    1
  4985 ;; This function calls:
  4986 ;;		Nothing
  4987 ;; This function is called by:
  4988 ;;		_Get_DS1307_RTC_Time
  4989 ;;		_Get_DS1307_RTC_Date
  4990 ;; This function uses a non-reentrant model
  4991 ;;
  4992                           
  4993                           
  4994                           ;psect for function ___bmul
  4995  1B75                     ___bmul:	
  4996                           
  4997                           ;incstack = 0
  4998                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4999                           ;___bmul@multiplier stored from wreg
  5000  1B75  00F3               	movwf	___bmul@multiplier
  5001  1B76  01F2               	clrf	___bmul@product
  5002  1B77                     l3222:	
  5003  1B77  1C73               	btfss	___bmul@multiplier,0
  5004  1B78  2B7D               	goto	l3226
  5005  1B79  0870               	movf	___bmul@multiplicand,w
  5006  1B7A  00F1               	movwf	??___bmul
  5007  1B7B  0871               	movf	??___bmul,w
  5008  1B7C  07F2               	addwf	___bmul@product,f
  5009  1B7D                     l3226:	
  5010  1B7D  1003               	clrc
  5011  1B7E  0DF0               	rlf	___bmul@multiplicand,f
  5012  1B7F  1003               	clrc
  5013  1B80  0CF3               	rrf	___bmul@multiplier,f
  5014  1B81  0873               	movf	___bmul@multiplier,w
  5015  1B82  1D03               	btfss	3,2
  5016  1B83  2B77               	goto	l3222
  5017  1B84  0872               	movf	___bmul@product,w
  5018  1B85  0008               	return
  5019  1B86                     __end_of___bmul:	
  5020                           
  5021                           	psect	text13
  5022  1068                     __ptext13:	
  5023 ;; *************** function _Read_Bytes_From_DS1307_RTC *****************
  5024 ;; Defined at:
  5025 ;;		line 80 in file "DS1307.c"
  5026 ;; Parameters:    Size  Location     Type
  5027 ;;  Address         1    wreg     unsigned char 
  5028 ;;  pData           1    1[COMMON] PTR unsigned char 
  5029 ;;		 -> pRTCArray(4), 
  5030 ;;  NoOfBytes       2    2[COMMON] unsigned int 
  5031 ;; Auto vars:     Size  Location     Type
  5032 ;;  Address         1    6[COMMON] unsigned char 
  5033 ;;  i               2    7[COMMON] unsigned int 
  5034 ;; Return value:  Size  Location     Type
  5035 ;;		None               void
  5036 ;; Registers used:
  5037 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5038 ;; Tracked objects:
  5039 ;;		On entry : 0/0
  5040 ;;		On exit  : 0/0
  5041 ;;		Unchanged: 0/0
  5042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5043 ;;      Params:         3       0       0       0       0
  5044 ;;      Locals:         3       0       0       0       0
  5045 ;;      Temps:          2       0       0       0       0
  5046 ;;      Totals:         8       0       0       0       0
  5047 ;;Total ram usage:        8 bytes
  5048 ;; Hardware stack levels used:    1
  5049 ;; Hardware stack levels required when called:    1
  5050 ;; This function calls:
  5051 ;;		_I2C_ReStart
  5052 ;;		_I2C_Read_Byte
  5053 ;;		_I2C_Send_ACK
  5054 ;;		_I2C_Send_NACK
  5055 ;;		_I2C_Start
  5056 ;;		_I2C_Stop
  5057 ;;		_I2C_Write_Byte
  5058 ;; This function is called by:
  5059 ;;		_Get_DS1307_RTC_Time
  5060 ;;		_Get_DS1307_RTC_Date
  5061 ;; This function uses a non-reentrant model
  5062 ;;
  5063                           
  5064                           
  5065                           ;psect for function _Read_Bytes_From_DS1307_RTC
  5066  1068                     _Read_Bytes_From_DS1307_RTC:	
  5067                           
  5068                           ;incstack = 0
  5069                           ; Regs used in _Read_Bytes_From_DS1307_RTC: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5070                           ;Read_Bytes_From_DS1307_RTC@Address stored from wreg
  5071  1068  00F6               	movwf	Read_Bytes_From_DS1307_RTC@Address
  5072  1069                     L3:	
  5073                           
  5074                           ;DS1307.c: 82: unsigned int i;
  5075                           ;DS1307.c: 84: I2C_Start();
  5076  1069  160A  158A  22F5  160A  118A  	fcall	_I2C_Start
  5077                           
  5078                           ;DS1307.c: 87: while(I2C_Write_Byte(0xD0 + 0) == 1)
  5079  106E  30D0               	movlw	208
  5080  106F  160A  158A  2365  160A  118A  	fcall	_I2C_Write_Byte
  5081  1074  1803               	btfsc	3,0
  5082  1075  2869               	goto	L3
  5083                           
  5084                           ;DS1307.c: 90: I2C_Write_Byte(Address);
  5085                           
  5086                           ;DS1307.c: 88: { I2C_Start(); }
  5087  1076  0876               	movf	Read_Bytes_From_DS1307_RTC@Address,w
  5088  1077  160A  158A  2365  160A  118A  	fcall	_I2C_Write_Byte
  5089                           
  5090                           ;DS1307.c: 91: I2C_ReStart();
  5091  107C  160A  158A  22ED  160A  118A  	fcall	_I2C_ReStart
  5092                           
  5093                           ;DS1307.c: 94: I2C_Write_Byte(0xD0 + 1);
  5094  1081  30D1               	movlw	209
  5095  1082  160A  158A  2365  160A  118A  	fcall	_I2C_Write_Byte
  5096                           
  5097                           ;DS1307.c: 96: pData[0] = I2C_Read_Byte();
  5098  1087  160A  158A  2316  160A  118A  	fcall	_I2C_Read_Byte
  5099  108C  00F4               	movwf	??_Read_Bytes_From_DS1307_RTC
  5100  108D  0871               	movf	Read_Bytes_From_DS1307_RTC@pData,w
  5101  108E  0084               	movwf	4
  5102  108F  0874               	movf	??_Read_Bytes_From_DS1307_RTC,w
  5103  1090  1383               	bcf	3,7	;select IRP bank0
  5104  1091  0080               	movwf	0
  5105                           
  5106                           ;DS1307.c: 98: for(i=1;i<NoOfBytes;i++)
  5107  1092  3001               	movlw	1
  5108  1093  00F7               	movwf	Read_Bytes_From_DS1307_RTC@i
  5109  1094  3000               	movlw	0
  5110  1095  00F8               	movwf	Read_Bytes_From_DS1307_RTC@i+1
  5111  1096                     l3202:	
  5112  1096  0873               	movf	Read_Bytes_From_DS1307_RTC@NoOfBytes+1,w
  5113  1097  0278               	subwf	Read_Bytes_From_DS1307_RTC@i+1,w
  5114  1098  1D03               	skipz
  5115  1099  289C               	goto	u3045
  5116  109A  0872               	movf	Read_Bytes_From_DS1307_RTC@NoOfBytes,w
  5117  109B  0277               	subwf	Read_Bytes_From_DS1307_RTC@i,w
  5118  109C                     u3045:	
  5119  109C  1803               	btfsc	3,0
  5120  109D  28B8               	goto	l3204
  5121                           
  5122                           ;DS1307.c: 99: {
  5123                           ;DS1307.c: 100: I2C_Send_ACK();
  5124  109E  160A  158A  231F  160A  118A  	fcall	_I2C_Send_ACK
  5125                           
  5126                           ;DS1307.c: 101: pData[i] = I2C_Read_Byte();
  5127  10A3  160A  158A  2316  160A  118A  	fcall	_I2C_Read_Byte
  5128  10A8  00F4               	movwf	??_Read_Bytes_From_DS1307_RTC
  5129  10A9  0877               	movf	Read_Bytes_From_DS1307_RTC@i,w
  5130  10AA  0771               	addwf	Read_Bytes_From_DS1307_RTC@pData,w
  5131  10AB  00F5               	movwf	??_Read_Bytes_From_DS1307_RTC+1
  5132  10AC  0875               	movf	??_Read_Bytes_From_DS1307_RTC+1,w
  5133  10AD  0084               	movwf	4
  5134  10AE  0874               	movf	??_Read_Bytes_From_DS1307_RTC,w
  5135  10AF  1383               	bcf	3,7	;select IRP bank0
  5136  10B0  0080               	movwf	0
  5137  10B1  3001               	movlw	1
  5138  10B2  07F7               	addwf	Read_Bytes_From_DS1307_RTC@i,f
  5139  10B3  1803               	skipnc
  5140  10B4  0AF8               	incf	Read_Bytes_From_DS1307_RTC@i+1,f
  5141  10B5  3000               	movlw	0
  5142  10B6  07F8               	addwf	Read_Bytes_From_DS1307_RTC@i+1,f
  5143  10B7  2896               	goto	l3202
  5144  10B8                     l3204:	
  5145                           
  5146                           ;DS1307.c: 102: }
  5147                           ;DS1307.c: 104: I2C_Send_NACK();
  5148  10B8  160A  158A  2328  160A  118A  	fcall	_I2C_Send_NACK
  5149                           
  5150                           ;DS1307.c: 105: I2C_Stop();
  5151  10BD  160A  158A  22FD   	fcall	_I2C_Stop
  5152  10C0  0008               	return
  5153  10C1                     __end_of_Read_Bytes_From_DS1307_RTC:	
  5154                           
  5155                           	psect	text14
  5156  1B65                     __ptext14:	
  5157 ;; *************** function _I2C_Write_Byte *****************
  5158 ;; Defined at:
  5159 ;;		line 65 in file "I2C.c"
  5160 ;; Parameters:    Size  Location     Type
  5161 ;;  Byte            1    wreg     unsigned char 
  5162 ;; Auto vars:     Size  Location     Type
  5163 ;;  Byte            1    0[COMMON] unsigned char 
  5164 ;; Return value:  Size  Location     Type
  5165 ;;		None               void
  5166 ;; Registers used:
  5167 ;;		wreg, status,2, status,0
  5168 ;; Tracked objects:
  5169 ;;		On entry : 0/0
  5170 ;;		On exit  : 0/0
  5171 ;;		Unchanged: 0/0
  5172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5173 ;;      Params:         0       0       0       0       0
  5174 ;;      Locals:         1       0       0       0       0
  5175 ;;      Temps:          0       0       0       0       0
  5176 ;;      Totals:         1       0       0       0       0
  5177 ;;Total ram usage:        1 bytes
  5178 ;; Hardware stack levels used:    1
  5179 ;; This function calls:
  5180 ;;		Nothing
  5181 ;; This function is called by:
  5182 ;;		_Write_Bytes_To_DS1307_RTC
  5183 ;;		_Read_Bytes_From_DS1307_RTC
  5184 ;;		_Write_Byte_To_DS1307_RTC
  5185 ;;		_Read_Byte_From_DS1307_RTC
  5186 ;; This function uses a non-reentrant model
  5187 ;;
  5188                           
  5189                           
  5190                           ;psect for function _I2C_Write_Byte
  5191  1B65                     _I2C_Write_Byte:	
  5192                           
  5193                           ;incstack = 0
  5194                           ; Regs used in _I2C_Write_Byte: [wreg+status,2+status,0]
  5195                           ;I2C_Write_Byte@Byte stored from wreg
  5196  1B65  00F0               	movwf	I2C_Write_Byte@Byte
  5197                           
  5198                           ;I2C.c: 67: SSPBUF = Byte;
  5199  1B66  0870               	movf	I2C_Write_Byte@Byte,w
  5200  1B67  1283               	bcf	3,5	;RP0=0, select bank0
  5201  1B68  1303               	bcf	3,6	;RP1=0, select bank0
  5202  1B69  0093               	movwf	19	;volatile
  5203  1B6A                     l599:	
  5204                           ;I2C.c: 68: while(!SSPIF);
  5205                           
  5206  1B6A  1D8C               	btfss	12,3	;volatile
  5207  1B6B  2B6A               	goto	l599
  5208                           
  5209                           ;I2C.c: 69: SSPIF = 0;
  5210  1B6C  118C               	bcf	12,3	;volatile
  5211                           
  5212                           ;I2C.c: 71: return ACKSTAT;
  5213  1B6D  1683               	bsf	3,5	;RP0=1, select bank1
  5214  1B6E  1303               	bcf	3,6	;RP1=0, select bank1
  5215  1B6F  1B11               	btfsc	17,6	;volatile
  5216  1B70  2B73               	goto	l2864
  5217  1B71  1003               	clrc
  5218  1B72  0008               	return
  5219  1B73                     l2864:	
  5220  1B73  1403               	setc
  5221  1B74  0008               	return
  5222  1B75                     __end_of_I2C_Write_Byte:	
  5223                           
  5224                           	psect	text15
  5225  1AFD                     __ptext15:	
  5226 ;; *************** function _I2C_Stop *****************
  5227 ;; Defined at:
  5228 ;;		line 35 in file "I2C.c"
  5229 ;; Parameters:    Size  Location     Type
  5230 ;;		None
  5231 ;; Auto vars:     Size  Location     Type
  5232 ;;		None
  5233 ;; Return value:  Size  Location     Type
  5234 ;;		None               void
  5235 ;; Registers used:
  5236 ;;		None
  5237 ;; Tracked objects:
  5238 ;;		On entry : 0/0
  5239 ;;		On exit  : 0/0
  5240 ;;		Unchanged: 0/0
  5241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5242 ;;      Params:         0       0       0       0       0
  5243 ;;      Locals:         0       0       0       0       0
  5244 ;;      Temps:          0       0       0       0       0
  5245 ;;      Totals:         0       0       0       0       0
  5246 ;;Total ram usage:        0 bytes
  5247 ;; Hardware stack levels used:    1
  5248 ;; This function calls:
  5249 ;;		Nothing
  5250 ;; This function is called by:
  5251 ;;		_Write_Bytes_To_DS1307_RTC
  5252 ;;		_Read_Bytes_From_DS1307_RTC
  5253 ;;		_Write_Byte_To_DS1307_RTC
  5254 ;;		_Read_Byte_From_DS1307_RTC
  5255 ;; This function uses a non-reentrant model
  5256 ;;
  5257                           
  5258                           
  5259                           ;psect for function _I2C_Stop
  5260  1AFD                     _I2C_Stop:	
  5261                           
  5262                           ;I2C.c: 37: PEN = 1;
  5263                           
  5264                           ;incstack = 0
  5265                           ; Regs used in _I2C_Stop: []
  5266  1AFD  1683               	bsf	3,5	;RP0=1, select bank1
  5267  1AFE  1303               	bcf	3,6	;RP1=0, select bank1
  5268  1AFF  1511               	bsf	17,2	;volatile
  5269  1B00                     l581:	
  5270                           ;I2C.c: 38: while(!SSPIF);
  5271                           
  5272  1B00  1283               	bcf	3,5	;RP0=0, select bank0
  5273  1B01  1D8C               	btfss	12,3	;volatile
  5274  1B02  2B00               	goto	l581
  5275                           
  5276                           ;I2C.c: 39: SSPIF = 0;
  5277  1B03  118C               	bcf	12,3	;volatile
  5278  1B04  0008               	return
  5279  1B05                     __end_of_I2C_Stop:	
  5280                           
  5281                           	psect	text16
  5282  1AF5                     __ptext16:	
  5283 ;; *************** function _I2C_Start *****************
  5284 ;; Defined at:
  5285 ;;		line 17 in file "I2C.c"
  5286 ;; Parameters:    Size  Location     Type
  5287 ;;		None
  5288 ;; Auto vars:     Size  Location     Type
  5289 ;;		None
  5290 ;; Return value:  Size  Location     Type
  5291 ;;		None               void
  5292 ;; Registers used:
  5293 ;;		None
  5294 ;; Tracked objects:
  5295 ;;		On entry : 0/0
  5296 ;;		On exit  : 0/0
  5297 ;;		Unchanged: 0/0
  5298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5299 ;;      Params:         0       0       0       0       0
  5300 ;;      Locals:         0       0       0       0       0
  5301 ;;      Temps:          0       0       0       0       0
  5302 ;;      Totals:         0       0       0       0       0
  5303 ;;Total ram usage:        0 bytes
  5304 ;; Hardware stack levels used:    1
  5305 ;; This function calls:
  5306 ;;		Nothing
  5307 ;; This function is called by:
  5308 ;;		_Write_Bytes_To_DS1307_RTC
  5309 ;;		_Read_Bytes_From_DS1307_RTC
  5310 ;;		_Write_Byte_To_DS1307_RTC
  5311 ;;		_Read_Byte_From_DS1307_RTC
  5312 ;; This function uses a non-reentrant model
  5313 ;;
  5314                           
  5315                           
  5316                           ;psect for function _I2C_Start
  5317  1AF5                     _I2C_Start:	
  5318                           
  5319                           ;I2C.c: 19: SEN = 1;
  5320                           
  5321                           ;incstack = 0
  5322                           ; Regs used in _I2C_Start: []
  5323  1AF5  1683               	bsf	3,5	;RP0=1, select bank1
  5324  1AF6  1303               	bcf	3,6	;RP1=0, select bank1
  5325  1AF7  1411               	bsf	17,0	;volatile
  5326  1AF8                     l569:	
  5327                           ;I2C.c: 20: while(!SSPIF);
  5328                           
  5329  1AF8  1283               	bcf	3,5	;RP0=0, select bank0
  5330  1AF9  1D8C               	btfss	12,3	;volatile
  5331  1AFA  2AF8               	goto	l569
  5332                           
  5333                           ;I2C.c: 21: SSPIF = 0;
  5334  1AFB  118C               	bcf	12,3	;volatile
  5335  1AFC  0008               	return
  5336  1AFD                     __end_of_I2C_Start:	
  5337                           
  5338                           	psect	text17
  5339  1B28                     __ptext17:	
  5340 ;; *************** function _I2C_Send_NACK *****************
  5341 ;; Defined at:
  5342 ;;		line 55 in file "I2C.c"
  5343 ;; Parameters:    Size  Location     Type
  5344 ;;		None
  5345 ;; Auto vars:     Size  Location     Type
  5346 ;;		None
  5347 ;; Return value:  Size  Location     Type
  5348 ;;		None               void
  5349 ;; Registers used:
  5350 ;;		None
  5351 ;; Tracked objects:
  5352 ;;		On entry : 0/0
  5353 ;;		On exit  : 0/0
  5354 ;;		Unchanged: 0/0
  5355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5356 ;;      Params:         0       0       0       0       0
  5357 ;;      Locals:         0       0       0       0       0
  5358 ;;      Temps:          0       0       0       0       0
  5359 ;;      Totals:         0       0       0       0       0
  5360 ;;Total ram usage:        0 bytes
  5361 ;; Hardware stack levels used:    1
  5362 ;; This function calls:
  5363 ;;		Nothing
  5364 ;; This function is called by:
  5365 ;;		_Read_Bytes_From_DS1307_RTC
  5366 ;;		_Read_Byte_From_DS1307_RTC
  5367 ;; This function uses a non-reentrant model
  5368 ;;
  5369                           
  5370                           
  5371                           ;psect for function _I2C_Send_NACK
  5372  1B28                     _I2C_Send_NACK:	
  5373                           
  5374                           ;I2C.c: 57: ACKDT = 1;
  5375                           
  5376                           ;incstack = 0
  5377                           ; Regs used in _I2C_Send_NACK: []
  5378  1B28  1683               	bsf	3,5	;RP0=1, select bank1
  5379  1B29  1303               	bcf	3,6	;RP1=0, select bank1
  5380  1B2A  1691               	bsf	17,5	;volatile
  5381                           
  5382                           ;I2C.c: 58: ACKEN = 1;
  5383  1B2B  1611               	bsf	17,4	;volatile
  5384  1B2C                     l593:	
  5385                           ;I2C.c: 59: while(!SSPIF);
  5386                           
  5387  1B2C  1283               	bcf	3,5	;RP0=0, select bank0
  5388  1B2D  1D8C               	btfss	12,3	;volatile
  5389  1B2E  2B2C               	goto	l593
  5390                           
  5391                           ;I2C.c: 60: SSPIF = 0;
  5392  1B2F  118C               	bcf	12,3	;volatile
  5393  1B30  0008               	return
  5394  1B31                     __end_of_I2C_Send_NACK:	
  5395                           
  5396                           	psect	text18
  5397  1B1F                     __ptext18:	
  5398 ;; *************** function _I2C_Send_ACK *****************
  5399 ;; Defined at:
  5400 ;;		line 45 in file "I2C.c"
  5401 ;; Parameters:    Size  Location     Type
  5402 ;;		None
  5403 ;; Auto vars:     Size  Location     Type
  5404 ;;		None
  5405 ;; Return value:  Size  Location     Type
  5406 ;;		None               void
  5407 ;; Registers used:
  5408 ;;		None
  5409 ;; Tracked objects:
  5410 ;;		On entry : 0/0
  5411 ;;		On exit  : 0/0
  5412 ;;		Unchanged: 0/0
  5413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5414 ;;      Params:         0       0       0       0       0
  5415 ;;      Locals:         0       0       0       0       0
  5416 ;;      Temps:          0       0       0       0       0
  5417 ;;      Totals:         0       0       0       0       0
  5418 ;;Total ram usage:        0 bytes
  5419 ;; Hardware stack levels used:    1
  5420 ;; This function calls:
  5421 ;;		Nothing
  5422 ;; This function is called by:
  5423 ;;		_Read_Bytes_From_DS1307_RTC
  5424 ;; This function uses a non-reentrant model
  5425 ;;
  5426                           
  5427                           
  5428                           ;psect for function _I2C_Send_ACK
  5429  1B1F                     _I2C_Send_ACK:	
  5430                           
  5431                           ;I2C.c: 47: ACKDT = 0;
  5432                           
  5433                           ;incstack = 0
  5434                           ; Regs used in _I2C_Send_ACK: []
  5435  1B1F  1683               	bsf	3,5	;RP0=1, select bank1
  5436  1B20  1303               	bcf	3,6	;RP1=0, select bank1
  5437  1B21  1291               	bcf	17,5	;volatile
  5438                           
  5439                           ;I2C.c: 48: ACKEN = 1;
  5440  1B22  1611               	bsf	17,4	;volatile
  5441  1B23                     l587:	
  5442                           ;I2C.c: 49: while(!SSPIF);
  5443                           
  5444  1B23  1283               	bcf	3,5	;RP0=0, select bank0
  5445  1B24  1D8C               	btfss	12,3	;volatile
  5446  1B25  2B23               	goto	l587
  5447                           
  5448                           ;I2C.c: 50: SSPIF = 0;
  5449  1B26  118C               	bcf	12,3	;volatile
  5450  1B27  0008               	return
  5451  1B28                     __end_of_I2C_Send_ACK:	
  5452                           
  5453                           	psect	text19
  5454  1B16                     __ptext19:	
  5455 ;; *************** function _I2C_Read_Byte *****************
  5456 ;; Defined at:
  5457 ;;		line 76 in file "I2C.c"
  5458 ;; Parameters:    Size  Location     Type
  5459 ;;		None
  5460 ;; Auto vars:     Size  Location     Type
  5461 ;;		None
  5462 ;; Return value:  Size  Location     Type
  5463 ;;                  1    wreg      unsigned char 
  5464 ;; Registers used:
  5465 ;;		wreg
  5466 ;; Tracked objects:
  5467 ;;		On entry : 0/0
  5468 ;;		On exit  : 0/0
  5469 ;;		Unchanged: 0/0
  5470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5471 ;;      Params:         0       0       0       0       0
  5472 ;;      Locals:         0       0       0       0       0
  5473 ;;      Temps:          0       0       0       0       0
  5474 ;;      Totals:         0       0       0       0       0
  5475 ;;Total ram usage:        0 bytes
  5476 ;; Hardware stack levels used:    1
  5477 ;; This function calls:
  5478 ;;		Nothing
  5479 ;; This function is called by:
  5480 ;;		_Read_Bytes_From_DS1307_RTC
  5481 ;;		_Read_Byte_From_DS1307_RTC
  5482 ;; This function uses a non-reentrant model
  5483 ;;
  5484                           
  5485                           
  5486                           ;psect for function _I2C_Read_Byte
  5487  1B16                     _I2C_Read_Byte:	
  5488                           
  5489                           ;I2C.c: 78: RCEN = 1;
  5490                           
  5491                           ;incstack = 0
  5492                           ; Regs used in _I2C_Read_Byte: [wreg]
  5493  1B16  1683               	bsf	3,5	;RP0=1, select bank1
  5494  1B17  1303               	bcf	3,6	;RP1=0, select bank1
  5495  1B18  1591               	bsf	17,3	;volatile
  5496  1B19                     l605:	
  5497                           ;I2C.c: 79: while(!SSPIF);
  5498                           
  5499  1B19  1283               	bcf	3,5	;RP0=0, select bank0
  5500  1B1A  1D8C               	btfss	12,3	;volatile
  5501  1B1B  2B19               	goto	l605
  5502                           
  5503                           ;I2C.c: 80: SSPIF = 0;
  5504  1B1C  118C               	bcf	12,3	;volatile
  5505                           
  5506                           ;I2C.c: 82: return SSPBUF;
  5507  1B1D  0813               	movf	19,w	;volatile
  5508  1B1E  0008               	return
  5509  1B1F                     __end_of_I2C_Read_Byte:	
  5510                           
  5511                           	psect	text20
  5512  1AED                     __ptext20:	
  5513 ;; *************** function _I2C_ReStart *****************
  5514 ;; Defined at:
  5515 ;;		line 26 in file "I2C.c"
  5516 ;; Parameters:    Size  Location     Type
  5517 ;;		None
  5518 ;; Auto vars:     Size  Location     Type
  5519 ;;		None
  5520 ;; Return value:  Size  Location     Type
  5521 ;;		None               void
  5522 ;; Registers used:
  5523 ;;		None
  5524 ;; Tracked objects:
  5525 ;;		On entry : 0/0
  5526 ;;		On exit  : 0/0
  5527 ;;		Unchanged: 0/0
  5528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5529 ;;      Params:         0       0       0       0       0
  5530 ;;      Locals:         0       0       0       0       0
  5531 ;;      Temps:          0       0       0       0       0
  5532 ;;      Totals:         0       0       0       0       0
  5533 ;;Total ram usage:        0 bytes
  5534 ;; Hardware stack levels used:    1
  5535 ;; This function calls:
  5536 ;;		Nothing
  5537 ;; This function is called by:
  5538 ;;		_Read_Bytes_From_DS1307_RTC
  5539 ;;		_Read_Byte_From_DS1307_RTC
  5540 ;; This function uses a non-reentrant model
  5541 ;;
  5542                           
  5543                           
  5544                           ;psect for function _I2C_ReStart
  5545  1AED                     _I2C_ReStart:	
  5546                           
  5547                           ;I2C.c: 28: RSEN = 1;
  5548                           
  5549                           ;incstack = 0
  5550                           ; Regs used in _I2C_ReStart: []
  5551  1AED  1683               	bsf	3,5	;RP0=1, select bank1
  5552  1AEE  1303               	bcf	3,6	;RP1=0, select bank1
  5553  1AEF  1491               	bsf	17,1	;volatile
  5554  1AF0                     l575:	
  5555                           ;I2C.c: 29: while(!SSPIF);
  5556                           
  5557  1AF0  1283               	bcf	3,5	;RP0=0, select bank0
  5558  1AF1  1D8C               	btfss	12,3	;volatile
  5559  1AF2  2AF0               	goto	l575
  5560                           
  5561                           ;I2C.c: 30: SSPIF = 0;
  5562  1AF3  118C               	bcf	12,3	;volatile
  5563  1AF4  0008               	return
  5564  1AF5                     __end_of_I2C_ReStart:	
  5565                           
  5566                           	psect	text21
  5567  12F1                     __ptext21:	
  5568 ;; *************** function _GetKeyTime *****************
  5569 ;; Defined at:
  5570 ;;		line 100 in file "keypad.h"
  5571 ;; Parameters:    Size  Location     Type
  5572 ;;		None
  5573 ;; Auto vars:     Size  Location     Type
  5574 ;;  key             1    6[COMMON] unsigned char 
  5575 ;; Return value:  Size  Location     Type
  5576 ;;                  1    wreg      unsigned char 
  5577 ;; Registers used:
  5578 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5579 ;; Tracked objects:
  5580 ;;		On entry : 0/0
  5581 ;;		On exit  : 0/0
  5582 ;;		Unchanged: 0/0
  5583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5584 ;;      Params:         0       0       0       0       0
  5585 ;;      Locals:         1       0       0       0       0
  5586 ;;      Temps:          1       0       0       0       0
  5587 ;;      Totals:         2       0       0       0       0
  5588 ;;Total ram usage:        2 bytes
  5589 ;; Hardware stack levels used:    1
  5590 ;; Hardware stack levels required when called:    2
  5591 ;; This function calls:
  5592 ;;		_READ_SWITCHES
  5593 ;;		_strcpy
  5594 ;; This function is called by:
  5595 ;;		_Settings
  5596 ;; This function uses a non-reentrant model
  5597 ;;
  5598                           
  5599                           
  5600                           ;psect for function _GetKeyTime
  5601  12F1                     _GetKeyTime:	
  5602                           
  5603                           ;keypad.h: 102: char key = 'n';
  5604                           
  5605                           ;incstack = 0
  5606                           ; Regs used in _GetKeyTime: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5607  12F1  306E               	movlw	110
  5608  12F2                     L4:	
  5609  12F2  00F5               	movwf	??_GetKeyTime
  5610  12F3  0875               	movf	??_GetKeyTime,w
  5611  12F4  00F6               	movwf	GetKeyTime@key
  5612  12F5  306E               	movlw	110
  5613  12F6  0676               	xorwf	GetKeyTime@key,w
  5614  12F7  1D03               	btfss	3,2
  5615  12F8  2AFF               	goto	l3398
  5616                           
  5617                           ;keypad.h: 105: key = READ_SWITCHES();
  5618                           
  5619                           ;keypad.h: 104: while(key=='n')
  5620  12F9  120A  158A  269C  160A  118A  	fcall	_READ_SWITCHES
  5621  12FE  2AF2               	goto	L4
  5622  12FF                     l3398:	
  5623                           
  5624                           ;keypad.h: 106: if(a<2)
  5625  12FF  1283               	bcf	3,5	;RP0=0, select bank0
  5626  1300  1303               	bcf	3,6	;RP1=0, select bank0
  5627  1301  084B               	movf	_a+1,w
  5628  1302  3A80               	xorlw	128
  5629  1303  00FF               	movwf	127
  5630  1304  3080               	movlw	128
  5631  1305  027F               	subwf	127,w
  5632  1306  1D03               	skipz
  5633  1307  2B0A               	goto	u3455
  5634  1308  3002               	movlw	2
  5635  1309  024A               	subwf	_a,w
  5636  130A                     u3455:	
  5637  130A  1803               	skipnc
  5638  130B  2B1D               	goto	l3404
  5639                           
  5640                           ;keypad.h: 107: {
  5641                           ;keypad.h: 108: hh[a]=key;
  5642  130C  0876               	movf	GetKeyTime@key,w
  5643  130D  00F5               	movwf	??_GetKeyTime
  5644  130E  1283               	bcf	3,5	;RP0=0, select bank0
  5645  130F  1303               	bcf	3,6	;RP1=0, select bank0
  5646  1310  084A               	movf	_a,w
  5647  1311  3EDF               	addlw	(low (_hh| 0))& (0+255)
  5648  1312  0084               	movwf	4
  5649  1313  0875               	movf	??_GetKeyTime,w
  5650  1314  1383               	bcf	3,7	;select IRP bank1
  5651  1315  0080               	movwf	0
  5652                           
  5653                           ;keypad.h: 109: a++;
  5654  1316  3001               	movlw	1
  5655  1317  07CA               	addwf	_a,f
  5656  1318  1803               	skipnc
  5657  1319  0ACB               	incf	_a+1,f
  5658  131A  3000               	movlw	0
  5659  131B  07CB               	addwf	_a+1,f
  5660                           
  5661                           ;keypad.h: 110: }
  5662  131C  2B7D               	goto	l3430
  5663  131D                     l3404:	
  5664                           
  5665                           ;keypad.h: 111: else if(b<2)
  5666  131D  1283               	bcf	3,5	;RP0=0, select bank0
  5667  131E  1303               	bcf	3,6	;RP1=0, select bank0
  5668  131F  084F               	movf	_b+1,w
  5669  1320  3A80               	xorlw	128
  5670  1321  00FF               	movwf	127
  5671  1322  3080               	movlw	128
  5672  1323  027F               	subwf	127,w
  5673  1324  1D03               	skipz
  5674  1325  2B28               	goto	u3465
  5675  1326  3002               	movlw	2
  5676  1327  024E               	subwf	_b,w
  5677  1328                     u3465:	
  5678  1328  1803               	skipnc
  5679  1329  2B3B               	goto	l3410
  5680                           
  5681                           ;keypad.h: 112: {
  5682                           ;keypad.h: 113: mm[b]=key;
  5683  132A  0876               	movf	GetKeyTime@key,w
  5684  132B  00F5               	movwf	??_GetKeyTime
  5685  132C  1283               	bcf	3,5	;RP0=0, select bank0
  5686  132D  1303               	bcf	3,6	;RP1=0, select bank0
  5687  132E  084E               	movf	_b,w
  5688  132F  3EE4               	addlw	(low (_mm| 0))& (0+255)
  5689  1330  0084               	movwf	4
  5690  1331  0875               	movf	??_GetKeyTime,w
  5691  1332  1383               	bcf	3,7	;select IRP bank1
  5692  1333  0080               	movwf	0
  5693                           
  5694                           ;keypad.h: 114: b++;
  5695  1334  3001               	movlw	1
  5696  1335  07CE               	addwf	_b,f
  5697  1336  1803               	skipnc
  5698  1337  0ACF               	incf	_b+1,f
  5699  1338  3000               	movlw	0
  5700  1339  07CF               	addwf	_b+1,f
  5701                           
  5702                           ;keypad.h: 115: }
  5703  133A  2B7D               	goto	l3430
  5704  133B                     l3410:	
  5705                           
  5706                           ;keypad.h: 116: else if(c<2)
  5707  133B  1283               	bcf	3,5	;RP0=0, select bank0
  5708  133C  1303               	bcf	3,6	;RP1=0, select bank0
  5709  133D  0851               	movf	_c+1,w
  5710  133E  3A80               	xorlw	128
  5711  133F  00FF               	movwf	127
  5712  1340  3080               	movlw	128
  5713  1341  027F               	subwf	127,w
  5714  1342  1D03               	skipz
  5715  1343  2B46               	goto	u3475
  5716  1344  3002               	movlw	2
  5717  1345  0250               	subwf	_c,w
  5718  1346                     u3475:	
  5719  1346  1803               	skipnc
  5720  1347  2B54               	goto	l3416
  5721                           
  5722                           ;keypad.h: 117: {
  5723                           ;keypad.h: 118: ss[c]=key;
  5724  1348  0876               	movf	GetKeyTime@key,w
  5725  1349  00F5               	movwf	??_GetKeyTime
  5726  134A  1283               	bcf	3,5	;RP0=0, select bank0
  5727  134B  1303               	bcf	3,6	;RP1=0, select bank0
  5728  134C  0850               	movf	_c,w
  5729  134D  3EE9               	addlw	(low (_ss| 0))& (0+255)
  5730  134E  0084               	movwf	4
  5731  134F  0875               	movf	??_GetKeyTime,w
  5732  1350  1383               	bcf	3,7	;select IRP bank1
  5733  1351  0080               	movwf	0
  5734                           
  5735                           ;keypad.h: 119: c++;
  5736  1352  3001               	movlw	1
  5737  1353  2B78               	goto	L6
  5738  1354                     l3416:	
  5739                           ;keypad.h: 120: }
  5740                           
  5741                           
  5742                           ;keypad.h: 121: else if(c<3)
  5743  1354  1283               	bcf	3,5	;RP0=0, select bank0
  5744  1355  1303               	bcf	3,6	;RP1=0, select bank0
  5745  1356  0851               	movf	_c+1,w
  5746  1357  3A80               	xorlw	128
  5747  1358  00FF               	movwf	127
  5748  1359  3080               	movlw	128
  5749  135A  027F               	subwf	127,w
  5750  135B  1D03               	skipz
  5751  135C  2B5F               	goto	u3485
  5752  135D  3003               	movlw	3
  5753  135E  0250               	subwf	_c,w
  5754  135F                     u3485:	
  5755  135F  1803               	skipnc
  5756  1360  2B7D               	goto	l3430
  5757                           
  5758                           ;keypad.h: 122: {
  5759                           ;keypad.h: 123: if(key=='1')
  5760  1361  3031               	movlw	49
  5761  1362  0676               	xorwf	GetKeyTime@key,w
  5762  1363  1D03               	btfss	3,2
  5763  1364  2B69               	goto	l3424
  5764                           
  5765                           ;keypad.h: 124: {strcpy(ap,"AM");
  5766  1365  3005               	movlw	low (STR_1| (0+32768))
  5767  1366  00F0               	movwf	strcpy@from
  5768  1367  308A               	movlw	high (STR_1| (0+32768))
  5769  1368  2B70               	goto	L7
  5770  1369                     l3424:	
  5771                           ;keypad.h: 125: c++;}
  5772                           
  5773                           
  5774                           ;keypad.h: 126: else if(key=='2')
  5775  1369  3032               	movlw	50
  5776  136A  0676               	xorwf	GetKeyTime@key,w
  5777  136B  1D03               	btfss	3,2
  5778  136C  2B7D               	goto	l3430
  5779                           
  5780                           ;keypad.h: 127: {strcpy(ap,"PM");
  5781  136D  3014               	movlw	low ((STR_36+12)| (0+32768))
  5782  136E  00F0               	movwf	strcpy@from
  5783  136F  3089               	movlw	high ((STR_36+12)| (0+32768))
  5784  1370                     L7:	
  5785  1370  00F1               	movwf	strcpy@from+1
  5786  1371  30D5               	movlw	(low (_ap| 0))& (0+255)
  5787  1372  160A  158A  244A   	fcall	_strcpy
  5788                           
  5789                           ;keypad.h: 128: c++;}
  5790  1375  3001               	movlw	1
  5791  1376  1283               	bcf	3,5	;RP0=0, select bank0
  5792  1377  1303               	bcf	3,6	;RP1=0, select bank0
  5793  1378                     L6:	
  5794  1378  07D0               	addwf	_c,f
  5795  1379  1803               	skipnc
  5796  137A  0AD1               	incf	_c+1,f
  5797  137B  3000               	movlw	0
  5798  137C  07D1               	addwf	_c+1,f
  5799  137D                     l3430:	
  5800                           
  5801                           ;keypad.h: 129: }
  5802                           ;keypad.h: 130: return key;
  5803  137D  0876               	movf	GetKeyTime@key,w
  5804  137E  0008               	return
  5805  137F                     __end_of_GetKeyTime:	
  5806                           
  5807                           	psect	text22
  5808  1C09                     __ptext22:	
  5809 ;; *************** function _GetKeyNumber *****************
  5810 ;; Defined at:
  5811 ;;		line 87 in file "keypad.h"
  5812 ;; Parameters:    Size  Location     Type
  5813 ;;		None
  5814 ;; Auto vars:     Size  Location     Type
  5815 ;;  key             1    4[COMMON] unsigned char 
  5816 ;; Return value:  Size  Location     Type
  5817 ;;                  1    wreg      unsigned char 
  5818 ;; Registers used:
  5819 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5820 ;; Tracked objects:
  5821 ;;		On entry : 0/0
  5822 ;;		On exit  : 0/0
  5823 ;;		Unchanged: 0/0
  5824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5825 ;;      Params:         0       0       0       0       0
  5826 ;;      Locals:         1       0       0       0       0
  5827 ;;      Temps:          1       0       0       0       0
  5828 ;;      Totals:         2       0       0       0       0
  5829 ;;Total ram usage:        2 bytes
  5830 ;; Hardware stack levels used:    1
  5831 ;; Hardware stack levels required when called:    1
  5832 ;; This function calls:
  5833 ;;		_READ_SWITCHES
  5834 ;; This function is called by:
  5835 ;;		_Settings
  5836 ;; This function uses a non-reentrant model
  5837 ;;
  5838                           
  5839                           
  5840                           ;psect for function _GetKeyNumber
  5841  1C09                     _GetKeyNumber:	
  5842                           
  5843                           ;keypad.h: 89: char key = 'n';
  5844                           
  5845                           ;incstack = 0
  5846                           ; Regs used in _GetKeyNumber: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5847  1C09  306E               	movlw	110
  5848  1C0A                     L8:	
  5849  1C0A  00F3               	movwf	??_GetKeyNumber
  5850  1C0B  0873               	movf	??_GetKeyNumber,w
  5851  1C0C  00F4               	movwf	GetKeyNumber@key
  5852  1C0D  306E               	movlw	110
  5853  1C0E  0674               	xorwf	GetKeyNumber@key,w
  5854  1C0F  1D03               	btfss	3,2
  5855  1C10  2C17               	goto	l3384
  5856                           
  5857                           ;keypad.h: 92: key = READ_SWITCHES();
  5858                           
  5859                           ;keypad.h: 91: while(key=='n')
  5860  1C11  120A  158A  269C  160A  158A  	fcall	_READ_SWITCHES
  5861  1C16  2C0A               	goto	L8
  5862  1C17                     l3384:	
  5863                           
  5864                           ;keypad.h: 94: number[x]=key;
  5865  1C17  0874               	movf	GetKeyNumber@key,w
  5866  1C18  00F3               	movwf	??_GetKeyNumber
  5867  1C19  1283               	bcf	3,5	;RP0=0, select bank0
  5868  1C1A  1303               	bcf	3,6	;RP1=0, select bank0
  5869  1C1B  0868               	movf	_x,w
  5870  1C1C  3EAD               	addlw	(low (_number| 0))& (0+255)
  5871  1C1D  0084               	movwf	4
  5872  1C1E  0873               	movf	??_GetKeyNumber,w
  5873  1C1F  1383               	bcf	3,7	;select IRP bank1
  5874  1C20  0080               	movwf	0
  5875                           
  5876                           ;keypad.h: 95: x++;
  5877  1C21  3001               	movlw	1
  5878  1C22  07E8               	addwf	_x,f
  5879  1C23  1803               	skipnc
  5880  1C24  0AE9               	incf	_x+1,f
  5881  1C25  3000               	movlw	0
  5882  1C26  07E9               	addwf	_x+1,f
  5883                           
  5884                           ;keypad.h: 97: return key;
  5885  1C27  0874               	movf	GetKeyNumber@key,w
  5886  1C28  0008               	return
  5887  1C29                     __end_of_GetKeyNumber:	
  5888                           
  5889                           	psect	text23
  5890  0012                     __ptext23:	
  5891 ;; *************** function _GetKeyDate *****************
  5892 ;; Defined at:
  5893 ;;		line 133 in file "keypad.h"
  5894 ;; Parameters:    Size  Location     Type
  5895 ;;		None
  5896 ;; Auto vars:     Size  Location     Type
  5897 ;;  key             1   13[COMMON] unsigned char 
  5898 ;; Return value:  Size  Location     Type
  5899 ;;                  1    wreg      unsigned char 
  5900 ;; Registers used:
  5901 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5902 ;; Tracked objects:
  5903 ;;		On entry : 0/0
  5904 ;;		On exit  : 0/0
  5905 ;;		Unchanged: 0/0
  5906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5907 ;;      Params:         0       0       0       0       0
  5908 ;;      Locals:         1       0       0       0       0
  5909 ;;      Temps:          1       0       0       0       0
  5910 ;;      Totals:         2       0       0       0       0
  5911 ;;Total ram usage:        2 bytes
  5912 ;; Hardware stack levels used:    1
  5913 ;; Hardware stack levels required when called:    3
  5914 ;; This function calls:
  5915 ;;		_Lcd_Write_String
  5916 ;;		_READ_SWITCHES
  5917 ;;		_strcpy
  5918 ;; This function is called by:
  5919 ;;		_Settings
  5920 ;; This function uses a non-reentrant model
  5921 ;;
  5922                           
  5923                           
  5924                           ;psect for function _GetKeyDate
  5925  0012                     _GetKeyDate:	
  5926                           
  5927                           ;keypad.h: 135: char key = 'n';
  5928                           
  5929                           ;incstack = 0
  5930                           ; Regs used in _GetKeyDate: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5931  0012  306E               	movlw	110
  5932  0013                     L9:	
  5933  0013  00FC               	movwf	??_GetKeyDate
  5934  0014  087C               	movf	??_GetKeyDate,w
  5935  0015  00FD               	movwf	GetKeyDate@key
  5936  0016  306E               	movlw	110
  5937  0017  067D               	xorwf	GetKeyDate@key,w
  5938  0018  1D03               	btfss	3,2
  5939  0019  2820               	goto	l3440
  5940                           
  5941                           ;keypad.h: 138: key = READ_SWITCHES();
  5942                           
  5943                           ;keypad.h: 137: while(key=='n')
  5944  001A  120A  158A  269C  120A  118A  	fcall	_READ_SWITCHES
  5945  001F  2813               	goto	L9
  5946  0020                     l3440:	
  5947                           
  5948                           ;keypad.h: 139: if(e<2)
  5949  0020  1283               	bcf	3,5	;RP0=0, select bank0
  5950  0021  1303               	bcf	3,6	;RP1=0, select bank0
  5951  0022  0853               	movf	_e+1,w
  5952  0023  3A80               	xorlw	128
  5953  0024  00FF               	movwf	127
  5954  0025  3080               	movlw	128
  5955  0026  027F               	subwf	127,w
  5956  0027  1D03               	skipz
  5957  0028  282B               	goto	u3525
  5958  0029  3002               	movlw	2
  5959  002A  0252               	subwf	_e,w
  5960  002B                     u3525:	
  5961  002B  1803               	skipnc
  5962  002C  283E               	goto	l3446
  5963                           
  5964                           ;keypad.h: 140: {
  5965                           ;keypad.h: 141: DD[e]=key;
  5966  002D  087D               	movf	GetKeyDate@key,w
  5967  002E  00FC               	movwf	??_GetKeyDate
  5968  002F  1283               	bcf	3,5	;RP0=0, select bank0
  5969  0030  1303               	bcf	3,6	;RP1=0, select bank0
  5970  0031  0852               	movf	_e,w
  5971  0032  3EC6               	addlw	(low (_DD| 0))& (0+255)
  5972  0033  0084               	movwf	4
  5973  0034  087C               	movf	??_GetKeyDate,w
  5974  0035  1383               	bcf	3,7	;select IRP bank1
  5975  0036  0080               	movwf	0
  5976                           
  5977                           ;keypad.h: 142: e++;
  5978  0037  3001               	movlw	1
  5979  0038  07D2               	addwf	_e,f
  5980  0039  1803               	skipnc
  5981  003A  0AD3               	incf	_e+1,f
  5982  003B  3000               	movlw	0
  5983  003C  07D3               	addwf	_e+1,f
  5984                           
  5985                           ;keypad.h: 143: }
  5986  003D  2904               	goto	l328
  5987  003E                     l3446:	
  5988                           
  5989                           ;keypad.h: 144: else if(f<2)
  5990  003E  1283               	bcf	3,5	;RP0=0, select bank0
  5991  003F  1303               	bcf	3,6	;RP1=0, select bank0
  5992  0040  0855               	movf	_f+1,w
  5993  0041  3A80               	xorlw	128
  5994  0042  00FF               	movwf	127
  5995  0043  3080               	movlw	128
  5996  0044  027F               	subwf	127,w
  5997  0045  1D03               	skipz
  5998  0046  2849               	goto	u3535
  5999  0047  3002               	movlw	2
  6000  0048  0254               	subwf	_f,w
  6001  0049                     u3535:	
  6002  0049  1803               	skipnc
  6003  004A  285C               	goto	l3452
  6004                           
  6005                           ;keypad.h: 145: {
  6006                           ;keypad.h: 146: MM[f]=key;
  6007  004B  087D               	movf	GetKeyDate@key,w
  6008  004C  00FC               	movwf	??_GetKeyDate
  6009  004D  1283               	bcf	3,5	;RP0=0, select bank0
  6010  004E  1303               	bcf	3,6	;RP1=0, select bank0
  6011  004F  0854               	movf	_f,w
  6012  0050  3ECB               	addlw	(low (_MM| 0))& (0+255)
  6013  0051  0084               	movwf	4
  6014  0052  087C               	movf	??_GetKeyDate,w
  6015  0053  1383               	bcf	3,7	;select IRP bank1
  6016  0054  0080               	movwf	0
  6017                           
  6018                           ;keypad.h: 147: f++;
  6019  0055  3001               	movlw	1
  6020  0056  07D4               	addwf	_f,f
  6021  0057  1803               	skipnc
  6022  0058  0AD5               	incf	_f+1,f
  6023  0059  3000               	movlw	0
  6024  005A  07D5               	addwf	_f+1,f
  6025                           
  6026                           ;keypad.h: 148: }
  6027  005B  2904               	goto	l328
  6028  005C                     l3452:	
  6029                           
  6030                           ;keypad.h: 149: else if(g<2)
  6031  005C  1283               	bcf	3,5	;RP0=0, select bank0
  6032  005D  1303               	bcf	3,6	;RP1=0, select bank0
  6033  005E  0857               	movf	_g+1,w
  6034  005F  3A80               	xorlw	128
  6035  0060  00FF               	movwf	127
  6036  0061  3080               	movlw	128
  6037  0062  027F               	subwf	127,w
  6038  0063  1D03               	skipz
  6039  0064  2867               	goto	u3545
  6040  0065  3002               	movlw	2
  6041  0066  0256               	subwf	_g,w
  6042  0067                     u3545:	
  6043  0067  1803               	skipnc
  6044  0068  287A               	goto	l3458
  6045                           
  6046                           ;keypad.h: 150: {
  6047                           ;keypad.h: 151: YY[g]=key;
  6048  0069  087D               	movf	GetKeyDate@key,w
  6049  006A  00FC               	movwf	??_GetKeyDate
  6050  006B  1283               	bcf	3,5	;RP0=0, select bank0
  6051  006C  1303               	bcf	3,6	;RP1=0, select bank0
  6052  006D  0856               	movf	_g,w
  6053  006E  3ED0               	addlw	(low (_YY| 0))& (0+255)
  6054  006F  0084               	movwf	4
  6055  0070  087C               	movf	??_GetKeyDate,w
  6056  0071  1383               	bcf	3,7	;select IRP bank1
  6057  0072  0080               	movwf	0
  6058                           
  6059                           ;keypad.h: 152: g++;
  6060  0073  3001               	movlw	1
  6061  0074  07D6               	addwf	_g,f
  6062  0075  1803               	skipnc
  6063  0076  0AD7               	incf	_g+1,f
  6064  0077  3000               	movlw	0
  6065  0078  07D7               	addwf	_g+1,f
  6066                           
  6067                           ;keypad.h: 153: }
  6068  0079  2904               	goto	l328
  6069  007A                     l3458:	
  6070                           
  6071                           ;keypad.h: 154: else if(h<1)
  6072  007A  1283               	bcf	3,5	;RP0=0, select bank0
  6073  007B  1303               	bcf	3,6	;RP1=0, select bank0
  6074  007C  0859               	movf	_h+1,w
  6075  007D  3A80               	xorlw	128
  6076  007E  00FF               	movwf	127
  6077  007F  3080               	movlw	128
  6078  0080  027F               	subwf	127,w
  6079  0081  1D03               	skipz
  6080  0082  2885               	goto	u3555
  6081  0083  3001               	movlw	1
  6082  0084  0258               	subwf	_h,w
  6083  0085                     u3555:	
  6084  0085  1C03               	btfss	3,0
  6085  0086  28DF               	goto	l3480
  6086  0087  2904               	goto	l328
  6087  0088                     l3462:	
  6088                           ;keypad.h: 156: {
  6089                           ;keypad.h: 157: case '1': strcpy(DAY,"MON"); break;
  6090                           
  6091                           ;keypad.h: 155: {switch(key)
  6092                           
  6093  0088  30F5               	movlw	low (STR_3| (0+32768))
  6094  0089  00F0               	movwf	strcpy@from
  6095  008A  3089               	movlw	high (STR_3| (0+32768))
  6096  008B  00F1               	movwf	strcpy@from+1
  6097  008C  30BC               	movlw	(low (_DAY| 0))& (0+255)
  6098  008D  160A  158A  244A  120A  118A  	fcall	_strcpy
  6099  0092  28F6               	goto	l3482
  6100  0093                     l3464:	
  6101                           ;keypad.h: 158: case '2': strcpy(DAY,"TUE"); break;
  6102                           
  6103  0093  30ED               	movlw	low (STR_4| (0+32768))
  6104  0094  00F0               	movwf	strcpy@from
  6105  0095  3089               	movlw	high (STR_4| (0+32768))
  6106  0096  00F1               	movwf	strcpy@from+1
  6107  0097  30BC               	movlw	(low (_DAY| 0))& (0+255)
  6108  0098  160A  158A  244A  120A  118A  	fcall	_strcpy
  6109  009D  28F6               	goto	l3482
  6110  009E                     l3466:	
  6111                           ;keypad.h: 159: case '3': strcpy(DAY,"WED"); break;
  6112                           
  6113  009E  30E9               	movlw	low (STR_5| (0+32768))
  6114  009F  00F0               	movwf	strcpy@from
  6115  00A0  3089               	movlw	high (STR_5| (0+32768))
  6116  00A1  00F1               	movwf	strcpy@from+1
  6117  00A2  30BC               	movlw	(low (_DAY| 0))& (0+255)
  6118  00A3  160A  158A  244A  120A  118A  	fcall	_strcpy
  6119  00A8  28F6               	goto	l3482
  6120  00A9                     l3468:	
  6121                           ;keypad.h: 160: case '4': strcpy(DAY,"THU"); break;
  6122                           
  6123  00A9  3001               	movlw	low (STR_6| (0+32768))
  6124  00AA  00F0               	movwf	strcpy@from
  6125  00AB  308A               	movlw	high (STR_6| (0+32768))
  6126  00AC  00F1               	movwf	strcpy@from+1
  6127  00AD  30BC               	movlw	(low (_DAY| 0))& (0+255)
  6128  00AE  160A  158A  244A  120A  118A  	fcall	_strcpy
  6129  00B3  28F6               	goto	l3482
  6130  00B4                     l3470:	
  6131                           ;keypad.h: 161: case '5': strcpy(DAY,"FRI"); break;
  6132                           
  6133  00B4  30F1               	movlw	low (STR_7| (0+32768))
  6134  00B5  00F0               	movwf	strcpy@from
  6135  00B6  3089               	movlw	high (STR_7| (0+32768))
  6136  00B7  00F1               	movwf	strcpy@from+1
  6137  00B8  30BC               	movlw	(low (_DAY| 0))& (0+255)
  6138  00B9  160A  158A  244A  120A  118A  	fcall	_strcpy
  6139  00BE  28F6               	goto	l3482
  6140  00BF                     l3472:	
  6141                           ;keypad.h: 162: case '6': strcpy(DAY,"SAT"); break;
  6142                           
  6143  00BF  30FD               	movlw	low (STR_8| (0+32768))
  6144  00C0  00F0               	movwf	strcpy@from
  6145  00C1  3089               	movlw	high (STR_8| (0+32768))
  6146  00C2  00F1               	movwf	strcpy@from+1
  6147  00C3  30BC               	movlw	(low (_DAY| 0))& (0+255)
  6148  00C4  160A  158A  244A  120A  118A  	fcall	_strcpy
  6149  00C9  28F6               	goto	l3482
  6150  00CA                     l3474:	
  6151                           ;keypad.h: 163: case '7': strcpy(DAY,"SUN"); break;
  6152                           
  6153  00CA  30F9               	movlw	low (STR_9| (0+32768))
  6154  00CB  00F0               	movwf	strcpy@from
  6155  00CC  3089               	movlw	high (STR_9| (0+32768))
  6156  00CD  00F1               	movwf	strcpy@from+1
  6157  00CE  30BC               	movlw	(low (_DAY| 0))& (0+255)
  6158  00CF  160A  158A  244A  120A  118A  	fcall	_strcpy
  6159  00D4  28F6               	goto	l3482
  6160  00D5                     l3476:	
  6161                           ;keypad.h: 165: default: Lcd_Write_String("???"); break;
  6162                           
  6163  00D5  30E5               	movlw	low (STR_10| (0+32768))
  6164  00D6  00F5               	movwf	Lcd_Write_String@a
  6165  00D7  3089               	movlw	high (STR_10| (0+32768))
  6166  00D8  00F6               	movwf	Lcd_Write_String@a+1
  6167  00D9  160A  158A  26A4  120A  118A  	fcall	_Lcd_Write_String
  6168                           
  6169                           ;keypad.h: 166: }
  6170  00DE  28F6               	goto	l3482
  6171  00DF                     l3480:	
  6172  00DF  087D               	movf	GetKeyDate@key,w
  6173                           
  6174                           ; Switch size 1, requested type "space"
  6175                           ; Number of cases is 7, Range of values is 49 to 55
  6176                           ; switch strategies available:
  6177                           ; Name         Instructions Cycles
  6178                           ; simple_byte           22    12 (average)
  6179                           ; direct_byte           32    11 (fixed)
  6180                           ; jumptable            263     9 (fixed)
  6181                           ;	Chosen strategy is simple_byte
  6182  00E0  3A31               	xorlw	49	; case 49
  6183  00E1  1903               	skipnz
  6184  00E2  2888               	goto	l3462
  6185  00E3  3A03               	xorlw	3	; case 50
  6186  00E4  1903               	skipnz
  6187  00E5  2893               	goto	l3464
  6188  00E6  3A01               	xorlw	1	; case 51
  6189  00E7  1903               	skipnz
  6190  00E8  289E               	goto	l3466
  6191  00E9  3A07               	xorlw	7	; case 52
  6192  00EA  1903               	skipnz
  6193  00EB  28A9               	goto	l3468
  6194  00EC  3A01               	xorlw	1	; case 53
  6195  00ED  1903               	skipnz
  6196  00EE  28B4               	goto	l3470
  6197  00EF  3A03               	xorlw	3	; case 54
  6198  00F0  1903               	skipnz
  6199  00F1  28BF               	goto	l3472
  6200  00F2  3A01               	xorlw	1	; case 55
  6201  00F3  1903               	skipnz
  6202  00F4  28CA               	goto	l3474
  6203  00F5  28D5               	goto	l3476
  6204  00F6                     l3482:	
  6205                           
  6206                           ;keypad.h: 167: h++;
  6207  00F6  3001               	movlw	1
  6208  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  6209  00F8  1303               	bcf	3,6	;RP1=0, select bank0
  6210  00F9  07D8               	addwf	_h,f
  6211  00FA  1803               	skipnc
  6212  00FB  0AD9               	incf	_h+1,f
  6213  00FC  3000               	movlw	0
  6214  00FD  07D9               	addwf	_h+1,f
  6215                           
  6216                           ;keypad.h: 168: cDAY[0]=key;
  6217  00FE  087D               	movf	GetKeyDate@key,w
  6218  00FF  00FC               	movwf	??_GetKeyDate
  6219  0100  087C               	movf	??_GetKeyDate,w
  6220  0101  1683               	bsf	3,5	;RP0=1, select bank1
  6221  0102  1303               	bcf	3,6	;RP1=0, select bank1
  6222  0103  00DA               	movwf	_cDAY^(0+128)
  6223  0104                     l328:	
  6224                           
  6225                           ;keypad.h: 169: }
  6226                           ;keypad.h: 172: return key;
  6227  0104  087D               	movf	GetKeyDate@key,w
  6228  0105  0008               	return
  6229  0106                     __end_of_GetKeyDate:	
  6230                           
  6231                           	psect	text24
  6232  1C4A                     __ptext24:	
  6233 ;; *************** function _strcpy *****************
  6234 ;; Defined at:
  6235 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  6236 ;; Parameters:    Size  Location     Type
  6237 ;;  to              1    wreg     PTR unsigned char 
  6238 ;;		 -> DAY(10), ap(5), 
  6239 ;;  from            2    0[COMMON] PTR const unsigned char 
  6240 ;;		 -> STR_9(4), STR_8(4), STR_7(4), STR_6(4), 
  6241 ;;		 -> STR_5(4), STR_4(4), STR_3(4), STR_2(3), 
  6242 ;;		 -> STR_1(3), 
  6243 ;; Auto vars:     Size  Location     Type
  6244 ;;  to              1    4[COMMON] PTR unsigned char 
  6245 ;;		 -> DAY(10), ap(5), 
  6246 ;;  cp              1    3[COMMON] PTR unsigned char 
  6247 ;;		 -> DAY(10), ap(5), 
  6248 ;; Return value:  Size  Location     Type
  6249 ;;                  1    wreg      PTR unsigned char 
  6250 ;; Registers used:
  6251 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  6252 ;; Tracked objects:
  6253 ;;		On entry : 0/0
  6254 ;;		On exit  : 0/0
  6255 ;;		Unchanged: 0/0
  6256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6257 ;;      Params:         2       0       0       0       0
  6258 ;;      Locals:         2       0       0       0       0
  6259 ;;      Temps:          1       0       0       0       0
  6260 ;;      Totals:         5       0       0       0       0
  6261 ;;Total ram usage:        5 bytes
  6262 ;; Hardware stack levels used:    2
  6263 ;; This function calls:
  6264 ;;		Nothing
  6265 ;; This function is called by:
  6266 ;;		_GetKeyTime
  6267 ;;		_GetKeyDate
  6268 ;; This function uses a non-reentrant model
  6269 ;;
  6270                           
  6271                           
  6272                           ;psect for function _strcpy
  6273  1C4A                     _strcpy:	
  6274                           
  6275                           ;incstack = 0
  6276                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  6277                           ;strcpy@to stored from wreg
  6278  1C4A  00F4               	movwf	strcpy@to
  6279  1C4B  0874               	movf	strcpy@to,w
  6280  1C4C  00F2               	movwf	??_strcpy
  6281  1C4D  0872               	movf	??_strcpy,w
  6282  1C4E  00F3               	movwf	strcpy@cp
  6283  1C4F                     l3060:	
  6284  1C4F  0871               	movf	strcpy@from+1,w
  6285  1C50  1283               	bcf	3,5	;RP0=0, select bank0
  6286  1C51  1303               	bcf	3,6	;RP1=0, select bank0
  6287  1C52  00FF               	movwf	127
  6288  1C53  0870               	movf	strcpy@from,w
  6289  1C54  0084               	movwf	4
  6290  1C55  120A  158A  2000  160A  158A  	fcall	stringtab
  6291  1C5A  00F2               	movwf	??_strcpy
  6292  1C5B  0873               	movf	strcpy@cp,w
  6293  1C5C  0084               	movwf	4
  6294  1C5D  0872               	movf	??_strcpy,w
  6295  1C5E  1383               	bcf	3,7	;select IRP bank0
  6296  1C5F  0080               	movwf	0
  6297  1C60  0800               	movf	0,w
  6298  1C61  1903               	btfsc	3,2
  6299  1C62  0008               	return
  6300  1C63  3001               	movlw	1
  6301  1C64  00F2               	movwf	??_strcpy
  6302  1C65  0872               	movf	??_strcpy,w
  6303  1C66  07F3               	addwf	strcpy@cp,f
  6304  1C67  3001               	movlw	1
  6305  1C68  07F0               	addwf	strcpy@from,f
  6306  1C69  1803               	skipnc
  6307  1C6A  0AF1               	incf	strcpy@from+1,f
  6308  1C6B  2C4F               	goto	l3060
  6309  1C6C                     __end_of_strcpy:	
  6310                           ;	Return value of _strcpy is never used
  6311                           
  6312                           
  6313                           	psect	text25
  6314  1B55                     __ptext25:	
  6315 ;; *************** function _GetKey *****************
  6316 ;; Defined at:
  6317 ;;		line 77 in file "keypad.h"
  6318 ;; Parameters:    Size  Location     Type
  6319 ;;		None
  6320 ;; Auto vars:     Size  Location     Type
  6321 ;;  key             1    4[COMMON] unsigned char 
  6322 ;; Return value:  Size  Location     Type
  6323 ;;                  1    wreg      unsigned char 
  6324 ;; Registers used:
  6325 ;;		wreg, status,2, status,0, pclath, cstack
  6326 ;; Tracked objects:
  6327 ;;		On entry : 0/0
  6328 ;;		On exit  : 0/0
  6329 ;;		Unchanged: 0/0
  6330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6331 ;;      Params:         0       0       0       0       0
  6332 ;;      Locals:         1       0       0       0       0
  6333 ;;      Temps:          1       0       0       0       0
  6334 ;;      Totals:         2       0       0       0       0
  6335 ;;Total ram usage:        2 bytes
  6336 ;; Hardware stack levels used:    1
  6337 ;; Hardware stack levels required when called:    1
  6338 ;; This function calls:
  6339 ;;		_READ_SWITCHES
  6340 ;; This function is called by:
  6341 ;;		_Settings
  6342 ;; This function uses a non-reentrant model
  6343 ;;
  6344                           
  6345                           
  6346                           ;psect for function _GetKey
  6347  1B55                     _GetKey:	
  6348                           
  6349                           ;keypad.h: 79: char key = 'n';
  6350                           
  6351                           ;incstack = 0
  6352                           ; Regs used in _GetKey: [wreg+status,2+status,0+pclath+cstack]
  6353  1B55  306E               	movlw	110
  6354  1B56                     L10:	
  6355  1B56  00F3               	movwf	??_GetKey
  6356  1B57  0873               	movf	??_GetKey,w
  6357  1B58  00F4               	movwf	GetKey@key
  6358  1B59  306E               	movlw	110
  6359  1B5A  0674               	xorwf	GetKey@key,w
  6360  1B5B  1D03               	btfss	3,2
  6361  1B5C  2B63               	goto	l3374
  6362                           
  6363                           ;keypad.h: 82: key = READ_SWITCHES();
  6364                           
  6365                           ;keypad.h: 81: while(key=='n')
  6366  1B5D  120A  158A  269C  160A  158A  	fcall	_READ_SWITCHES
  6367  1B62  2B56               	goto	L10
  6368  1B63                     l3374:	
  6369                           
  6370                           ;keypad.h: 84: return key;
  6371  1B63  0874               	movf	GetKey@key,w
  6372  1B64  0008               	return
  6373  1B65                     __end_of_GetKey:	
  6374                           
  6375                           	psect	text26
  6376  1D89                     __ptext26:	
  6377 ;; *************** function _EEPROMSET *****************
  6378 ;; Defined at:
  6379 ;;		line 30 in file "RTC_F.c"
  6380 ;; Parameters:    Size  Location     Type
  6381 ;;		None
  6382 ;; Auto vars:     Size  Location     Type
  6383 ;;  x               2    6[COMMON] int 
  6384 ;; Return value:  Size  Location     Type
  6385 ;;		None               void
  6386 ;; Registers used:
  6387 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6388 ;; Tracked objects:
  6389 ;;		On entry : 0/0
  6390 ;;		On exit  : 0/0
  6391 ;;		Unchanged: 0/0
  6392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6393 ;;      Params:         0       0       0       0       0
  6394 ;;      Locals:         2       0       0       0       0
  6395 ;;      Temps:          2       0       0       0       0
  6396 ;;      Totals:         4       0       0       0       0
  6397 ;;Total ram usage:        4 bytes
  6398 ;; Hardware stack levels used:    1
  6399 ;; Hardware stack levels required when called:    1
  6400 ;; This function calls:
  6401 ;;		_writeEEPROM
  6402 ;; This function is called by:
  6403 ;;		_Settings
  6404 ;; This function uses a non-reentrant model
  6405 ;;
  6406                           
  6407                           
  6408                           ;psect for function _EEPROMSET
  6409  1D89                     _EEPROMSET:	
  6410                           
  6411                           ;RTC_F.c: 32: int x;
  6412                           ;RTC_F.c: 33: for(x=0;x<12;x++)
  6413                           
  6414                           ;incstack = 0
  6415                           ; Regs used in _EEPROMSET: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6416  1D89  01F6               	clrf	EEPROMSET@x
  6417  1D8A  01F7               	clrf	EEPROMSET@x+1
  6418  1D8B  0877               	movf	EEPROMSET@x+1,w
  6419  1D8C  3A80               	xorlw	128
  6420  1D8D  00FF               	movwf	127
  6421  1D8E  3080               	movlw	128
  6422  1D8F  027F               	subwf	127,w
  6423  1D90  1D03               	skipz
  6424  1D91  2D94               	goto	u3565
  6425  1D92  300C               	movlw	12
  6426  1D93  0276               	subwf	EEPROMSET@x,w
  6427  1D94                     u3565:	
  6428  1D94  1803               	btfsc	3,0
  6429  1D95  2DB5               	goto	l3628
  6430  1D96                     l3622:	
  6431                           
  6432                           ;RTC_F.c: 34: writeEEPROM(x,number[x]);
  6433  1D96  0876               	movf	EEPROMSET@x,w
  6434  1D97  3EAD               	addlw	(low (_number| 0))& (0+255)
  6435  1D98  0084               	movwf	4
  6436  1D99  1383               	bcf	3,7	;select IRP bank1
  6437  1D9A  0800               	movf	0,w
  6438  1D9B  00F4               	movwf	??_EEPROMSET
  6439  1D9C  0874               	movf	??_EEPROMSET,w
  6440  1D9D  00F0               	movwf	writeEEPROM@datas
  6441  1D9E  0876               	movf	EEPROMSET@x,w
  6442  1D9F  160A  158A  23EB  160A  158A  	fcall	_writeEEPROM
  6443  1DA4  3001               	movlw	1
  6444  1DA5  07F6               	addwf	EEPROMSET@x,f
  6445  1DA6  1803               	skipnc
  6446  1DA7  0AF7               	incf	EEPROMSET@x+1,f
  6447  1DA8  3000               	movlw	0
  6448  1DA9  07F7               	addwf	EEPROMSET@x+1,f
  6449  1DAA  0877               	movf	EEPROMSET@x+1,w
  6450  1DAB  3A80               	xorlw	128
  6451  1DAC  00FF               	movwf	127
  6452  1DAD  3080               	movlw	128
  6453  1DAE  027F               	subwf	127,w
  6454  1DAF  1D03               	skipz
  6455  1DB0  2DB3               	goto	u3575
  6456  1DB1  300C               	movlw	12
  6457  1DB2  0276               	subwf	EEPROMSET@x,w
  6458  1DB3                     u3575:	
  6459  1DB3  1C03               	skipc
  6460  1DB4  2D96               	goto	l3622
  6461  1DB5                     l3628:	
  6462                           
  6463                           ;RTC_F.c: 35: _delay((unsigned long)((50)*(8000000/4000.0)));
  6464  1DB5  3082               	movlw	130
  6465  1DB6  00F5               	movwf	??_EEPROMSET+1
  6466  1DB7  30DD               	movlw	221
  6467  1DB8  00F4               	movwf	??_EEPROMSET
  6468  1DB9                     u4637:	
  6469  1DB9  0BF4               	decfsz	??_EEPROMSET,f
  6470  1DBA  2DB9               	goto	u4637
  6471  1DBB  0BF5               	decfsz	??_EEPROMSET+1,f
  6472  1DBC  2DB9               	goto	u4637
  6473  1DBD  2DBE               	nop2
  6474  1DBE  0008               	return
  6475  1DBF                     __end_of_EEPROMSET:	
  6476                           
  6477                           	psect	text27
  6478  1BEB                     __ptext27:	
  6479 ;; *************** function _writeEEPROM *****************
  6480 ;; Defined at:
  6481 ;;		line 16 in file "EEPROM.h"
  6482 ;; Parameters:    Size  Location     Type
  6483 ;;  address         1    wreg     unsigned char 
  6484 ;;  datas           1    0[COMMON] unsigned char 
  6485 ;; Auto vars:     Size  Location     Type
  6486 ;;  address         1    2[COMMON] unsigned char 
  6487 ;;  INTCON_SAVE     1    3[COMMON] unsigned char 
  6488 ;; Return value:  Size  Location     Type
  6489 ;;		None               void
  6490 ;; Registers used:
  6491 ;;		wreg, status,2
  6492 ;; Tracked objects:
  6493 ;;		On entry : 0/0
  6494 ;;		On exit  : 0/0
  6495 ;;		Unchanged: 0/0
  6496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6497 ;;      Params:         1       0       0       0       0
  6498 ;;      Locals:         2       0       0       0       0
  6499 ;;      Temps:          1       0       0       0       0
  6500 ;;      Totals:         4       0       0       0       0
  6501 ;;Total ram usage:        4 bytes
  6502 ;; Hardware stack levels used:    1
  6503 ;; This function calls:
  6504 ;;		Nothing
  6505 ;; This function is called by:
  6506 ;;		_EEPROMSET
  6507 ;; This function uses a non-reentrant model
  6508 ;;
  6509                           
  6510                           
  6511                           ;psect for function _writeEEPROM
  6512  1BEB                     _writeEEPROM:	
  6513                           
  6514                           ;incstack = 0
  6515                           ; Regs used in _writeEEPROM: [wreg+status,2]
  6516                           ;writeEEPROM@address stored from wreg
  6517  1BEB  00F2               	movwf	writeEEPROM@address
  6518                           
  6519                           ;EEPROM.h: 18: unsigned char INTCON_SAVE;
  6520                           ;EEPROM.h: 19: EEADR = address;
  6521  1BEC  0872               	movf	writeEEPROM@address,w
  6522  1BED  1283               	bcf	3,5	;RP0=0, select bank2
  6523  1BEE  1703               	bsf	3,6	;RP1=1, select bank2
  6524  1BEF  008D               	movwf	13	;volatile
  6525                           
  6526                           ;EEPROM.h: 20: EEDATA = datas;
  6527  1BF0  0870               	movf	writeEEPROM@datas,w
  6528  1BF1  008C               	movwf	12	;volatile
  6529                           
  6530                           ;EEPROM.h: 21: EEPGD = 0;
  6531  1BF2  1683               	bsf	3,5	;RP0=1, select bank3
  6532  1BF3  1703               	bsf	3,6	;RP1=1, select bank3
  6533  1BF4  138C               	bcf	12,7	;volsfr
  6534                           
  6535                           ;EEPROM.h: 22: WREN = 1;
  6536  1BF5  150C               	bsf	12,2	;volsfr
  6537                           
  6538                           ;EEPROM.h: 23: INTCON_SAVE=INTCON;
  6539  1BF6  080B               	movf	11,w	;volatile
  6540  1BF7  00F1               	movwf	??_writeEEPROM
  6541  1BF8  0871               	movf	??_writeEEPROM,w
  6542  1BF9  00F3               	movwf	writeEEPROM@INTCON_SAVE
  6543                           
  6544                           ;EEPROM.h: 24: INTCON=0;
  6545  1BFA  018B               	clrf	11	;volatile
  6546                           
  6547                           ;EEPROM.h: 25: EECON2=0x55;
  6548  1BFB  3055               	movlw	85
  6549  1BFC  008D               	movwf	13	;volsfr
  6550                           
  6551                           ;EEPROM.h: 26: EECON2=0xAA;
  6552  1BFD  30AA               	movlw	170
  6553  1BFE  008D               	movwf	13	;volsfr
  6554                           
  6555                           ;EEPROM.h: 27: WR = 1;
  6556  1BFF  148C               	bsf	12,1	;volsfr
  6557                           
  6558                           ;EEPROM.h: 28: INTCON = INTCON_SAVE;
  6559  1C00  0873               	movf	writeEEPROM@INTCON_SAVE,w
  6560  1C01  008B               	movwf	11	;volatile
  6561                           
  6562                           ;EEPROM.h: 29: WREN = 0;
  6563  1C02  110C               	bcf	12,2	;volsfr
  6564  1C03                     l419:	
  6565                           ;EEPROM.h: 31: {
  6566                           
  6567                           ;EEPROM.h: 30: while(EEIF == 0)
  6568                           
  6569  1C03  1283               	bcf	3,5	;RP0=0, select bank0
  6570  1C04  1303               	bcf	3,6	;RP1=0, select bank0
  6571  1C05  1E0D               	btfss	13,4	;volatile
  6572  1C06  2C03               	goto	l419
  6573                           
  6574                           ;EEPROM.h: 33: }
  6575                           ;EEPROM.h: 34: EEIF = 0;
  6576  1C07  120D               	bcf	13,4	;volatile
  6577  1C08  0008               	return
  6578  1C09                     __end_of_writeEEPROM:	
  6579                           
  6580                           	psect	text28
  6581  0BFF                     __ptext28:	
  6582 ;; *************** function _DisplayTimeToLCD *****************
  6583 ;; Defined at:
  6584 ;;		line 11 in file "DateTimeDisplay.h"
  6585 ;; Parameters:    Size  Location     Type
  6586 ;;  pTimeArray      1    wreg     PTR unsigned char 
  6587 ;;		 -> pRTCArray(4), 
  6588 ;; Auto vars:     Size  Location     Type
  6589 ;;  pTimeArray      1    0[BANK0 ] PTR unsigned char 
  6590 ;;		 -> pRTCArray(4), 
  6591 ;; Return value:  Size  Location     Type
  6592 ;;		None               void
  6593 ;; Registers used:
  6594 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6595 ;; Tracked objects:
  6596 ;;		On entry : 0/0
  6597 ;;		On exit  : 0/0
  6598 ;;		Unchanged: 0/0
  6599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6600 ;;      Params:         0       0       0       0       0
  6601 ;;      Locals:         0       1       0       0       0
  6602 ;;      Temps:          2       0       0       0       0
  6603 ;;      Totals:         2       1       0       0       0
  6604 ;;Total ram usage:        3 bytes
  6605 ;; Hardware stack levels used:    1
  6606 ;; Hardware stack levels required when called:    3
  6607 ;; This function calls:
  6608 ;;		_Lcd_Clear
  6609 ;;		_Lcd_Set_Cursor
  6610 ;;		_Lcd_Write_Char
  6611 ;;		_Lcd_Write_String
  6612 ;;		___awdiv
  6613 ;;		___awmod
  6614 ;; This function is called by:
  6615 ;;		_Settings
  6616 ;; This function uses a non-reentrant model
  6617 ;;
  6618                           
  6619                           
  6620                           ;psect for function _DisplayTimeToLCD
  6621  0BFF                     _DisplayTimeToLCD:	
  6622                           
  6623                           ;incstack = 0
  6624                           ; Regs used in _DisplayTimeToLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6625                           ;DisplayTimeToLCD@pTimeArray stored from wreg
  6626  0BFF  1283               	bcf	3,5	;RP0=0, select bank0
  6627  0C00  1303               	bcf	3,6	;RP1=0, select bank0
  6628  0C01  00A0               	movwf	DisplayTimeToLCD@pTimeArray
  6629                           
  6630                           ;DateTimeDisplay.h: 14: Lcd_Clear();
  6631  0C02  160A  158A  2331  120A  158A  	fcall	_Lcd_Clear
  6632                           
  6633                           ;DateTimeDisplay.h: 16: Lcd_Set_Cursor(1,1);
  6634  0C07  01F4               	clrf	Lcd_Set_Cursor@b
  6635  0C08  0AF4               	incf	Lcd_Set_Cursor@b,f
  6636  0C09  3001               	movlw	1
  6637  0C0A  160A  158A  276B  120A  158A  	fcall	_Lcd_Set_Cursor
  6638                           
  6639                           ;DateTimeDisplay.h: 17: Lcd_Write_Char((pTimeArray[2]/10)+0x30 );
  6640  0C0F  300A               	movlw	10
  6641  0C10  00F0               	movwf	___awdiv@divisor
  6642  0C11  3000               	movlw	0
  6643  0C12  00F1               	movwf	___awdiv@divisor+1
  6644  0C13  1283               	bcf	3,5	;RP0=0, select bank0
  6645  0C14  1303               	bcf	3,6	;RP1=0, select bank0
  6646  0C15  0820               	movf	DisplayTimeToLCD@pTimeArray,w
  6647  0C16  3E02               	addlw	2
  6648  0C17  0084               	movwf	4
  6649  0C18  1383               	bcf	3,7	;select IRP bank0
  6650  0C19  0800               	movf	0,w
  6651  0C1A  00FC               	movwf	??_DisplayTimeToLCD
  6652  0C1B  01FD               	clrf	??_DisplayTimeToLCD+1
  6653  0C1C  087C               	movf	??_DisplayTimeToLCD,w
  6654  0C1D  00F2               	movwf	___awdiv@dividend
  6655  0C1E  087D               	movf	??_DisplayTimeToLCD+1,w
  6656  0C1F  00F3               	movwf	___awdiv@dividend+1
  6657  0C20  160A  118A  200F  120A  158A  	fcall	___awdiv
  6658  0C25  0870               	movf	?___awdiv,w
  6659  0C26  3E30               	addlw	48
  6660  0C27  160A  158A  262F  120A  158A  	fcall	_Lcd_Write_Char
  6661                           
  6662                           ;DateTimeDisplay.h: 18: Lcd_Set_Cursor(1,2);
  6663  0C2C  3002               	movlw	2
  6664  0C2D  00FC               	movwf	??_DisplayTimeToLCD
  6665  0C2E  087C               	movf	??_DisplayTimeToLCD,w
  6666  0C2F  00F4               	movwf	Lcd_Set_Cursor@b
  6667  0C30  3001               	movlw	1
  6668  0C31  160A  158A  276B  120A  158A  	fcall	_Lcd_Set_Cursor
  6669                           
  6670                           ;DateTimeDisplay.h: 19: Lcd_Write_Char((pTimeArray[2]%10)+0x30 );
  6671  0C36  300A               	movlw	10
  6672  0C37  00F0               	movwf	___awmod@divisor
  6673  0C38  3000               	movlw	0
  6674  0C39  00F1               	movwf	___awmod@divisor+1
  6675  0C3A  1283               	bcf	3,5	;RP0=0, select bank0
  6676  0C3B  1303               	bcf	3,6	;RP1=0, select bank0
  6677  0C3C  0820               	movf	DisplayTimeToLCD@pTimeArray,w
  6678  0C3D  3E02               	addlw	2
  6679  0C3E  0084               	movwf	4
  6680  0C3F  1383               	bcf	3,7	;select IRP bank0
  6681  0C40  0800               	movf	0,w
  6682  0C41  00FC               	movwf	??_DisplayTimeToLCD
  6683  0C42  01FD               	clrf	??_DisplayTimeToLCD+1
  6684  0C43  087C               	movf	??_DisplayTimeToLCD,w
  6685  0C44  00F2               	movwf	___awmod@dividend
  6686  0C45  087D               	movf	??_DisplayTimeToLCD+1,w
  6687  0C46  00F3               	movwf	___awmod@dividend+1
  6688  0C47  160A  158A  27B5  120A  158A  	fcall	___awmod
  6689  0C4C  0870               	movf	?___awmod,w
  6690  0C4D  3E30               	addlw	48
  6691  0C4E  160A  158A  262F  120A  158A  	fcall	_Lcd_Write_Char
  6692                           
  6693                           ;DateTimeDisplay.h: 20: Lcd_Set_Cursor(1,3);
  6694  0C53  3003               	movlw	3
  6695  0C54  00FC               	movwf	??_DisplayTimeToLCD
  6696  0C55  087C               	movf	??_DisplayTimeToLCD,w
  6697  0C56  00F4               	movwf	Lcd_Set_Cursor@b
  6698  0C57  3001               	movlw	1
  6699  0C58  160A  158A  276B  120A  158A  	fcall	_Lcd_Set_Cursor
  6700                           
  6701                           ;DateTimeDisplay.h: 22: Lcd_Write_Char(':');
  6702  0C5D  303A               	movlw	58
  6703  0C5E  160A  158A  262F  120A  158A  	fcall	_Lcd_Write_Char
  6704                           
  6705                           ;DateTimeDisplay.h: 25: Lcd_Set_Cursor(1,4);
  6706  0C63  3004               	movlw	4
  6707  0C64  00FC               	movwf	??_DisplayTimeToLCD
  6708  0C65  087C               	movf	??_DisplayTimeToLCD,w
  6709  0C66  00F4               	movwf	Lcd_Set_Cursor@b
  6710  0C67  3001               	movlw	1
  6711  0C68  160A  158A  276B  120A  158A  	fcall	_Lcd_Set_Cursor
  6712                           
  6713                           ;DateTimeDisplay.h: 26: Lcd_Write_Char((pTimeArray[1]/10)+0x30 );
  6714  0C6D  300A               	movlw	10
  6715  0C6E  00F0               	movwf	___awdiv@divisor
  6716  0C6F  3000               	movlw	0
  6717  0C70  00F1               	movwf	___awdiv@divisor+1
  6718  0C71  1283               	bcf	3,5	;RP0=0, select bank0
  6719  0C72  1303               	bcf	3,6	;RP1=0, select bank0
  6720  0C73  0A20               	incf	DisplayTimeToLCD@pTimeArray,w
  6721  0C74  0084               	movwf	4
  6722  0C75  1383               	bcf	3,7	;select IRP bank0
  6723  0C76  0800               	movf	0,w
  6724  0C77  00FC               	movwf	??_DisplayTimeToLCD
  6725  0C78  01FD               	clrf	??_DisplayTimeToLCD+1
  6726  0C79  087C               	movf	??_DisplayTimeToLCD,w
  6727  0C7A  00F2               	movwf	___awdiv@dividend
  6728  0C7B  087D               	movf	??_DisplayTimeToLCD+1,w
  6729  0C7C  00F3               	movwf	___awdiv@dividend+1
  6730  0C7D  160A  118A  200F  120A  158A  	fcall	___awdiv
  6731  0C82  0870               	movf	?___awdiv,w
  6732  0C83  3E30               	addlw	48
  6733  0C84  160A  158A  262F  120A  158A  	fcall	_Lcd_Write_Char
  6734                           
  6735                           ;DateTimeDisplay.h: 27: Lcd_Set_Cursor(1,5);
  6736  0C89  3005               	movlw	5
  6737  0C8A  00FC               	movwf	??_DisplayTimeToLCD
  6738  0C8B  087C               	movf	??_DisplayTimeToLCD,w
  6739  0C8C  00F4               	movwf	Lcd_Set_Cursor@b
  6740  0C8D  3001               	movlw	1
  6741  0C8E  160A  158A  276B  120A  158A  	fcall	_Lcd_Set_Cursor
  6742                           
  6743                           ;DateTimeDisplay.h: 28: Lcd_Write_Char((pTimeArray[1]%10)+0x30 );
  6744  0C93  300A               	movlw	10
  6745  0C94  00F0               	movwf	___awmod@divisor
  6746  0C95  3000               	movlw	0
  6747  0C96  00F1               	movwf	___awmod@divisor+1
  6748  0C97  1283               	bcf	3,5	;RP0=0, select bank0
  6749  0C98  1303               	bcf	3,6	;RP1=0, select bank0
  6750  0C99  0A20               	incf	DisplayTimeToLCD@pTimeArray,w
  6751  0C9A  0084               	movwf	4
  6752  0C9B  1383               	bcf	3,7	;select IRP bank0
  6753  0C9C  0800               	movf	0,w
  6754  0C9D  00FC               	movwf	??_DisplayTimeToLCD
  6755  0C9E  01FD               	clrf	??_DisplayTimeToLCD+1
  6756  0C9F  087C               	movf	??_DisplayTimeToLCD,w
  6757  0CA0  00F2               	movwf	___awmod@dividend
  6758  0CA1  087D               	movf	??_DisplayTimeToLCD+1,w
  6759  0CA2  00F3               	movwf	___awmod@dividend+1
  6760  0CA3  160A  158A  27B5  120A  158A  	fcall	___awmod
  6761  0CA8  0870               	movf	?___awmod,w
  6762  0CA9  3E30               	addlw	48
  6763  0CAA  160A  158A  262F  120A  158A  	fcall	_Lcd_Write_Char
  6764                           
  6765                           ;DateTimeDisplay.h: 30: Lcd_Set_Cursor(1,6);
  6766  0CAF  3006               	movlw	6
  6767  0CB0  00FC               	movwf	??_DisplayTimeToLCD
  6768  0CB1  087C               	movf	??_DisplayTimeToLCD,w
  6769  0CB2  00F4               	movwf	Lcd_Set_Cursor@b
  6770  0CB3  3001               	movlw	1
  6771  0CB4  160A  158A  276B  120A  158A  	fcall	_Lcd_Set_Cursor
  6772                           
  6773                           ;DateTimeDisplay.h: 32: Lcd_Write_Char(':');
  6774  0CB9  303A               	movlw	58
  6775  0CBA  160A  158A  262F  120A  158A  	fcall	_Lcd_Write_Char
  6776                           
  6777                           ;DateTimeDisplay.h: 33: Lcd_Set_Cursor(1,7);
  6778  0CBF  3007               	movlw	7
  6779  0CC0  00FC               	movwf	??_DisplayTimeToLCD
  6780  0CC1  087C               	movf	??_DisplayTimeToLCD,w
  6781  0CC2  00F4               	movwf	Lcd_Set_Cursor@b
  6782  0CC3  3001               	movlw	1
  6783  0CC4  160A  158A  276B  120A  158A  	fcall	_Lcd_Set_Cursor
  6784                           
  6785                           ;DateTimeDisplay.h: 35: Lcd_Write_Char((pTimeArray[0]/10)+0x30 );
  6786  0CC9  300A               	movlw	10
  6787  0CCA  00F0               	movwf	___awdiv@divisor
  6788  0CCB  3000               	movlw	0
  6789  0CCC  00F1               	movwf	___awdiv@divisor+1
  6790  0CCD  1283               	bcf	3,5	;RP0=0, select bank0
  6791  0CCE  1303               	bcf	3,6	;RP1=0, select bank0
  6792  0CCF  0820               	movf	DisplayTimeToLCD@pTimeArray,w
  6793  0CD0  0084               	movwf	4
  6794  0CD1  1383               	bcf	3,7	;select IRP bank0
  6795  0CD2  0800               	movf	0,w
  6796  0CD3  00FC               	movwf	??_DisplayTimeToLCD
  6797  0CD4  01FD               	clrf	??_DisplayTimeToLCD+1
  6798  0CD5  087C               	movf	??_DisplayTimeToLCD,w
  6799  0CD6  00F2               	movwf	___awdiv@dividend
  6800  0CD7  087D               	movf	??_DisplayTimeToLCD+1,w
  6801  0CD8  00F3               	movwf	___awdiv@dividend+1
  6802  0CD9  160A  118A  200F  120A  158A  	fcall	___awdiv
  6803  0CDE  0870               	movf	?___awdiv,w
  6804  0CDF  3E30               	addlw	48
  6805  0CE0  160A  158A  262F  120A  158A  	fcall	_Lcd_Write_Char
  6806                           
  6807                           ;DateTimeDisplay.h: 36: Lcd_Set_Cursor(1,8);
  6808  0CE5  3008               	movlw	8
  6809  0CE6  00FC               	movwf	??_DisplayTimeToLCD
  6810  0CE7  087C               	movf	??_DisplayTimeToLCD,w
  6811  0CE8  00F4               	movwf	Lcd_Set_Cursor@b
  6812  0CE9  3001               	movlw	1
  6813  0CEA  160A  158A  276B  120A  158A  	fcall	_Lcd_Set_Cursor
  6814                           
  6815                           ;DateTimeDisplay.h: 37: Lcd_Write_Char((pTimeArray[0]%10)+0x30 );
  6816  0CEF  300A               	movlw	10
  6817  0CF0  00F0               	movwf	___awmod@divisor
  6818  0CF1  3000               	movlw	0
  6819  0CF2  00F1               	movwf	___awmod@divisor+1
  6820  0CF3  1283               	bcf	3,5	;RP0=0, select bank0
  6821  0CF4  1303               	bcf	3,6	;RP1=0, select bank0
  6822  0CF5  0820               	movf	DisplayTimeToLCD@pTimeArray,w
  6823  0CF6  0084               	movwf	4
  6824  0CF7  1383               	bcf	3,7	;select IRP bank0
  6825  0CF8  0800               	movf	0,w
  6826  0CF9  00FC               	movwf	??_DisplayTimeToLCD
  6827  0CFA  01FD               	clrf	??_DisplayTimeToLCD+1
  6828  0CFB  087C               	movf	??_DisplayTimeToLCD,w
  6829  0CFC  00F2               	movwf	___awmod@dividend
  6830  0CFD  087D               	movf	??_DisplayTimeToLCD+1,w
  6831  0CFE  00F3               	movwf	___awmod@dividend+1
  6832  0CFF  160A  158A  27B5  120A  158A  	fcall	___awmod
  6833  0D04  0870               	movf	?___awmod,w
  6834  0D05  3E30               	addlw	48
  6835  0D06  160A  158A  262F  120A  158A  	fcall	_Lcd_Write_Char
  6836                           
  6837                           ;DateTimeDisplay.h: 39: Lcd_Set_Cursor(1,9);
  6838  0D0B  3009               	movlw	9
  6839  0D0C  00FC               	movwf	??_DisplayTimeToLCD
  6840  0D0D  087C               	movf	??_DisplayTimeToLCD,w
  6841  0D0E  00F4               	movwf	Lcd_Set_Cursor@b
  6842  0D0F  3001               	movlw	1
  6843  0D10  160A  158A  276B  120A  158A  	fcall	_Lcd_Set_Cursor
  6844                           
  6845                           ;DateTimeDisplay.h: 41: Lcd_Write_Char(' ');
  6846  0D15  3020               	movlw	32
  6847  0D16  160A  158A  262F  120A  158A  	fcall	_Lcd_Write_Char
  6848                           
  6849                           ;DateTimeDisplay.h: 42: Lcd_Set_Cursor(1,10);
  6850  0D1B  300A               	movlw	10
  6851  0D1C  00FC               	movwf	??_DisplayTimeToLCD
  6852  0D1D  087C               	movf	??_DisplayTimeToLCD,w
  6853  0D1E  00F4               	movwf	Lcd_Set_Cursor@b
  6854  0D1F  3001               	movlw	1
  6855  0D20  160A  158A  276B  120A  158A  	fcall	_Lcd_Set_Cursor
  6856                           
  6857                           ;DateTimeDisplay.h: 44: switch(pTimeArray[3])
  6858  0D25  2D36               	goto	l3560
  6859  0D26                     l3554:	
  6860                           ;DateTimeDisplay.h: 45: {
  6861                           ;DateTimeDisplay.h: 46: case 0: Lcd_Write_String("AM"); break;
  6862                           
  6863  0D26  3005               	movlw	low (STR_1| (0+32768))
  6864  0D27  00F5               	movwf	Lcd_Write_String@a
  6865  0D28  308A               	movlw	high (STR_1| (0+32768))
  6866  0D29  00F6               	movwf	Lcd_Write_String@a+1
  6867  0D2A  160A  158A  26A4   	fcall	_Lcd_Write_String
  6868  0D2D  0008               	return
  6869  0D2E                     l3556:	
  6870                           ;DateTimeDisplay.h: 47: case 1: Lcd_Write_String("PM"); break;
  6871                           
  6872  0D2E  3014               	movlw	low ((STR_36+12)| (0+32768))
  6873  0D2F  00F5               	movwf	Lcd_Write_String@a
  6874  0D30  3089               	movlw	high ((STR_36+12)| (0+32768))
  6875  0D31  00F6               	movwf	Lcd_Write_String@a+1
  6876  0D32  160A  158A  26A4   	fcall	_Lcd_Write_String
  6877                           
  6878                           ;DateTimeDisplay.h: 51: }
  6879                           
  6880                           ;DateTimeDisplay.h: 50: break;
  6881                           
  6882                           ;DateTimeDisplay.h: 49: default:
  6883  0D35  0008               	return
  6884  0D36                     l3560:	
  6885  0D36  1283               	bcf	3,5	;RP0=0, select bank0
  6886  0D37  1303               	bcf	3,6	;RP1=0, select bank0
  6887  0D38  0820               	movf	DisplayTimeToLCD@pTimeArray,w
  6888  0D39  3E03               	addlw	3
  6889  0D3A  0084               	movwf	4
  6890  0D3B  1383               	bcf	3,7	;select IRP bank0
  6891  0D3C  0800               	movf	0,w
  6892                           
  6893                           ; Switch size 1, requested type "space"
  6894                           ; Number of cases is 2, Range of values is 0 to 1
  6895                           ; switch strategies available:
  6896                           ; Name         Instructions Cycles
  6897                           ; simple_byte            7     4 (average)
  6898                           ; direct_byte           14     8 (fixed)
  6899                           ; jumptable            260     6 (fixed)
  6900                           ;	Chosen strategy is simple_byte
  6901  0D3D  3A00               	xorlw	0	; case 0
  6902  0D3E  1903               	skipnz
  6903  0D3F  2D26               	goto	l3554
  6904  0D40  3A01               	xorlw	1	; case 1
  6905  0D41  1903               	skipnz
  6906  0D42  2D2E               	goto	l3556
  6907  0D43  2D44               	goto	l400
  6908  0D44                     l400:	
  6909  0D44  0008               	return
  6910  0D45                     __end_of_DisplayTimeToLCD:	
  6911                           
  6912                           	psect	text29
  6913  0106                     __ptext29:	
  6914 ;; *************** function _DisplayDateOnLCD *****************
  6915 ;; Defined at:
  6916 ;;		line 57 in file "DateTimeDisplay.h"
  6917 ;; Parameters:    Size  Location     Type
  6918 ;;  pDateArray      1    wreg     PTR unsigned char 
  6919 ;;		 -> pRTCArray(4), 
  6920 ;; Auto vars:     Size  Location     Type
  6921 ;;  pDateArray      1    0[BANK0 ] PTR unsigned char 
  6922 ;;		 -> pRTCArray(4), 
  6923 ;; Return value:  Size  Location     Type
  6924 ;;		None               void
  6925 ;; Registers used:
  6926 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6927 ;; Tracked objects:
  6928 ;;		On entry : 0/0
  6929 ;;		On exit  : 0/0
  6930 ;;		Unchanged: 0/0
  6931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6932 ;;      Params:         0       0       0       0       0
  6933 ;;      Locals:         0       1       0       0       0
  6934 ;;      Temps:          2       0       0       0       0
  6935 ;;      Totals:         2       1       0       0       0
  6936 ;;Total ram usage:        3 bytes
  6937 ;; Hardware stack levels used:    1
  6938 ;; Hardware stack levels required when called:    3
  6939 ;; This function calls:
  6940 ;;		_Lcd_Set_Cursor
  6941 ;;		_Lcd_Write_Char
  6942 ;;		_Lcd_Write_String
  6943 ;;		___awdiv
  6944 ;;		___awmod
  6945 ;; This function is called by:
  6946 ;;		_Settings
  6947 ;; This function uses a non-reentrant model
  6948 ;;
  6949                           
  6950                           
  6951                           ;psect for function _DisplayDateOnLCD
  6952  0106                     _DisplayDateOnLCD:	
  6953                           
  6954                           ;incstack = 0
  6955                           ; Regs used in _DisplayDateOnLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6956                           ;DisplayDateOnLCD@pDateArray stored from wreg
  6957  0106  1283               	bcf	3,5	;RP0=0, select bank0
  6958  0107  1303               	bcf	3,6	;RP1=0, select bank0
  6959  0108  00A0               	movwf	DisplayDateOnLCD@pDateArray
  6960                           
  6961                           ;DateTimeDisplay.h: 59: Lcd_Set_Cursor(2,1);
  6962  0109  01F4               	clrf	Lcd_Set_Cursor@b
  6963  010A  0AF4               	incf	Lcd_Set_Cursor@b,f
  6964  010B  3002               	movlw	2
  6965  010C  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  6966                           
  6967                           ;DateTimeDisplay.h: 61: Lcd_Write_Char( (pDateArray[1]/10)+0x30 );
  6968  0111  300A               	movlw	10
  6969  0112  00F0               	movwf	___awdiv@divisor
  6970  0113  3000               	movlw	0
  6971  0114  00F1               	movwf	___awdiv@divisor+1
  6972  0115  1283               	bcf	3,5	;RP0=0, select bank0
  6973  0116  1303               	bcf	3,6	;RP1=0, select bank0
  6974  0117  0A20               	incf	DisplayDateOnLCD@pDateArray,w
  6975  0118  0084               	movwf	4
  6976  0119  1383               	bcf	3,7	;select IRP bank0
  6977  011A  0800               	movf	0,w
  6978  011B  00FC               	movwf	??_DisplayDateOnLCD
  6979  011C  01FD               	clrf	??_DisplayDateOnLCD+1
  6980  011D  087C               	movf	??_DisplayDateOnLCD,w
  6981  011E  00F2               	movwf	___awdiv@dividend
  6982  011F  087D               	movf	??_DisplayDateOnLCD+1,w
  6983  0120  00F3               	movwf	___awdiv@dividend+1
  6984  0121  160A  118A  200F  120A  118A  	fcall	___awdiv
  6985  0126  0870               	movf	?___awdiv,w
  6986  0127  3E30               	addlw	48
  6987  0128  160A  158A  262F  120A  118A  	fcall	_Lcd_Write_Char
  6988                           
  6989                           ;DateTimeDisplay.h: 62: Lcd_Set_Cursor(2,2);
  6990  012D  3002               	movlw	2
  6991  012E  00FC               	movwf	??_DisplayDateOnLCD
  6992  012F  087C               	movf	??_DisplayDateOnLCD,w
  6993  0130  00F4               	movwf	Lcd_Set_Cursor@b
  6994  0131  3002               	movlw	2
  6995  0132  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  6996                           
  6997                           ;DateTimeDisplay.h: 63: Lcd_Write_Char( (pDateArray[1]%10)+0x30 );
  6998  0137  300A               	movlw	10
  6999  0138  00F0               	movwf	___awmod@divisor
  7000  0139  3000               	movlw	0
  7001  013A  00F1               	movwf	___awmod@divisor+1
  7002  013B  1283               	bcf	3,5	;RP0=0, select bank0
  7003  013C  1303               	bcf	3,6	;RP1=0, select bank0
  7004  013D  0A20               	incf	DisplayDateOnLCD@pDateArray,w
  7005  013E  0084               	movwf	4
  7006  013F  1383               	bcf	3,7	;select IRP bank0
  7007  0140  0800               	movf	0,w
  7008  0141  00FC               	movwf	??_DisplayDateOnLCD
  7009  0142  01FD               	clrf	??_DisplayDateOnLCD+1
  7010  0143  087C               	movf	??_DisplayDateOnLCD,w
  7011  0144  00F2               	movwf	___awmod@dividend
  7012  0145  087D               	movf	??_DisplayDateOnLCD+1,w
  7013  0146  00F3               	movwf	___awmod@dividend+1
  7014  0147  160A  158A  27B5  120A  118A  	fcall	___awmod
  7015  014C  0870               	movf	?___awmod,w
  7016  014D  3E30               	addlw	48
  7017  014E  160A  158A  262F  120A  118A  	fcall	_Lcd_Write_Char
  7018                           
  7019                           ;DateTimeDisplay.h: 64: Lcd_Set_Cursor(2,3);
  7020  0153  3003               	movlw	3
  7021  0154  00FC               	movwf	??_DisplayDateOnLCD
  7022  0155  087C               	movf	??_DisplayDateOnLCD,w
  7023  0156  00F4               	movwf	Lcd_Set_Cursor@b
  7024  0157  3002               	movlw	2
  7025  0158  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  7026                           
  7027                           ;DateTimeDisplay.h: 66: Lcd_Write_Char('/');
  7028  015D  302F               	movlw	47
  7029  015E  160A  158A  262F  120A  118A  	fcall	_Lcd_Write_Char
  7030                           
  7031                           ;DateTimeDisplay.h: 67: Lcd_Set_Cursor(2,4);
  7032  0163  3004               	movlw	4
  7033  0164  00FC               	movwf	??_DisplayDateOnLCD
  7034  0165  087C               	movf	??_DisplayDateOnLCD,w
  7035  0166  00F4               	movwf	Lcd_Set_Cursor@b
  7036  0167  3002               	movlw	2
  7037  0168  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  7038                           
  7039                           ;DateTimeDisplay.h: 69: Lcd_Write_Char( (pDateArray[2]/10)+0x30 );
  7040  016D  300A               	movlw	10
  7041  016E  00F0               	movwf	___awdiv@divisor
  7042  016F  3000               	movlw	0
  7043  0170  00F1               	movwf	___awdiv@divisor+1
  7044  0171  1283               	bcf	3,5	;RP0=0, select bank0
  7045  0172  1303               	bcf	3,6	;RP1=0, select bank0
  7046  0173  0820               	movf	DisplayDateOnLCD@pDateArray,w
  7047  0174  3E02               	addlw	2
  7048  0175  0084               	movwf	4
  7049  0176  1383               	bcf	3,7	;select IRP bank0
  7050  0177  0800               	movf	0,w
  7051  0178  00FC               	movwf	??_DisplayDateOnLCD
  7052  0179  01FD               	clrf	??_DisplayDateOnLCD+1
  7053  017A  087C               	movf	??_DisplayDateOnLCD,w
  7054  017B  00F2               	movwf	___awdiv@dividend
  7055  017C  087D               	movf	??_DisplayDateOnLCD+1,w
  7056  017D  00F3               	movwf	___awdiv@dividend+1
  7057  017E  160A  118A  200F  120A  118A  	fcall	___awdiv
  7058  0183  0870               	movf	?___awdiv,w
  7059  0184  3E30               	addlw	48
  7060  0185  160A  158A  262F  120A  118A  	fcall	_Lcd_Write_Char
  7061                           
  7062                           ;DateTimeDisplay.h: 70: Lcd_Set_Cursor(2,5);
  7063  018A  3005               	movlw	5
  7064  018B  00FC               	movwf	??_DisplayDateOnLCD
  7065  018C  087C               	movf	??_DisplayDateOnLCD,w
  7066  018D  00F4               	movwf	Lcd_Set_Cursor@b
  7067  018E  3002               	movlw	2
  7068  018F  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  7069                           
  7070                           ;DateTimeDisplay.h: 71: Lcd_Write_Char( (pDateArray[2]%10)+0x30 );
  7071  0194  300A               	movlw	10
  7072  0195  00F0               	movwf	___awmod@divisor
  7073  0196  3000               	movlw	0
  7074  0197  00F1               	movwf	___awmod@divisor+1
  7075  0198  1283               	bcf	3,5	;RP0=0, select bank0
  7076  0199  1303               	bcf	3,6	;RP1=0, select bank0
  7077  019A  0820               	movf	DisplayDateOnLCD@pDateArray,w
  7078  019B  3E02               	addlw	2
  7079  019C  0084               	movwf	4
  7080  019D  1383               	bcf	3,7	;select IRP bank0
  7081  019E  0800               	movf	0,w
  7082  019F  00FC               	movwf	??_DisplayDateOnLCD
  7083  01A0  01FD               	clrf	??_DisplayDateOnLCD+1
  7084  01A1  087C               	movf	??_DisplayDateOnLCD,w
  7085  01A2  00F2               	movwf	___awmod@dividend
  7086  01A3  087D               	movf	??_DisplayDateOnLCD+1,w
  7087  01A4  00F3               	movwf	___awmod@dividend+1
  7088  01A5  160A  158A  27B5  120A  118A  	fcall	___awmod
  7089  01AA  0870               	movf	?___awmod,w
  7090  01AB  3E30               	addlw	48
  7091  01AC  160A  158A  262F  120A  118A  	fcall	_Lcd_Write_Char
  7092                           
  7093                           ;DateTimeDisplay.h: 72: Lcd_Set_Cursor(2,6);
  7094  01B1  3006               	movlw	6
  7095  01B2  00FC               	movwf	??_DisplayDateOnLCD
  7096  01B3  087C               	movf	??_DisplayDateOnLCD,w
  7097  01B4  00F4               	movwf	Lcd_Set_Cursor@b
  7098  01B5  3002               	movlw	2
  7099  01B6  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  7100                           
  7101                           ;DateTimeDisplay.h: 74: Lcd_Write_Char('/');
  7102  01BB  302F               	movlw	47
  7103  01BC  160A  158A  262F  120A  118A  	fcall	_Lcd_Write_Char
  7104                           
  7105                           ;DateTimeDisplay.h: 75: Lcd_Set_Cursor(2,7);
  7106  01C1  3007               	movlw	7
  7107  01C2  00FC               	movwf	??_DisplayDateOnLCD
  7108  01C3  087C               	movf	??_DisplayDateOnLCD,w
  7109  01C4  00F4               	movwf	Lcd_Set_Cursor@b
  7110  01C5  3002               	movlw	2
  7111  01C6  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  7112                           
  7113                           ;DateTimeDisplay.h: 77: Lcd_Write_Char( (pDateArray[3]/10)+0x30 );
  7114  01CB  300A               	movlw	10
  7115  01CC  00F0               	movwf	___awdiv@divisor
  7116  01CD  3000               	movlw	0
  7117  01CE  00F1               	movwf	___awdiv@divisor+1
  7118  01CF  1283               	bcf	3,5	;RP0=0, select bank0
  7119  01D0  1303               	bcf	3,6	;RP1=0, select bank0
  7120  01D1  0820               	movf	DisplayDateOnLCD@pDateArray,w
  7121  01D2  3E03               	addlw	3
  7122  01D3  0084               	movwf	4
  7123  01D4  1383               	bcf	3,7	;select IRP bank0
  7124  01D5  0800               	movf	0,w
  7125  01D6  00FC               	movwf	??_DisplayDateOnLCD
  7126  01D7  01FD               	clrf	??_DisplayDateOnLCD+1
  7127  01D8  087C               	movf	??_DisplayDateOnLCD,w
  7128  01D9  00F2               	movwf	___awdiv@dividend
  7129  01DA  087D               	movf	??_DisplayDateOnLCD+1,w
  7130  01DB  00F3               	movwf	___awdiv@dividend+1
  7131  01DC  160A  118A  200F  120A  118A  	fcall	___awdiv
  7132  01E1  0870               	movf	?___awdiv,w
  7133  01E2  3E30               	addlw	48
  7134  01E3  160A  158A  262F  120A  118A  	fcall	_Lcd_Write_Char
  7135                           
  7136                           ;DateTimeDisplay.h: 78: Lcd_Set_Cursor(2,8);
  7137  01E8  3008               	movlw	8
  7138  01E9  00FC               	movwf	??_DisplayDateOnLCD
  7139  01EA  087C               	movf	??_DisplayDateOnLCD,w
  7140  01EB  00F4               	movwf	Lcd_Set_Cursor@b
  7141  01EC  3002               	movlw	2
  7142  01ED  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  7143                           
  7144                           ;DateTimeDisplay.h: 79: Lcd_Write_Char( (pDateArray[3]%10)+0x30 );
  7145  01F2  300A               	movlw	10
  7146  01F3  00F0               	movwf	___awmod@divisor
  7147  01F4  3000               	movlw	0
  7148  01F5  00F1               	movwf	___awmod@divisor+1
  7149  01F6  1283               	bcf	3,5	;RP0=0, select bank0
  7150  01F7  1303               	bcf	3,6	;RP1=0, select bank0
  7151  01F8  0820               	movf	DisplayDateOnLCD@pDateArray,w
  7152  01F9  3E03               	addlw	3
  7153  01FA  0084               	movwf	4
  7154  01FB  1383               	bcf	3,7	;select IRP bank0
  7155  01FC  0800               	movf	0,w
  7156  01FD  00FC               	movwf	??_DisplayDateOnLCD
  7157  01FE  01FD               	clrf	??_DisplayDateOnLCD+1
  7158  01FF  087C               	movf	??_DisplayDateOnLCD,w
  7159  0200  00F2               	movwf	___awmod@dividend
  7160  0201  087D               	movf	??_DisplayDateOnLCD+1,w
  7161  0202  00F3               	movwf	___awmod@dividend+1
  7162  0203  160A  158A  27B5  120A  118A  	fcall	___awmod
  7163  0208  0870               	movf	?___awmod,w
  7164  0209  3E30               	addlw	48
  7165  020A  160A  158A  262F  120A  118A  	fcall	_Lcd_Write_Char
  7166                           
  7167                           ;DateTimeDisplay.h: 80: Lcd_Set_Cursor(2,9);
  7168  020F  3009               	movlw	9
  7169  0210  00FC               	movwf	??_DisplayDateOnLCD
  7170  0211  087C               	movf	??_DisplayDateOnLCD,w
  7171  0212  00F4               	movwf	Lcd_Set_Cursor@b
  7172  0213  3002               	movlw	2
  7173  0214  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  7174                           
  7175                           ;DateTimeDisplay.h: 82: Lcd_Write_Char(' ');
  7176  0219  3020               	movlw	32
  7177  021A  160A  158A  262F  120A  118A  	fcall	_Lcd_Write_Char
  7178                           
  7179                           ;DateTimeDisplay.h: 83: Lcd_Set_Cursor(2,10);
  7180  021F  300A               	movlw	10
  7181  0220  00FC               	movwf	??_DisplayDateOnLCD
  7182  0221  087C               	movf	??_DisplayDateOnLCD,w
  7183  0222  00F4               	movwf	Lcd_Set_Cursor@b
  7184  0223  3002               	movlw	2
  7185  0224  160A  158A  276B  120A  118A  	fcall	_Lcd_Set_Cursor
  7186                           
  7187                           ;DateTimeDisplay.h: 85: switch(pDateArray[0])
  7188  0229  2A6A               	goto	l3606
  7189  022A                     l3588:	
  7190                           ;DateTimeDisplay.h: 86: {
  7191                           ;DateTimeDisplay.h: 87: case 1: Lcd_Write_String("MON"); break;
  7192                           
  7193  022A  30F5               	movlw	low (STR_3| (0+32768))
  7194  022B  00F5               	movwf	Lcd_Write_String@a
  7195  022C  3089               	movlw	high (STR_3| (0+32768))
  7196  022D  00F6               	movwf	Lcd_Write_String@a+1
  7197  022E  160A  158A  26A4   	fcall	_Lcd_Write_String
  7198  0231  0008               	return
  7199  0232                     l3590:	
  7200                           ;DateTimeDisplay.h: 88: case 2: Lcd_Write_String("TUE"); break;
  7201                           
  7202  0232  30ED               	movlw	low (STR_4| (0+32768))
  7203  0233  00F5               	movwf	Lcd_Write_String@a
  7204  0234  3089               	movlw	high (STR_4| (0+32768))
  7205  0235  00F6               	movwf	Lcd_Write_String@a+1
  7206  0236  160A  158A  26A4   	fcall	_Lcd_Write_String
  7207  0239  0008               	return
  7208  023A                     l3592:	
  7209                           ;DateTimeDisplay.h: 89: case 3: Lcd_Write_String("WED"); break;
  7210                           
  7211  023A  30E9               	movlw	low (STR_5| (0+32768))
  7212  023B  00F5               	movwf	Lcd_Write_String@a
  7213  023C  3089               	movlw	high (STR_5| (0+32768))
  7214  023D  00F6               	movwf	Lcd_Write_String@a+1
  7215  023E  160A  158A  26A4   	fcall	_Lcd_Write_String
  7216  0241  0008               	return
  7217  0242                     l3594:	
  7218                           ;DateTimeDisplay.h: 90: case 4: Lcd_Write_String("THU"); break;
  7219                           
  7220  0242  3001               	movlw	low (STR_6| (0+32768))
  7221  0243  00F5               	movwf	Lcd_Write_String@a
  7222  0244  308A               	movlw	high (STR_6| (0+32768))
  7223  0245  00F6               	movwf	Lcd_Write_String@a+1
  7224  0246  160A  158A  26A4   	fcall	_Lcd_Write_String
  7225  0249  0008               	return
  7226  024A                     l3596:	
  7227                           ;DateTimeDisplay.h: 91: case 5: Lcd_Write_String("FRI"); break;
  7228                           
  7229  024A  30F1               	movlw	low (STR_7| (0+32768))
  7230  024B  00F5               	movwf	Lcd_Write_String@a
  7231  024C  3089               	movlw	high (STR_7| (0+32768))
  7232  024D  00F6               	movwf	Lcd_Write_String@a+1
  7233  024E  160A  158A  26A4   	fcall	_Lcd_Write_String
  7234  0251  0008               	return
  7235  0252                     l3598:	
  7236                           ;DateTimeDisplay.h: 92: case 6: Lcd_Write_String("SAT"); break;
  7237                           
  7238  0252  30FD               	movlw	low (STR_8| (0+32768))
  7239  0253  00F5               	movwf	Lcd_Write_String@a
  7240  0254  3089               	movlw	high (STR_8| (0+32768))
  7241  0255  00F6               	movwf	Lcd_Write_String@a+1
  7242  0256  160A  158A  26A4   	fcall	_Lcd_Write_String
  7243  0259  0008               	return
  7244  025A                     l3600:	
  7245                           ;DateTimeDisplay.h: 93: case 7: Lcd_Write_String("SUN"); break;
  7246                           
  7247  025A  30F9               	movlw	low (STR_9| (0+32768))
  7248  025B  00F5               	movwf	Lcd_Write_String@a
  7249  025C  3089               	movlw	high (STR_9| (0+32768))
  7250  025D  00F6               	movwf	Lcd_Write_String@a+1
  7251  025E  160A  158A  26A4   	fcall	_Lcd_Write_String
  7252  0261  0008               	return
  7253  0262                     l3602:	
  7254                           ;DateTimeDisplay.h: 95: default: Lcd_Write_String("???"); break;
  7255                           
  7256  0262  30E5               	movlw	low (STR_10| (0+32768))
  7257  0263  00F5               	movwf	Lcd_Write_String@a
  7258  0264  3089               	movlw	high (STR_10| (0+32768))
  7259  0265  00F6               	movwf	Lcd_Write_String@a+1
  7260  0266  160A  158A  26A4   	fcall	_Lcd_Write_String
  7261                           
  7262                           ;DateTimeDisplay.h: 96: }
  7263  0269  0008               	return
  7264  026A                     l3606:	
  7265  026A  1283               	bcf	3,5	;RP0=0, select bank0
  7266  026B  1303               	bcf	3,6	;RP1=0, select bank0
  7267  026C  0820               	movf	DisplayDateOnLCD@pDateArray,w
  7268  026D  0084               	movwf	4
  7269  026E  1383               	bcf	3,7	;select IRP bank0
  7270  026F  0800               	movf	0,w
  7271                           
  7272                           ; Switch size 1, requested type "space"
  7273                           ; Number of cases is 7, Range of values is 1 to 7
  7274                           ; switch strategies available:
  7275                           ; Name         Instructions Cycles
  7276                           ; simple_byte           22    12 (average)
  7277                           ; direct_byte           32    11 (fixed)
  7278                           ; jumptable            263     9 (fixed)
  7279                           ;	Chosen strategy is simple_byte
  7280  0270  3A01               	xorlw	1	; case 1
  7281  0271  1903               	skipnz
  7282  0272  2A2A               	goto	l3588
  7283  0273  3A03               	xorlw	3	; case 2
  7284  0274  1903               	skipnz
  7285  0275  2A32               	goto	l3590
  7286  0276  3A01               	xorlw	1	; case 3
  7287  0277  1903               	skipnz
  7288  0278  2A3A               	goto	l3592
  7289  0279  3A07               	xorlw	7	; case 4
  7290  027A  1903               	skipnz
  7291  027B  2A42               	goto	l3594
  7292  027C  3A01               	xorlw	1	; case 5
  7293  027D  1903               	skipnz
  7294  027E  2A4A               	goto	l3596
  7295  027F  3A03               	xorlw	3	; case 6
  7296  0280  1903               	skipnz
  7297  0281  2A52               	goto	l3598
  7298  0282  3A01               	xorlw	1	; case 7
  7299  0283  1903               	skipnz
  7300  0284  2A5A               	goto	l3600
  7301  0285  2A62               	goto	l3602
  7302  0286  0008               	return
  7303  0287                     __end_of_DisplayDateOnLCD:	
  7304                           
  7305                           	psect	text30
  7306  1FB5                     __ptext30:	
  7307 ;; *************** function ___awmod *****************
  7308 ;; Defined at:
  7309 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  7310 ;; Parameters:    Size  Location     Type
  7311 ;;  divisor         2    0[COMMON] int 
  7312 ;;  dividend        2    2[COMMON] int 
  7313 ;; Auto vars:     Size  Location     Type
  7314 ;;  sign            1    6[COMMON] unsigned char 
  7315 ;;  counter         1    5[COMMON] unsigned char 
  7316 ;; Return value:  Size  Location     Type
  7317 ;;                  2    0[COMMON] int 
  7318 ;; Registers used:
  7319 ;;		wreg, status,2, status,0
  7320 ;; Tracked objects:
  7321 ;;		On entry : 0/0
  7322 ;;		On exit  : 0/0
  7323 ;;		Unchanged: 0/0
  7324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7325 ;;      Params:         4       0       0       0       0
  7326 ;;      Locals:         2       0       0       0       0
  7327 ;;      Temps:          1       0       0       0       0
  7328 ;;      Totals:         7       0       0       0       0
  7329 ;;Total ram usage:        7 bytes
  7330 ;; Hardware stack levels used:    1
  7331 ;; This function calls:
  7332 ;;		Nothing
  7333 ;; This function is called by:
  7334 ;;		_DisplayTimeToLCD
  7335 ;;		_DisplayDateOnLCD
  7336 ;;		_main
  7337 ;;		_Set_DS1307_RTC_Time
  7338 ;;		_Set_DS1307_RTC_Date
  7339 ;; This function uses a non-reentrant model
  7340 ;;
  7341                           
  7342                           
  7343                           ;psect for function ___awmod
  7344  1FB5                     ___awmod:	
  7345                           
  7346                           ;incstack = 0
  7347                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  7348  1FB5  01F6               	clrf	___awmod@sign
  7349  1FB6  1FF3               	btfss	___awmod@dividend+1,7
  7350  1FB7  2FBF               	goto	l3338
  7351  1FB8  09F2               	comf	___awmod@dividend,f
  7352  1FB9  09F3               	comf	___awmod@dividend+1,f
  7353  1FBA  0AF2               	incf	___awmod@dividend,f
  7354  1FBB  1903               	skipnz
  7355  1FBC  0AF3               	incf	___awmod@dividend+1,f
  7356  1FBD  01F6               	clrf	___awmod@sign
  7357  1FBE  0AF6               	incf	___awmod@sign,f
  7358  1FBF                     l3338:	
  7359  1FBF  1FF1               	btfss	___awmod@divisor+1,7
  7360  1FC0  2FC6               	goto	l3342
  7361  1FC1  09F0               	comf	___awmod@divisor,f
  7362  1FC2  09F1               	comf	___awmod@divisor+1,f
  7363  1FC3  0AF0               	incf	___awmod@divisor,f
  7364  1FC4  1903               	skipnz
  7365  1FC5  0AF1               	incf	___awmod@divisor+1,f
  7366  1FC6                     l3342:	
  7367  1FC6  0870               	movf	___awmod@divisor,w
  7368  1FC7  0471               	iorwf	___awmod@divisor+1,w
  7369  1FC8  1903               	btfsc	3,2
  7370  1FC9  2FF3               	goto	l3360
  7371  1FCA  01F5               	clrf	___awmod@counter
  7372  1FCB  0AF5               	incf	___awmod@counter,f
  7373  1FCC                     l3350:	
  7374  1FCC  1BF1               	btfsc	___awmod@divisor+1,7
  7375  1FCD  2FDA               	goto	l3352
  7376  1FCE  3001               	movlw	1
  7377  1FCF                     u3365:	
  7378  1FCF  1003               	clrc
  7379  1FD0  0DF0               	rlf	___awmod@divisor,f
  7380  1FD1  0DF1               	rlf	___awmod@divisor+1,f
  7381  1FD2  3EFF               	addlw	-1
  7382  1FD3  1D03               	skipz
  7383  1FD4  2FCF               	goto	u3365
  7384  1FD5  3001               	movlw	1
  7385  1FD6  00F4               	movwf	??___awmod
  7386  1FD7  0874               	movf	??___awmod,w
  7387  1FD8  07F5               	addwf	___awmod@counter,f
  7388  1FD9  2FCC               	goto	l3350
  7389  1FDA                     l3352:	
  7390  1FDA  0871               	movf	___awmod@divisor+1,w
  7391  1FDB  0273               	subwf	___awmod@dividend+1,w
  7392  1FDC  1D03               	skipz
  7393  1FDD  2FE0               	goto	u3385
  7394  1FDE  0870               	movf	___awmod@divisor,w
  7395  1FDF  0272               	subwf	___awmod@dividend,w
  7396  1FE0                     u3385:	
  7397  1FE0  1C03               	skipc
  7398  1FE1  2FE8               	goto	l3356
  7399  1FE2  0870               	movf	___awmod@divisor,w
  7400  1FE3  02F2               	subwf	___awmod@dividend,f
  7401  1FE4  0871               	movf	___awmod@divisor+1,w
  7402  1FE5  1C03               	skipc
  7403  1FE6  03F3               	decf	___awmod@dividend+1,f
  7404  1FE7  02F3               	subwf	___awmod@dividend+1,f
  7405  1FE8                     l3356:	
  7406  1FE8  3001               	movlw	1
  7407  1FE9                     u3395:	
  7408  1FE9  1003               	clrc
  7409  1FEA  0CF1               	rrf	___awmod@divisor+1,f
  7410  1FEB  0CF0               	rrf	___awmod@divisor,f
  7411  1FEC  3EFF               	addlw	-1
  7412  1FED  1D03               	skipz
  7413  1FEE  2FE9               	goto	u3395
  7414  1FEF  3001               	movlw	1
  7415  1FF0  02F5               	subwf	___awmod@counter,f
  7416  1FF1  1D03               	btfss	3,2
  7417  1FF2  2FDA               	goto	l3352
  7418  1FF3                     l3360:	
  7419  1FF3  0876               	movf	___awmod@sign,w
  7420  1FF4  1903               	btfsc	3,2
  7421  1FF5  2FFB               	goto	l3364
  7422  1FF6  09F2               	comf	___awmod@dividend,f
  7423  1FF7  09F3               	comf	___awmod@dividend+1,f
  7424  1FF8  0AF2               	incf	___awmod@dividend,f
  7425  1FF9  1903               	skipnz
  7426  1FFA  0AF3               	incf	___awmod@dividend+1,f
  7427  1FFB                     l3364:	
  7428  1FFB  0873               	movf	___awmod@dividend+1,w
  7429  1FFC  00F1               	movwf	?___awmod+1
  7430  1FFD  0872               	movf	___awmod@dividend,w
  7431  1FFE  00F0               	movwf	?___awmod
  7432  1FFF  0008               	return
  7433  2000                     __end_of___awmod:	
  7434                           
  7435                           	psect	text31
  7436  100F                     __ptext31:	
  7437 ;; *************** function ___awdiv *****************
  7438 ;; Defined at:
  7439 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  7440 ;; Parameters:    Size  Location     Type
  7441 ;;  divisor         2    0[COMMON] int 
  7442 ;;  dividend        2    2[COMMON] int 
  7443 ;; Auto vars:     Size  Location     Type
  7444 ;;  quotient        2    7[COMMON] int 
  7445 ;;  sign            1    6[COMMON] unsigned char 
  7446 ;;  counter         1    5[COMMON] unsigned char 
  7447 ;; Return value:  Size  Location     Type
  7448 ;;                  2    0[COMMON] int 
  7449 ;; Registers used:
  7450 ;;		wreg, status,2, status,0
  7451 ;; Tracked objects:
  7452 ;;		On entry : 0/0
  7453 ;;		On exit  : 0/0
  7454 ;;		Unchanged: 0/0
  7455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7456 ;;      Params:         4       0       0       0       0
  7457 ;;      Locals:         4       0       0       0       0
  7458 ;;      Temps:          1       0       0       0       0
  7459 ;;      Totals:         9       0       0       0       0
  7460 ;;Total ram usage:        9 bytes
  7461 ;; Hardware stack levels used:    1
  7462 ;; This function calls:
  7463 ;;		Nothing
  7464 ;; This function is called by:
  7465 ;;		_DisplayTimeToLCD
  7466 ;;		_DisplayDateOnLCD
  7467 ;;		_main
  7468 ;;		_avgpow
  7469 ;;		_Set_DS1307_RTC_Time
  7470 ;;		_Set_DS1307_RTC_Date
  7471 ;; This function uses a non-reentrant model
  7472 ;;
  7473                           
  7474                           
  7475                           ;psect for function ___awdiv
  7476  100F                     ___awdiv:	
  7477                           
  7478                           ;incstack = 0
  7479                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7480  100F  01F6               	clrf	___awdiv@sign
  7481  1010  1FF1               	btfss	___awdiv@divisor+1,7
  7482  1011  2819               	goto	l3294
  7483  1012  09F0               	comf	___awdiv@divisor,f
  7484  1013  09F1               	comf	___awdiv@divisor+1,f
  7485  1014  0AF0               	incf	___awdiv@divisor,f
  7486  1015  1903               	skipnz
  7487  1016  0AF1               	incf	___awdiv@divisor+1,f
  7488  1017  01F6               	clrf	___awdiv@sign
  7489  1018  0AF6               	incf	___awdiv@sign,f
  7490  1019                     l3294:	
  7491  1019  1FF3               	btfss	___awdiv@dividend+1,7
  7492  101A  2824               	goto	l3300
  7493  101B  09F2               	comf	___awdiv@dividend,f
  7494  101C  09F3               	comf	___awdiv@dividend+1,f
  7495  101D  0AF2               	incf	___awdiv@dividend,f
  7496  101E  1903               	skipnz
  7497  101F  0AF3               	incf	___awdiv@dividend+1,f
  7498  1020  3001               	movlw	1
  7499  1021  00F4               	movwf	??___awdiv
  7500  1022  0874               	movf	??___awdiv,w
  7501  1023  06F6               	xorwf	___awdiv@sign,f
  7502  1024                     l3300:	
  7503  1024  01F7               	clrf	___awdiv@quotient
  7504  1025  01F8               	clrf	___awdiv@quotient+1
  7505  1026  0870               	movf	___awdiv@divisor,w
  7506  1027  0471               	iorwf	___awdiv@divisor+1,w
  7507  1028  1903               	btfsc	3,2
  7508  1029  285B               	goto	l3322
  7509  102A  01F5               	clrf	___awdiv@counter
  7510  102B  0AF5               	incf	___awdiv@counter,f
  7511  102C                     l3310:	
  7512  102C  1BF1               	btfsc	___awdiv@divisor+1,7
  7513  102D  283A               	goto	l3312
  7514  102E  3001               	movlw	1
  7515  102F                     u3265:	
  7516  102F  1003               	clrc
  7517  1030  0DF0               	rlf	___awdiv@divisor,f
  7518  1031  0DF1               	rlf	___awdiv@divisor+1,f
  7519  1032  3EFF               	addlw	-1
  7520  1033  1D03               	skipz
  7521  1034  282F               	goto	u3265
  7522  1035  3001               	movlw	1
  7523  1036  00F4               	movwf	??___awdiv
  7524  1037  0874               	movf	??___awdiv,w
  7525  1038  07F5               	addwf	___awdiv@counter,f
  7526  1039  282C               	goto	l3310
  7527  103A                     l3312:	
  7528  103A  3001               	movlw	1
  7529  103B                     u3285:	
  7530  103B  1003               	clrc
  7531  103C  0DF7               	rlf	___awdiv@quotient,f
  7532  103D  0DF8               	rlf	___awdiv@quotient+1,f
  7533  103E  3EFF               	addlw	-1
  7534  103F  1D03               	skipz
  7535  1040  283B               	goto	u3285
  7536  1041  0871               	movf	___awdiv@divisor+1,w
  7537  1042  0273               	subwf	___awdiv@dividend+1,w
  7538  1043  1D03               	skipz
  7539  1044  2847               	goto	u3295
  7540  1045  0870               	movf	___awdiv@divisor,w
  7541  1046  0272               	subwf	___awdiv@dividend,w
  7542  1047                     u3295:	
  7543  1047  1C03               	skipc
  7544  1048  2850               	goto	l3318
  7545  1049  0870               	movf	___awdiv@divisor,w
  7546  104A  02F2               	subwf	___awdiv@dividend,f
  7547  104B  0871               	movf	___awdiv@divisor+1,w
  7548  104C  1C03               	skipc
  7549  104D  03F3               	decf	___awdiv@dividend+1,f
  7550  104E  02F3               	subwf	___awdiv@dividend+1,f
  7551  104F  1477               	bsf	___awdiv@quotient,0
  7552  1050                     l3318:	
  7553  1050  3001               	movlw	1
  7554  1051                     u3305:	
  7555  1051  1003               	clrc
  7556  1052  0CF1               	rrf	___awdiv@divisor+1,f
  7557  1053  0CF0               	rrf	___awdiv@divisor,f
  7558  1054  3EFF               	addlw	-1
  7559  1055  1D03               	skipz
  7560  1056  2851               	goto	u3305
  7561  1057  3001               	movlw	1
  7562  1058  02F5               	subwf	___awdiv@counter,f
  7563  1059  1D03               	btfss	3,2
  7564  105A  283A               	goto	l3312
  7565  105B                     l3322:	
  7566  105B  0876               	movf	___awdiv@sign,w
  7567  105C  1903               	btfsc	3,2
  7568  105D  2863               	goto	l3326
  7569  105E  09F7               	comf	___awdiv@quotient,f
  7570  105F  09F8               	comf	___awdiv@quotient+1,f
  7571  1060  0AF7               	incf	___awdiv@quotient,f
  7572  1061  1903               	skipnz
  7573  1062  0AF8               	incf	___awdiv@quotient+1,f
  7574  1063                     l3326:	
  7575  1063  0878               	movf	___awdiv@quotient+1,w
  7576  1064  00F1               	movwf	?___awdiv+1
  7577  1065  0877               	movf	___awdiv@quotient,w
  7578  1066  00F0               	movwf	?___awdiv
  7579  1067  0008               	return
  7580  1068                     __end_of___awdiv:	
  7581                           
  7582                           	psect	text32
  7583  10C1                     __ptext32:	
  7584 ;; *************** function _Lcd_Init *****************
  7585 ;; Defined at:
  7586 ;;		line 68 in file "lcd.h"
  7587 ;; Parameters:    Size  Location     Type
  7588 ;;		None
  7589 ;; Auto vars:     Size  Location     Type
  7590 ;;		None
  7591 ;; Return value:  Size  Location     Type
  7592 ;;		None               void
  7593 ;; Registers used:
  7594 ;;		wreg, status,2, status,0, pclath, cstack
  7595 ;; Tracked objects:
  7596 ;;		On entry : 0/0
  7597 ;;		On exit  : 0/0
  7598 ;;		Unchanged: 0/0
  7599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7600 ;;      Params:         0       0       0       0       0
  7601 ;;      Locals:         0       0       0       0       0
  7602 ;;      Temps:          2       0       0       0       0
  7603 ;;      Totals:         2       0       0       0       0
  7604 ;;Total ram usage:        2 bytes
  7605 ;; Hardware stack levels used:    1
  7606 ;; Hardware stack levels required when called:    2
  7607 ;; This function calls:
  7608 ;;		_Lcd_Cmd
  7609 ;;		_Lcd_Port
  7610 ;; This function is called by:
  7611 ;;		_InitUnit
  7612 ;; This function uses a non-reentrant model
  7613 ;;
  7614                           
  7615                           
  7616                           ;psect for function _Lcd_Init
  7617  10C1                     _Lcd_Init:	
  7618                           
  7619                           ;lcd.h: 70: Lcd_Port(0x00);
  7620                           
  7621                           ;incstack = 0
  7622                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  7623  10C1  3000               	movlw	0
  7624  10C2  160A  158A  239A  160A  118A  	fcall	_Lcd_Port
  7625                           
  7626                           ;lcd.h: 71: _delay((unsigned long)((20)*(20000000/4000.0)));
  7627  10C7  3082               	movlw	130
  7628  10C8  00F5               	movwf	??_Lcd_Init+1
  7629  10C9  30DD               	movlw	221
  7630  10CA  00F4               	movwf	??_Lcd_Init
  7631  10CB                     u4647:	
  7632  10CB  0BF4               	decfsz	??_Lcd_Init,f
  7633  10CC  28CB               	goto	u4647
  7634  10CD  0BF5               	decfsz	??_Lcd_Init+1,f
  7635  10CE  28CB               	goto	u4647
  7636  10CF  28D0               	nop2
  7637                           
  7638                           ;lcd.h: 72: Lcd_Cmd(0x03);
  7639  10D0  3003               	movlw	3
  7640  10D1  160A  158A  23B4  160A  118A  	fcall	_Lcd_Cmd
  7641                           
  7642                           ;lcd.h: 73: _delay((unsigned long)((5)*(20000000/4000.0)));
  7643  10D6  3021               	movlw	33
  7644  10D7  00F5               	movwf	??_Lcd_Init+1
  7645  10D8  3076               	movlw	118
  7646  10D9  00F4               	movwf	??_Lcd_Init
  7647  10DA                     u4657:	
  7648  10DA  0BF4               	decfsz	??_Lcd_Init,f
  7649  10DB  28DA               	goto	u4657
  7650  10DC  0BF5               	decfsz	??_Lcd_Init+1,f
  7651  10DD  28DA               	goto	u4657
  7652  10DE  0000               	nop
  7653                           
  7654                           ;lcd.h: 74: Lcd_Cmd(0x03);
  7655  10DF  3003               	movlw	3
  7656  10E0  160A  158A  23B4  160A  118A  	fcall	_Lcd_Cmd
  7657                           
  7658                           ;lcd.h: 75: _delay((unsigned long)((11)*(20000000/4000.0)));
  7659  10E5  3048               	movlw	72
  7660  10E6  00F5               	movwf	??_Lcd_Init+1
  7661  10E7  306C               	movlw	108
  7662  10E8  00F4               	movwf	??_Lcd_Init
  7663  10E9                     u4667:	
  7664  10E9  0BF4               	decfsz	??_Lcd_Init,f
  7665  10EA  28E9               	goto	u4667
  7666  10EB  0BF5               	decfsz	??_Lcd_Init+1,f
  7667  10EC  28E9               	goto	u4667
  7668  10ED  0000               	nop
  7669                           
  7670                           ;lcd.h: 76: Lcd_Cmd(0x03);
  7671  10EE  3003               	movlw	3
  7672  10EF  160A  158A  23B4  160A  118A  	fcall	_Lcd_Cmd
  7673                           
  7674                           ;lcd.h: 78: Lcd_Cmd(0x02);
  7675  10F4  3002               	movlw	2
  7676  10F5  160A  158A  23B4  160A  118A  	fcall	_Lcd_Cmd
  7677                           
  7678                           ;lcd.h: 79: Lcd_Cmd(0x02);
  7679  10FA  3002               	movlw	2
  7680  10FB  160A  158A  23B4  160A  118A  	fcall	_Lcd_Cmd
  7681                           
  7682                           ;lcd.h: 80: Lcd_Cmd(0x08);
  7683  1100  3008               	movlw	8
  7684  1101  160A  158A  23B4  160A  118A  	fcall	_Lcd_Cmd
  7685                           
  7686                           ;lcd.h: 81: Lcd_Cmd(0x00);
  7687  1106  3000               	movlw	0
  7688  1107  160A  158A  23B4  160A  118A  	fcall	_Lcd_Cmd
  7689                           
  7690                           ;lcd.h: 82: Lcd_Cmd(0x0C);
  7691  110C  300C               	movlw	12
  7692  110D  160A  158A  23B4  160A  118A  	fcall	_Lcd_Cmd
  7693                           
  7694                           ;lcd.h: 83: Lcd_Cmd(0x00);
  7695  1112  3000               	movlw	0
  7696  1113  160A  158A  23B4  160A  118A  	fcall	_Lcd_Cmd
  7697                           
  7698                           ;lcd.h: 84: Lcd_Cmd(0x06);
  7699  1118  3006               	movlw	6
  7700  1119  160A  158A  23B4   	fcall	_Lcd_Cmd
  7701  111C  0008               	return
  7702  111D                     __end_of_Lcd_Init:	
  7703                           
  7704                           	psect	text33
  7705  1B3C                     __ptext33:	
  7706 ;; *************** function _InitKeypad *****************
  7707 ;; Defined at:
  7708 ;;		line 29 in file "keypad.h"
  7709 ;; Parameters:    Size  Location     Type
  7710 ;;		None
  7711 ;; Auto vars:     Size  Location     Type
  7712 ;;		None
  7713 ;; Return value:  Size  Location     Type
  7714 ;;		None               void
  7715 ;; Registers used:
  7716 ;;		wreg, status,2, status,0
  7717 ;; Tracked objects:
  7718 ;;		On entry : 0/0
  7719 ;;		On exit  : 0/0
  7720 ;;		Unchanged: 0/0
  7721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7722 ;;      Params:         0       0       0       0       0
  7723 ;;      Locals:         0       0       0       0       0
  7724 ;;      Temps:          1       0       0       0       0
  7725 ;;      Totals:         1       0       0       0       0
  7726 ;;Total ram usage:        1 bytes
  7727 ;; Hardware stack levels used:    1
  7728 ;; This function calls:
  7729 ;;		Nothing
  7730 ;; This function is called by:
  7731 ;;		_InitUnit
  7732 ;; This function uses a non-reentrant model
  7733 ;;
  7734                           
  7735                           
  7736                           ;psect for function _InitKeypad
  7737  1B3C                     _InitKeypad:	
  7738                           
  7739                           ;keypad.h: 31: PORTB = 0x00;
  7740                           
  7741                           ;incstack = 0
  7742                           ; Regs used in _InitKeypad: [wreg+status,2+status,0]
  7743  1B3C  1283               	bcf	3,5	;RP0=0, select bank0
  7744  1B3D  1303               	bcf	3,6	;RP1=0, select bank0
  7745  1B3E  0186               	clrf	6	;volatile
  7746                           
  7747                           ;keypad.h: 32: TRISB = 0xF0;
  7748  1B3F  30F0               	movlw	240
  7749  1B40  1683               	bsf	3,5	;RP0=1, select bank1
  7750  1B41  1303               	bcf	3,6	;RP1=0, select bank1
  7751  1B42  0086               	movwf	6	;volatile
  7752                           
  7753                           ;keypad.h: 35: OPTION_REG &= 0x7F;
  7754  1B43  307F               	movlw	127
  7755  1B44  00F0               	movwf	??_InitKeypad
  7756  1B45  0870               	movf	??_InitKeypad,w
  7757  1B46  0581               	andwf	1,f	;volatile
  7758  1B47  0008               	return
  7759  1B48                     __end_of_InitKeypad:	
  7760                           
  7761                           	psect	text34
  7762  1002                     __ptext34:	
  7763 ;; *************** function _InitI2C *****************
  7764 ;; Defined at:
  7765 ;;		line 5 in file "I2C.c"
  7766 ;; Parameters:    Size  Location     Type
  7767 ;;		None
  7768 ;; Auto vars:     Size  Location     Type
  7769 ;;		None
  7770 ;; Return value:  Size  Location     Type
  7771 ;;		None               void
  7772 ;; Registers used:
  7773 ;;		wreg
  7774 ;; Tracked objects:
  7775 ;;		On entry : 0/0
  7776 ;;		On exit  : 0/0
  7777 ;;		Unchanged: 0/0
  7778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7779 ;;      Params:         0       0       0       0       0
  7780 ;;      Locals:         0       0       0       0       0
  7781 ;;      Temps:          0       0       0       0       0
  7782 ;;      Totals:         0       0       0       0       0
  7783 ;;Total ram usage:        0 bytes
  7784 ;; Hardware stack levels used:    1
  7785 ;; This function calls:
  7786 ;;		Nothing
  7787 ;; This function is called by:
  7788 ;;		_InitUnit
  7789 ;; This function uses a non-reentrant model
  7790 ;;
  7791                           
  7792                           
  7793                           ;psect for function _InitI2C
  7794  1002                     _InitI2C:	
  7795                           
  7796                           ;I2C.c: 7: TRISC4 = 1;
  7797                           
  7798                           ;incstack = 0
  7799                           ; Regs used in _InitI2C: [wreg]
  7800  1002  1683               	bsf	3,5	;RP0=1, select bank1
  7801  1003  1303               	bcf	3,6	;RP1=0, select bank1
  7802  1004  1607               	bsf	7,4	;volatile
  7803                           
  7804                           ;I2C.c: 8: TRISC3 = 1;
  7805  1005  1587               	bsf	7,3	;volatile
  7806                           
  7807                           ;I2C.c: 10: SSPADD = ((8000000/4000)/100) - 1;
  7808  1006  3013               	movlw	19
  7809  1007  0093               	movwf	19	;volatile
  7810                           
  7811                           ;I2C.c: 11: SSPSTAT = 0x80;
  7812  1008  3080               	movlw	128
  7813  1009  0094               	movwf	20	;volatile
  7814                           
  7815                           ;I2C.c: 12: SSPCON = 0x28;
  7816  100A  3028               	movlw	40
  7817  100B  1283               	bcf	3,5	;RP0=0, select bank0
  7818  100C  1303               	bcf	3,6	;RP1=0, select bank0
  7819  100D  0094               	movwf	20	;volatile
  7820  100E  0008               	return
  7821  100F                     __end_of_InitI2C:	
  7822                           
  7823                           	psect	text35
  7824  1CBF                     __ptext35:	
  7825 ;; *************** function _GetKeySettings *****************
  7826 ;; Defined at:
  7827 ;;		line 175 in file "keypad.h"
  7828 ;; Parameters:    Size  Location     Type
  7829 ;;		None
  7830 ;; Auto vars:     Size  Location     Type
  7831 ;;  set             2    6[COMMON] int 
  7832 ;;  key             1    8[COMMON] unsigned char 
  7833 ;; Return value:  Size  Location     Type
  7834 ;;                  1    wreg      unsigned char 
  7835 ;; Registers used:
  7836 ;;		wreg, status,2, status,0, pclath, cstack
  7837 ;; Tracked objects:
  7838 ;;		On entry : 0/0
  7839 ;;		On exit  : 0/0
  7840 ;;		Unchanged: 0/0
  7841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7842 ;;      Params:         0       0       0       0       0
  7843 ;;      Locals:         3       0       0       0       0
  7844 ;;      Temps:          3       0       0       0       0
  7845 ;;      Totals:         6       0       0       0       0
  7846 ;;Total ram usage:        6 bytes
  7847 ;; Hardware stack levels used:    1
  7848 ;; Hardware stack levels required when called:    1
  7849 ;; This function calls:
  7850 ;;		_READ_SWITCHES
  7851 ;; This function is called by:
  7852 ;;		_InitUnit
  7853 ;; This function uses a non-reentrant model
  7854 ;;
  7855                           
  7856                           
  7857                           ;psect for function _GetKeySettings
  7858  1CBF                     _GetKeySettings:	
  7859                           
  7860                           ;keypad.h: 177: char key = 'n';
  7861                           
  7862                           ;incstack = 0
  7863                           ; Regs used in _GetKeySettings: [wreg+status,2+status,0+pclath+cstack]
  7864  1CBF  306E               	movlw	110
  7865  1CC0  00F3               	movwf	??_GetKeySettings
  7866  1CC1  0873               	movf	??_GetKeySettings,w
  7867  1CC2  00F8               	movwf	GetKeySettings@key
  7868                           
  7869                           ;keypad.h: 178: int set=0;
  7870  1CC3  01F6               	clrf	GetKeySettings@set
  7871  1CC4  01F7               	clrf	GetKeySettings@set+1
  7872  1CC5                     l3792:	
  7873                           ;keypad.h: 179: while(key=='n')
  7874                           
  7875  1CC5  306E               	movlw	110
  7876  1CC6  0678               	xorwf	GetKeySettings@key,w
  7877  1CC7  1D03               	btfss	3,2
  7878  1CC8  2CED               	goto	l3794
  7879                           
  7880                           ;keypad.h: 180: {
  7881                           ;keypad.h: 181: key = READ_SWITCHES();
  7882  1CC9  120A  158A  269C  160A  158A  	fcall	_READ_SWITCHES
  7883  1CCE  00F3               	movwf	??_GetKeySettings
  7884  1CCF  0873               	movf	??_GetKeySettings,w
  7885  1CD0  00F8               	movwf	GetKeySettings@key
  7886                           
  7887                           ;keypad.h: 182: _delay((unsigned long)((70)*(20000000/4000.0)));
  7888  1CD1  3002               	movlw	2
  7889  1CD2  00F5               	movwf	??_GetKeySettings+2
  7890  1CD3  30C7               	movlw	199
  7891  1CD4  00F4               	movwf	??_GetKeySettings+1
  7892  1CD5  3088               	movlw	136
  7893  1CD6  00F3               	movwf	??_GetKeySettings
  7894  1CD7                     u4677:	
  7895  1CD7  0BF3               	decfsz	??_GetKeySettings,f
  7896  1CD8  2CD7               	goto	u4677
  7897  1CD9  0BF4               	decfsz	??_GetKeySettings+1,f
  7898  1CDA  2CD7               	goto	u4677
  7899  1CDB  0BF5               	decfsz	??_GetKeySettings+2,f
  7900  1CDC  2CD7               	goto	u4677
  7901  1CDD  0000               	nop
  7902                           
  7903                           ;keypad.h: 183: set++;
  7904  1CDE  3001               	movlw	1
  7905  1CDF  07F6               	addwf	GetKeySettings@set,f
  7906  1CE0  1803               	skipnc
  7907  1CE1  0AF7               	incf	GetKeySettings@set+1,f
  7908  1CE2  3000               	movlw	0
  7909  1CE3  07F7               	addwf	GetKeySettings@set+1,f
  7910                           
  7911                           ;keypad.h: 184: if(set==20)
  7912  1CE4  3014               	movlw	20
  7913  1CE5  0676               	xorwf	GetKeySettings@set,w
  7914  1CE6  0477               	iorwf	GetKeySettings@set+1,w
  7915  1CE7  1D03               	btfss	3,2
  7916  1CE8  2CC5               	goto	l3792
  7917                           
  7918                           ;keypad.h: 185: {
  7919                           ;keypad.h: 186: key = 'n';
  7920  1CE9  306E               	movlw	110
  7921  1CEA  00F3               	movwf	??_GetKeySettings
  7922  1CEB  0873               	movf	??_GetKeySettings,w
  7923  1CEC  00F8               	movwf	GetKeySettings@key
  7924  1CED                     l3794:	
  7925                           ;keypad.h: 187: break;
  7926                           
  7927                           
  7928                           ;keypad.h: 188: }
  7929                           ;keypad.h: 189: }
  7930                           ;keypad.h: 190: return key;
  7931  1CED  0878               	movf	GetKeySettings@key,w
  7932  1CEE  0008               	return
  7933  1CEF                     __end_of_GetKeySettings:	
  7934                           
  7935                           	psect	text36
  7936  0E9C                     __ptext36:	
  7937 ;; *************** function _READ_SWITCHES *****************
  7938 ;; Defined at:
  7939 ;;		line 42 in file "keypad.h"
  7940 ;; Parameters:    Size  Location     Type
  7941 ;;		None
  7942 ;; Auto vars:     Size  Location     Type
  7943 ;;		None
  7944 ;; Return value:  Size  Location     Type
  7945 ;;                  1    wreg      unsigned char 
  7946 ;; Registers used:
  7947 ;;		wreg
  7948 ;; Tracked objects:
  7949 ;;		On entry : 0/0
  7950 ;;		On exit  : 0/0
  7951 ;;		Unchanged: 0/0
  7952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7953 ;;      Params:         0       0       0       0       0
  7954 ;;      Locals:         0       0       0       0       0
  7955 ;;      Temps:          3       0       0       0       0
  7956 ;;      Totals:         3       0       0       0       0
  7957 ;;Total ram usage:        3 bytes
  7958 ;; Hardware stack levels used:    1
  7959 ;; This function calls:
  7960 ;;		Nothing
  7961 ;; This function is called by:
  7962 ;;		_GetKey
  7963 ;;		_GetKeyNumber
  7964 ;;		_GetKeyTime
  7965 ;;		_GetKeyDate
  7966 ;;		_GetKeySettings
  7967 ;; This function uses a non-reentrant model
  7968 ;;
  7969                           
  7970                           
  7971                           ;psect for function _READ_SWITCHES
  7972  0E9C                     _READ_SWITCHES:	
  7973                           
  7974                           ;keypad.h: 44: RB0 = 0; RB1 = 1; RB2 = 1; RB3 = 1;
  7975                           
  7976                           ;incstack = 0
  7977                           ; Regs used in _READ_SWITCHES: [wreg]
  7978  0E9C  1283               	bcf	3,5	;RP0=0, select bank0
  7979  0E9D  1303               	bcf	3,6	;RP1=0, select bank0
  7980  0E9E  1006               	bcf	6,0	;volatile
  7981  0E9F  1486               	bsf	6,1	;volatile
  7982  0EA0  1506               	bsf	6,2	;volatile
  7983  0EA1  1586               	bsf	6,3	;volatile
  7984                           
  7985                           ;keypad.h: 46: if (RB4 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB4==0); return '1'; }
  7986  0EA2  1A06               	btfsc	6,4	;volatile
  7987  0EA3  2EB7               	goto	l229
  7988  0EA4  3007               	movlw	7
  7989  0EA5  00F2               	movwf	??_READ_SWITCHES+2
  7990  0EA6  3058               	movlw	88
  7991  0EA7  00F1               	movwf	??_READ_SWITCHES+1
  7992  0EA8  305E               	movlw	94
  7993  0EA9  00F0               	movwf	??_READ_SWITCHES
  7994  0EAA                     u4687:	
  7995  0EAA  0BF0               	decfsz	??_READ_SWITCHES,f
  7996  0EAB  2EAA               	goto	u4687
  7997  0EAC  0BF1               	decfsz	??_READ_SWITCHES+1,f
  7998  0EAD  2EAA               	goto	u4687
  7999  0EAE  0BF2               	decfsz	??_READ_SWITCHES+2,f
  8000  0EAF  2EAA               	goto	u4687
  8001  0EB0  2EB1               	nop2
  8002  0EB1                     l230:	
  8003  0EB1  1283               	bcf	3,5	;RP0=0, select bank0
  8004  0EB2  1303               	bcf	3,6	;RP1=0, select bank0
  8005  0EB3  1E06               	btfss	6,4	;volatile
  8006  0EB4  2EB1               	goto	l230
  8007  0EB5  3031               	movlw	49
  8008  0EB6  0008               	return
  8009  0EB7                     l229:	
  8010                           
  8011                           ;keypad.h: 47: if (RB5 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB5==0); return '2'; }
  8012  0EB7  1A86               	btfsc	6,5	;volatile
  8013  0EB8  2ECC               	goto	l234
  8014  0EB9  3007               	movlw	7
  8015  0EBA  00F2               	movwf	??_READ_SWITCHES+2
  8016  0EBB  3058               	movlw	88
  8017  0EBC  00F1               	movwf	??_READ_SWITCHES+1
  8018  0EBD  305E               	movlw	94
  8019  0EBE  00F0               	movwf	??_READ_SWITCHES
  8020  0EBF                     u4697:	
  8021  0EBF  0BF0               	decfsz	??_READ_SWITCHES,f
  8022  0EC0  2EBF               	goto	u4697
  8023  0EC1  0BF1               	decfsz	??_READ_SWITCHES+1,f
  8024  0EC2  2EBF               	goto	u4697
  8025  0EC3  0BF2               	decfsz	??_READ_SWITCHES+2,f
  8026  0EC4  2EBF               	goto	u4697
  8027  0EC5  2EC6               	nop2
  8028  0EC6                     l235:	
  8029  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
  8030  0EC7  1303               	bcf	3,6	;RP1=0, select bank0
  8031  0EC8  1E86               	btfss	6,5	;volatile
  8032  0EC9  2EC6               	goto	l235
  8033  0ECA  3032               	movlw	50
  8034  0ECB  0008               	return
  8035  0ECC                     l234:	
  8036                           
  8037                           ;keypad.h: 48: if (RB6 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB6==0); return '3'; }
  8038  0ECC  1B06               	btfsc	6,6	;volatile
  8039  0ECD  2EE1               	goto	l238
  8040  0ECE  3007               	movlw	7
  8041  0ECF  00F2               	movwf	??_READ_SWITCHES+2
  8042  0ED0  3058               	movlw	88
  8043  0ED1  00F1               	movwf	??_READ_SWITCHES+1
  8044  0ED2  305E               	movlw	94
  8045  0ED3  00F0               	movwf	??_READ_SWITCHES
  8046  0ED4                     u4707:	
  8047  0ED4  0BF0               	decfsz	??_READ_SWITCHES,f
  8048  0ED5  2ED4               	goto	u4707
  8049  0ED6  0BF1               	decfsz	??_READ_SWITCHES+1,f
  8050  0ED7  2ED4               	goto	u4707
  8051  0ED8  0BF2               	decfsz	??_READ_SWITCHES+2,f
  8052  0ED9  2ED4               	goto	u4707
  8053  0EDA  2EDB               	nop2
  8054  0EDB                     l239:	
  8055  0EDB  1283               	bcf	3,5	;RP0=0, select bank0
  8056  0EDC  1303               	bcf	3,6	;RP1=0, select bank0
  8057  0EDD  1F06               	btfss	6,6	;volatile
  8058  0EDE  2EDB               	goto	l239
  8059  0EDF  3033               	movlw	51
  8060  0EE0  0008               	return
  8061  0EE1                     l238:	
  8062                           
  8063                           ;keypad.h: 49: if (RB7 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB7==0); return '/'; }
  8064  0EE1  1B86               	btfsc	6,7	;volatile
  8065  0EE2  2EF6               	goto	l242
  8066  0EE3  3007               	movlw	7
  8067  0EE4  00F2               	movwf	??_READ_SWITCHES+2
  8068  0EE5  3058               	movlw	88
  8069  0EE6  00F1               	movwf	??_READ_SWITCHES+1
  8070  0EE7  305E               	movlw	94
  8071  0EE8  00F0               	movwf	??_READ_SWITCHES
  8072  0EE9                     u4717:	
  8073  0EE9  0BF0               	decfsz	??_READ_SWITCHES,f
  8074  0EEA  2EE9               	goto	u4717
  8075  0EEB  0BF1               	decfsz	??_READ_SWITCHES+1,f
  8076  0EEC  2EE9               	goto	u4717
  8077  0EED  0BF2               	decfsz	??_READ_SWITCHES+2,f
  8078  0EEE  2EE9               	goto	u4717
  8079  0EEF  2EF0               	nop2
  8080  0EF0                     l243:	
  8081  0EF0  1283               	bcf	3,5	;RP0=0, select bank0
  8082  0EF1  1303               	bcf	3,6	;RP1=0, select bank0
  8083  0EF2  1F86               	btfss	6,7	;volatile
  8084  0EF3  2EF0               	goto	l243
  8085  0EF4  302F               	movlw	47
  8086  0EF5  0008               	return
  8087  0EF6                     l242:	
  8088                           
  8089                           ;keypad.h: 51: RB0 = 1; RB1 = 0; RB2 = 1; RB3 = 1;
  8090  0EF6  1406               	bsf	6,0	;volatile
  8091  0EF7  1086               	bcf	6,1	;volatile
  8092  0EF8  1506               	bsf	6,2	;volatile
  8093  0EF9  1586               	bsf	6,3	;volatile
  8094                           
  8095                           ;keypad.h: 53: if (RB4 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB4==0); return '4'; }
  8096  0EFA  1A06               	btfsc	6,4	;volatile
  8097  0EFB  2F0F               	goto	l246
  8098  0EFC  3007               	movlw	7
  8099  0EFD  00F2               	movwf	??_READ_SWITCHES+2
  8100  0EFE  3058               	movlw	88
  8101  0EFF  00F1               	movwf	??_READ_SWITCHES+1
  8102  0F00  305E               	movlw	94
  8103  0F01  00F0               	movwf	??_READ_SWITCHES
  8104  0F02                     u4727:	
  8105  0F02  0BF0               	decfsz	??_READ_SWITCHES,f
  8106  0F03  2F02               	goto	u4727
  8107  0F04  0BF1               	decfsz	??_READ_SWITCHES+1,f
  8108  0F05  2F02               	goto	u4727
  8109  0F06  0BF2               	decfsz	??_READ_SWITCHES+2,f
  8110  0F07  2F02               	goto	u4727
  8111  0F08  2F09               	nop2
  8112  0F09                     l247:	
  8113  0F09  1283               	bcf	3,5	;RP0=0, select bank0
  8114  0F0A  1303               	bcf	3,6	;RP1=0, select bank0
  8115  0F0B  1E06               	btfss	6,4	;volatile
  8116  0F0C  2F09               	goto	l247
  8117  0F0D  3034               	movlw	52
  8118  0F0E  0008               	return
  8119  0F0F                     l246:	
  8120                           
  8121                           ;keypad.h: 54: if (RB5 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB5==0); return '5'; }
  8122  0F0F  1A86               	btfsc	6,5	;volatile
  8123  0F10  2F24               	goto	l250
  8124  0F11  3007               	movlw	7
  8125  0F12  00F2               	movwf	??_READ_SWITCHES+2
  8126  0F13  3058               	movlw	88
  8127  0F14  00F1               	movwf	??_READ_SWITCHES+1
  8128  0F15  305E               	movlw	94
  8129  0F16  00F0               	movwf	??_READ_SWITCHES
  8130  0F17                     u4737:	
  8131  0F17  0BF0               	decfsz	??_READ_SWITCHES,f
  8132  0F18  2F17               	goto	u4737
  8133  0F19  0BF1               	decfsz	??_READ_SWITCHES+1,f
  8134  0F1A  2F17               	goto	u4737
  8135  0F1B  0BF2               	decfsz	??_READ_SWITCHES+2,f
  8136  0F1C  2F17               	goto	u4737
  8137  0F1D  2F1E               	nop2
  8138  0F1E                     l251:	
  8139  0F1E  1283               	bcf	3,5	;RP0=0, select bank0
  8140  0F1F  1303               	bcf	3,6	;RP1=0, select bank0
  8141  0F20  1E86               	btfss	6,5	;volatile
  8142  0F21  2F1E               	goto	l251
  8143  0F22  3035               	movlw	53
  8144  0F23  0008               	return
  8145  0F24                     l250:	
  8146                           
  8147                           ;keypad.h: 55: if (RB6 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB6==0); return '6'; }
  8148  0F24  1B06               	btfsc	6,6	;volatile
  8149  0F25  2F39               	goto	l254
  8150  0F26  3007               	movlw	7
  8151  0F27  00F2               	movwf	??_READ_SWITCHES+2
  8152  0F28  3058               	movlw	88
  8153  0F29  00F1               	movwf	??_READ_SWITCHES+1
  8154  0F2A  305E               	movlw	94
  8155  0F2B  00F0               	movwf	??_READ_SWITCHES
  8156  0F2C                     u4747:	
  8157  0F2C  0BF0               	decfsz	??_READ_SWITCHES,f
  8158  0F2D  2F2C               	goto	u4747
  8159  0F2E  0BF1               	decfsz	??_READ_SWITCHES+1,f
  8160  0F2F  2F2C               	goto	u4747
  8161  0F30  0BF2               	decfsz	??_READ_SWITCHES+2,f
  8162  0F31  2F2C               	goto	u4747
  8163  0F32  2F33               	nop2
  8164  0F33                     l255:	
  8165  0F33  1283               	bcf	3,5	;RP0=0, select bank0
  8166  0F34  1303               	bcf	3,6	;RP1=0, select bank0
  8167  0F35  1F06               	btfss	6,6	;volatile
  8168  0F36  2F33               	goto	l255
  8169  0F37  3036               	movlw	54
  8170  0F38  0008               	return
  8171  0F39                     l254:	
  8172                           
  8173                           ;keypad.h: 56: if (RB7 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB7==0); return 'x'; }
  8174  0F39  1B86               	btfsc	6,7	;volatile
  8175  0F3A  2F4E               	goto	l258
  8176  0F3B  3007               	movlw	7
  8177  0F3C  00F2               	movwf	??_READ_SWITCHES+2
  8178  0F3D  3058               	movlw	88
  8179  0F3E  00F1               	movwf	??_READ_SWITCHES+1
  8180  0F3F  305E               	movlw	94
  8181  0F40  00F0               	movwf	??_READ_SWITCHES
  8182  0F41                     u4757:	
  8183  0F41  0BF0               	decfsz	??_READ_SWITCHES,f
  8184  0F42  2F41               	goto	u4757
  8185  0F43  0BF1               	decfsz	??_READ_SWITCHES+1,f
  8186  0F44  2F41               	goto	u4757
  8187  0F45  0BF2               	decfsz	??_READ_SWITCHES+2,f
  8188  0F46  2F41               	goto	u4757
  8189  0F47  2F48               	nop2
  8190  0F48                     l259:	
  8191  0F48  1283               	bcf	3,5	;RP0=0, select bank0
  8192  0F49  1303               	bcf	3,6	;RP1=0, select bank0
  8193  0F4A  1F86               	btfss	6,7	;volatile
  8194  0F4B  2F48               	goto	l259
  8195  0F4C  3078               	movlw	120
  8196  0F4D  0008               	return
  8197  0F4E                     l258:	
  8198                           
  8199                           ;keypad.h: 58: RB0 = 1; RB1 = 1; RB2 = 0; RB3 = 1;
  8200  0F4E  1406               	bsf	6,0	;volatile
  8201  0F4F  1486               	bsf	6,1	;volatile
  8202  0F50  1106               	bcf	6,2	;volatile
  8203  0F51  1586               	bsf	6,3	;volatile
  8204                           
  8205                           ;keypad.h: 60: if (RB4 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB4==0); return '7'; }
  8206  0F52  1A06               	btfsc	6,4	;volatile
  8207  0F53  2F67               	goto	l262
  8208  0F54  3007               	movlw	7
  8209  0F55  00F2               	movwf	??_READ_SWITCHES+2
  8210  0F56  3058               	movlw	88
  8211  0F57  00F1               	movwf	??_READ_SWITCHES+1
  8212  0F58  305E               	movlw	94
  8213  0F59  00F0               	movwf	??_READ_SWITCHES
  8214  0F5A                     u4767:	
  8215  0F5A  0BF0               	decfsz	??_READ_SWITCHES,f
  8216  0F5B  2F5A               	goto	u4767
  8217  0F5C  0BF1               	decfsz	??_READ_SWITCHES+1,f
  8218  0F5D  2F5A               	goto	u4767
  8219  0F5E  0BF2               	decfsz	??_READ_SWITCHES+2,f
  8220  0F5F  2F5A               	goto	u4767
  8221  0F60  2F61               	nop2
  8222  0F61                     l263:	
  8223  0F61  1283               	bcf	3,5	;RP0=0, select bank0
  8224  0F62  1303               	bcf	3,6	;RP1=0, select bank0
  8225  0F63  1E06               	btfss	6,4	;volatile
  8226  0F64  2F61               	goto	l263
  8227  0F65  3037               	movlw	55
  8228  0F66  0008               	return
  8229  0F67                     l262:	
  8230                           
  8231                           ;keypad.h: 61: if (RB5 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB5==0); return '8'; }
  8232  0F67  1A86               	btfsc	6,5	;volatile
  8233  0F68  2F7C               	goto	l266
  8234  0F69  3007               	movlw	7
  8235  0F6A  00F2               	movwf	??_READ_SWITCHES+2
  8236  0F6B  3058               	movlw	88
  8237  0F6C  00F1               	movwf	??_READ_SWITCHES+1
  8238  0F6D  305E               	movlw	94
  8239  0F6E  00F0               	movwf	??_READ_SWITCHES
  8240  0F6F                     u4777:	
  8241  0F6F  0BF0               	decfsz	??_READ_SWITCHES,f
  8242  0F70  2F6F               	goto	u4777
  8243  0F71  0BF1               	decfsz	??_READ_SWITCHES+1,f
  8244  0F72  2F6F               	goto	u4777
  8245  0F73  0BF2               	decfsz	??_READ_SWITCHES+2,f
  8246  0F74  2F6F               	goto	u4777
  8247  0F75  2F76               	nop2
  8248  0F76                     l267:	
  8249  0F76  1283               	bcf	3,5	;RP0=0, select bank0
  8250  0F77  1303               	bcf	3,6	;RP1=0, select bank0
  8251  0F78  1E86               	btfss	6,5	;volatile
  8252  0F79  2F76               	goto	l267
  8253  0F7A  3038               	movlw	56
  8254  0F7B  0008               	return
  8255  0F7C                     l266:	
  8256                           
  8257                           ;keypad.h: 62: if (RB6 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB6==0); return '9'; }
  8258  0F7C  1B06               	btfsc	6,6	;volatile
  8259  0F7D  2F91               	goto	l270
  8260  0F7E  3007               	movlw	7
  8261  0F7F  00F2               	movwf	??_READ_SWITCHES+2
  8262  0F80  3058               	movlw	88
  8263  0F81  00F1               	movwf	??_READ_SWITCHES+1
  8264  0F82  305E               	movlw	94
  8265  0F83  00F0               	movwf	??_READ_SWITCHES
  8266  0F84                     u4787:	
  8267  0F84  0BF0               	decfsz	??_READ_SWITCHES,f
  8268  0F85  2F84               	goto	u4787
  8269  0F86  0BF1               	decfsz	??_READ_SWITCHES+1,f
  8270  0F87  2F84               	goto	u4787
  8271  0F88  0BF2               	decfsz	??_READ_SWITCHES+2,f
  8272  0F89  2F84               	goto	u4787
  8273  0F8A  2F8B               	nop2
  8274  0F8B                     l271:	
  8275  0F8B  1283               	bcf	3,5	;RP0=0, select bank0
  8276  0F8C  1303               	bcf	3,6	;RP1=0, select bank0
  8277  0F8D  1F06               	btfss	6,6	;volatile
  8278  0F8E  2F8B               	goto	l271
  8279  0F8F  3039               	movlw	57
  8280  0F90  0008               	return
  8281  0F91                     l270:	
  8282                           
  8283                           ;keypad.h: 63: if (RB7 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB7==0); return '-'; }
  8284  0F91  1B86               	btfsc	6,7	;volatile
  8285  0F92  2FA6               	goto	l274
  8286  0F93  3007               	movlw	7
  8287  0F94  00F2               	movwf	??_READ_SWITCHES+2
  8288  0F95  3058               	movlw	88
  8289  0F96  00F1               	movwf	??_READ_SWITCHES+1
  8290  0F97  305E               	movlw	94
  8291  0F98  00F0               	movwf	??_READ_SWITCHES
  8292  0F99                     u4797:	
  8293  0F99  0BF0               	decfsz	??_READ_SWITCHES,f
  8294  0F9A  2F99               	goto	u4797
  8295  0F9B  0BF1               	decfsz	??_READ_SWITCHES+1,f
  8296  0F9C  2F99               	goto	u4797
  8297  0F9D  0BF2               	decfsz	??_READ_SWITCHES+2,f
  8298  0F9E  2F99               	goto	u4797
  8299  0F9F  2FA0               	nop2
  8300  0FA0                     l275:	
  8301  0FA0  1283               	bcf	3,5	;RP0=0, select bank0
  8302  0FA1  1303               	bcf	3,6	;RP1=0, select bank0
  8303  0FA2  1F86               	btfss	6,7	;volatile
  8304  0FA3  2FA0               	goto	l275
  8305  0FA4  302D               	movlw	45
  8306  0FA5  0008               	return
  8307  0FA6                     l274:	
  8308                           
  8309                           ;keypad.h: 65: RB0 = 1; RB1 = 1; RB2 = 1; RB3 = 0;
  8310  0FA6  1406               	bsf	6,0	;volatile
  8311  0FA7  1486               	bsf	6,1	;volatile
  8312  0FA8  1506               	bsf	6,2	;volatile
  8313  0FA9  1186               	bcf	6,3	;volatile
  8314                           
  8315                           ;keypad.h: 67: if (RB4 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB4==0); return 'C'; }
  8316  0FAA  1A06               	btfsc	6,4	;volatile
  8317  0FAB  2FBF               	goto	l278
  8318  0FAC  3007               	movlw	7
  8319  0FAD  00F2               	movwf	??_READ_SWITCHES+2
  8320  0FAE  3058               	movlw	88
  8321  0FAF  00F1               	movwf	??_READ_SWITCHES+1
  8322  0FB0  305E               	movlw	94
  8323  0FB1  00F0               	movwf	??_READ_SWITCHES
  8324  0FB2                     u4807:	
  8325  0FB2  0BF0               	decfsz	??_READ_SWITCHES,f
  8326  0FB3  2FB2               	goto	u4807
  8327  0FB4  0BF1               	decfsz	??_READ_SWITCHES+1,f
  8328  0FB5  2FB2               	goto	u4807
  8329  0FB6  0BF2               	decfsz	??_READ_SWITCHES+2,f
  8330  0FB7  2FB2               	goto	u4807
  8331  0FB8  2FB9               	nop2
  8332  0FB9                     l279:	
  8333  0FB9  1283               	bcf	3,5	;RP0=0, select bank0
  8334  0FBA  1303               	bcf	3,6	;RP1=0, select bank0
  8335  0FBB  1E06               	btfss	6,4	;volatile
  8336  0FBC  2FB9               	goto	l279
  8337  0FBD  3043               	movlw	67
  8338  0FBE  0008               	return
  8339  0FBF                     l278:	
  8340                           
  8341                           ;keypad.h: 68: if (RB5 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB5==0); return '0'; }
  8342  0FBF  1A86               	btfsc	6,5	;volatile
  8343  0FC0  2FD4               	goto	l282
  8344  0FC1  3007               	movlw	7
  8345  0FC2  00F2               	movwf	??_READ_SWITCHES+2
  8346  0FC3  3058               	movlw	88
  8347  0FC4  00F1               	movwf	??_READ_SWITCHES+1
  8348  0FC5  305E               	movlw	94
  8349  0FC6  00F0               	movwf	??_READ_SWITCHES
  8350  0FC7                     u4817:	
  8351  0FC7  0BF0               	decfsz	??_READ_SWITCHES,f
  8352  0FC8  2FC7               	goto	u4817
  8353  0FC9  0BF1               	decfsz	??_READ_SWITCHES+1,f
  8354  0FCA  2FC7               	goto	u4817
  8355  0FCB  0BF2               	decfsz	??_READ_SWITCHES+2,f
  8356  0FCC  2FC7               	goto	u4817
  8357  0FCD  2FCE               	nop2
  8358  0FCE                     l283:	
  8359  0FCE  1283               	bcf	3,5	;RP0=0, select bank0
  8360  0FCF  1303               	bcf	3,6	;RP1=0, select bank0
  8361  0FD0  1E86               	btfss	6,5	;volatile
  8362  0FD1  2FCE               	goto	l283
  8363  0FD2  3030               	movlw	48
  8364  0FD3  0008               	return
  8365  0FD4                     l282:	
  8366                           
  8367                           ;keypad.h: 69: if (RB6 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB6==0); return '='; }
  8368  0FD4  1B06               	btfsc	6,6	;volatile
  8369  0FD5  2FE9               	goto	l286
  8370  0FD6  3007               	movlw	7
  8371  0FD7  00F2               	movwf	??_READ_SWITCHES+2
  8372  0FD8  3058               	movlw	88
  8373  0FD9  00F1               	movwf	??_READ_SWITCHES+1
  8374  0FDA  305E               	movlw	94
  8375  0FDB  00F0               	movwf	??_READ_SWITCHES
  8376  0FDC                     u4827:	
  8377  0FDC  0BF0               	decfsz	??_READ_SWITCHES,f
  8378  0FDD  2FDC               	goto	u4827
  8379  0FDE  0BF1               	decfsz	??_READ_SWITCHES+1,f
  8380  0FDF  2FDC               	goto	u4827
  8381  0FE0  0BF2               	decfsz	??_READ_SWITCHES+2,f
  8382  0FE1  2FDC               	goto	u4827
  8383  0FE2  2FE3               	nop2
  8384  0FE3                     l287:	
  8385  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  8386  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  8387  0FE5  1F06               	btfss	6,6	;volatile
  8388  0FE6  2FE3               	goto	l287
  8389  0FE7  303D               	movlw	61
  8390  0FE8  0008               	return
  8391  0FE9                     l286:	
  8392                           
  8393                           ;keypad.h: 70: if (RB7 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB7==0); return '+'; }
  8394  0FE9  1B86               	btfsc	6,7	;volatile
  8395  0FEA  2FFE               	goto	l3050
  8396  0FEB  3007               	movlw	7
  8397  0FEC  00F2               	movwf	??_READ_SWITCHES+2
  8398  0FED  3058               	movlw	88
  8399  0FEE  00F1               	movwf	??_READ_SWITCHES+1
  8400  0FEF  305E               	movlw	94
  8401  0FF0  00F0               	movwf	??_READ_SWITCHES
  8402  0FF1                     u4837:	
  8403  0FF1  0BF0               	decfsz	??_READ_SWITCHES,f
  8404  0FF2  2FF1               	goto	u4837
  8405  0FF3  0BF1               	decfsz	??_READ_SWITCHES+1,f
  8406  0FF4  2FF1               	goto	u4837
  8407  0FF5  0BF2               	decfsz	??_READ_SWITCHES+2,f
  8408  0FF6  2FF1               	goto	u4837
  8409  0FF7  2FF8               	nop2
  8410  0FF8                     l291:	
  8411  0FF8  1283               	bcf	3,5	;RP0=0, select bank0
  8412  0FF9  1303               	bcf	3,6	;RP1=0, select bank0
  8413  0FFA  1F86               	btfss	6,7	;volatile
  8414  0FFB  2FF8               	goto	l291
  8415  0FFC  302B               	movlw	43
  8416  0FFD  0008               	return
  8417  0FFE                     l3050:	
  8418                           
  8419                           ;keypad.h: 72: return 'n';
  8420  0FFE  306E               	movlw	110
  8421  0FFF  0008               	return
  8422  1000                     __end_of_READ_SWITCHES:	
  8423                           
  8424                           	psect	text37
  8425  1D54                     __ptext37:	
  8426 ;; *************** function _EEPROMGET *****************
  8427 ;; Defined at:
  8428 ;;		line 38 in file "RTC_F.c"
  8429 ;; Parameters:    Size  Location     Type
  8430 ;;		None
  8431 ;; Auto vars:     Size  Location     Type
  8432 ;;  x               2    3[COMMON] int 
  8433 ;; Return value:  Size  Location     Type
  8434 ;;		None               void
  8435 ;; Registers used:
  8436 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8437 ;; Tracked objects:
  8438 ;;		On entry : 0/0
  8439 ;;		On exit  : 0/0
  8440 ;;		Unchanged: 0/0
  8441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8442 ;;      Params:         0       0       0       0       0
  8443 ;;      Locals:         2       0       0       0       0
  8444 ;;      Temps:          2       0       0       0       0
  8445 ;;      Totals:         4       0       0       0       0
  8446 ;;Total ram usage:        4 bytes
  8447 ;; Hardware stack levels used:    1
  8448 ;; Hardware stack levels required when called:    1
  8449 ;; This function calls:
  8450 ;;		_readEEPROM
  8451 ;; This function is called by:
  8452 ;;		_InitUnit
  8453 ;; This function uses a non-reentrant model
  8454 ;;
  8455                           
  8456                           
  8457                           ;psect for function _EEPROMGET
  8458  1D54                     _EEPROMGET:	
  8459                           
  8460                           ;RTC_F.c: 40: int x;
  8461                           ;RTC_F.c: 41: for(x=0;x<12;x++)
  8462                           
  8463                           ;incstack = 0
  8464                           ; Regs used in _EEPROMGET: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8465  1D54  01F3               	clrf	EEPROMGET@x
  8466  1D55  01F4               	clrf	EEPROMGET@x+1
  8467  1D56  0874               	movf	EEPROMGET@x+1,w
  8468  1D57  3A80               	xorlw	128
  8469  1D58  00FF               	movwf	127
  8470  1D59  3080               	movlw	128
  8471  1D5A  027F               	subwf	127,w
  8472  1D5B  1D03               	skipz
  8473  1D5C  2D5F               	goto	u3975
  8474  1D5D  300C               	movlw	12
  8475  1D5E  0273               	subwf	EEPROMGET@x,w
  8476  1D5F                     u3975:	
  8477  1D5F  1803               	btfsc	3,0
  8478  1D60  2D7F               	goto	l3840
  8479  1D61                     l3834:	
  8480                           
  8481                           ;RTC_F.c: 42: number[x]=readEEPROM(x);
  8482  1D61  0873               	movf	EEPROMGET@x,w
  8483  1D62  160A  158A  2348  160A  158A  	fcall	_readEEPROM
  8484  1D67  00F1               	movwf	??_EEPROMGET
  8485  1D68  0873               	movf	EEPROMGET@x,w
  8486  1D69  3EAD               	addlw	(low (_number| 0))& (0+255)
  8487  1D6A  0084               	movwf	4
  8488  1D6B  0871               	movf	??_EEPROMGET,w
  8489  1D6C  1383               	bcf	3,7	;select IRP bank1
  8490  1D6D  0080               	movwf	0
  8491  1D6E  3001               	movlw	1
  8492  1D6F  07F3               	addwf	EEPROMGET@x,f
  8493  1D70  1803               	skipnc
  8494  1D71  0AF4               	incf	EEPROMGET@x+1,f
  8495  1D72  3000               	movlw	0
  8496  1D73  07F4               	addwf	EEPROMGET@x+1,f
  8497  1D74  0874               	movf	EEPROMGET@x+1,w
  8498  1D75  3A80               	xorlw	128
  8499  1D76  00FF               	movwf	127
  8500  1D77  3080               	movlw	128
  8501  1D78  027F               	subwf	127,w
  8502  1D79  1D03               	skipz
  8503  1D7A  2D7D               	goto	u3985
  8504  1D7B  300C               	movlw	12
  8505  1D7C  0273               	subwf	EEPROMGET@x,w
  8506  1D7D                     u3985:	
  8507  1D7D  1C03               	skipc
  8508  1D7E  2D61               	goto	l3834
  8509  1D7F                     l3840:	
  8510                           
  8511                           ;RTC_F.c: 43: _delay((unsigned long)((50)*(8000000/4000.0)));
  8512  1D7F  3082               	movlw	130
  8513  1D80  00F2               	movwf	??_EEPROMGET+1
  8514  1D81  30DD               	movlw	221
  8515  1D82  00F1               	movwf	??_EEPROMGET
  8516  1D83                     u4847:	
  8517  1D83  0BF1               	decfsz	??_EEPROMGET,f
  8518  1D84  2D83               	goto	u4847
  8519  1D85  0BF2               	decfsz	??_EEPROMGET+1,f
  8520  1D86  2D83               	goto	u4847
  8521  1D87  2D88               	nop2
  8522  1D88  0008               	return
  8523  1D89                     __end_of_EEPROMGET:	
  8524                           
  8525                           	psect	text38
  8526  1B48                     __ptext38:	
  8527 ;; *************** function _readEEPROM *****************
  8528 ;; Defined at:
  8529 ;;		line 8 in file "EEPROM.h"
  8530 ;; Parameters:    Size  Location     Type
  8531 ;;  address         1    wreg     unsigned char 
  8532 ;; Auto vars:     Size  Location     Type
  8533 ;;  address         1    0[COMMON] unsigned char 
  8534 ;; Return value:  Size  Location     Type
  8535 ;;                  1    wreg      unsigned char 
  8536 ;; Registers used:
  8537 ;;		wreg
  8538 ;; Tracked objects:
  8539 ;;		On entry : 0/0
  8540 ;;		On exit  : 0/0
  8541 ;;		Unchanged: 0/0
  8542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8543 ;;      Params:         0       0       0       0       0
  8544 ;;      Locals:         1       0       0       0       0
  8545 ;;      Temps:          0       0       0       0       0
  8546 ;;      Totals:         1       0       0       0       0
  8547 ;;Total ram usage:        1 bytes
  8548 ;; Hardware stack levels used:    1
  8549 ;; This function calls:
  8550 ;;		Nothing
  8551 ;; This function is called by:
  8552 ;;		_EEPROMGET
  8553 ;; This function uses a non-reentrant model
  8554 ;;
  8555                           
  8556                           
  8557                           ;psect for function _readEEPROM
  8558  1B48                     _readEEPROM:	
  8559                           
  8560                           ;incstack = 0
  8561                           ; Regs used in _readEEPROM: [wreg]
  8562                           ;readEEPROM@address stored from wreg
  8563  1B48  00F0               	movwf	readEEPROM@address
  8564                           
  8565                           ;EEPROM.h: 10: EEADR = address;
  8566  1B49  0870               	movf	readEEPROM@address,w
  8567  1B4A  1283               	bcf	3,5	;RP0=0, select bank2
  8568  1B4B  1703               	bsf	3,6	;RP1=1, select bank2
  8569  1B4C  008D               	movwf	13	;volatile
  8570                           
  8571                           ;EEPROM.h: 11: EEPGD = 0;
  8572  1B4D  1683               	bsf	3,5	;RP0=1, select bank3
  8573  1B4E  1703               	bsf	3,6	;RP1=1, select bank3
  8574  1B4F  138C               	bcf	12,7	;volsfr
  8575                           
  8576                           ;EEPROM.h: 12: RD = 1;
  8577  1B50  140C               	bsf	12,0	;volsfr
  8578                           
  8579                           ;EEPROM.h: 13: return EEDATA;
  8580  1B51  1283               	bcf	3,5	;RP0=0, select bank2
  8581  1B52  1703               	bsf	3,6	;RP1=1, select bank2
  8582  1B53  080C               	movf	12,w	;volatile
  8583  1B54  0008               	return
  8584  1B55                     __end_of_readEEPROM:	
  8585                           
  8586                           	psect	text39
  8587  11F6                     __ptext39:	
  8588 ;; *************** function _CheckSensors *****************
  8589 ;; Defined at:
  8590 ;;		line 303 in file "RTC_F.c"
  8591 ;; Parameters:    Size  Location     Type
  8592 ;;		None
  8593 ;; Auto vars:     Size  Location     Type
  8594 ;;		None
  8595 ;; Return value:  Size  Location     Type
  8596 ;;		None               void
  8597 ;; Registers used:
  8598 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8599 ;; Tracked objects:
  8600 ;;		On entry : 0/0
  8601 ;;		On exit  : 0/0
  8602 ;;		Unchanged: 0/0
  8603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8604 ;;      Params:         0       0       0       0       0
  8605 ;;      Locals:         0       0       0       0       0
  8606 ;;      Temps:          0       3       0       0       0
  8607 ;;      Totals:         0       3       0       0       0
  8608 ;;Total ram usage:        3 bytes
  8609 ;; Hardware stack levels used:    1
  8610 ;; Hardware stack levels required when called:    4
  8611 ;; This function calls:
  8612 ;;		_GSM_Send
  8613 ;;		_Lcd_Clear
  8614 ;;		_Lcd_Set_Cursor
  8615 ;;		_Lcd_Write_String
  8616 ;; This function is called by:
  8617 ;;		_main
  8618 ;; This function uses a non-reentrant model
  8619 ;;
  8620                           
  8621                           
  8622                           ;psect for function _CheckSensors
  8623  11F6                     _CheckSensors:	
  8624                           
  8625                           ;RTC_F.c: 305: if(RC1==0 || RC2==0)
  8626                           
  8627                           ;incstack = 0
  8628                           ; Regs used in _CheckSensors: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8629  11F6  1283               	bcf	3,5	;RP0=0, select bank0
  8630  11F7  1303               	bcf	3,6	;RP1=0, select bank0
  8631  11F8  1C87               	btfss	7,1	;volatile
  8632  11F9  29FC               	goto	l507
  8633  11FA  1907               	btfsc	7,2	;volatile
  8634  11FB  0008               	return
  8635  11FC                     l507:	
  8636                           
  8637                           ;RTC_F.c: 306: {
  8638                           ;RTC_F.c: 307: RD0=0;
  8639  11FC  1008               	bcf	8,0	;volatile
  8640                           
  8641                           ;RTC_F.c: 308: RE0=0;
  8642  11FD  1009               	bcf	9,0	;volatile
  8643                           
  8644                           ;RTC_F.c: 309: RE1=1;
  8645  11FE  1489               	bsf	9,1	;volatile
  8646                           
  8647                           ;RTC_F.c: 311: Lcd_Clear();
  8648  11FF  160A  158A  2331  160A  118A  	fcall	_Lcd_Clear
  8649                           
  8650                           ;RTC_F.c: 312: Lcd_Set_Cursor(1,1);
  8651  1204  01F4               	clrf	Lcd_Set_Cursor@b
  8652  1205  0AF4               	incf	Lcd_Set_Cursor@b,f
  8653  1206  3001               	movlw	1
  8654  1207  160A  158A  276B  160A  118A  	fcall	_Lcd_Set_Cursor
  8655                           
  8656                           ;RTC_F.c: 313: Lcd_Write_String("     DANGER");
  8657  120C  3090               	movlw	low (STR_47| (0+32768))
  8658  120D  00F5               	movwf	Lcd_Write_String@a
  8659  120E  3089               	movlw	high (STR_47| (0+32768))
  8660  120F  00F6               	movwf	Lcd_Write_String@a+1
  8661  1210  160A  158A  26A4  160A  118A  	fcall	_Lcd_Write_String
  8662                           
  8663                           ;RTC_F.c: 314: _delay((unsigned long)((2000)*(8000000/4000.0)));
  8664  1215  3015               	movlw	21
  8665  1216  1283               	bcf	3,5	;RP0=0, select bank0
  8666  1217  1303               	bcf	3,6	;RP1=0, select bank0
  8667  1218  00BA               	movwf	??_CheckSensors+2
  8668  1219  304B               	movlw	75
  8669  121A  00B9               	movwf	??_CheckSensors+1
  8670  121B  30D1               	movlw	209
  8671  121C  00B8               	movwf	??_CheckSensors
  8672  121D                     u4857:	
  8673  121D  0BB8               	decfsz	??_CheckSensors,f
  8674  121E  2A1D               	goto	u4857
  8675  121F  0BB9               	decfsz	??_CheckSensors+1,f
  8676  1220  2A1D               	goto	u4857
  8677  1221  0BBA               	decfsz	??_CheckSensors+2,f
  8678  1222  2A1D               	goto	u4857
  8679  1223  0000               	nop
  8680                           
  8681                           ;RTC_F.c: 315: GSM_Send();
  8682  1224  160A  158A  26E1  160A  118A  	fcall	_GSM_Send
  8683                           
  8684                           ;RTC_F.c: 316: Lcd_Clear();
  8685  1229  160A  158A  2331  160A  118A  	fcall	_Lcd_Clear
  8686                           
  8687                           ;RTC_F.c: 317: Lcd_Set_Cursor(1,1);
  8688  122E  01F4               	clrf	Lcd_Set_Cursor@b
  8689  122F  0AF4               	incf	Lcd_Set_Cursor@b,f
  8690  1230  3001               	movlw	1
  8691  1231  160A  158A  276B  160A  118A  	fcall	_Lcd_Set_Cursor
  8692                           
  8693                           ;RTC_F.c: 318: Lcd_Write_String("Message Sent!");
  8694  1236  3025               	movlw	low (STR_48| (0+32768))
  8695  1237  00F5               	movwf	Lcd_Write_String@a
  8696  1238  3089               	movlw	high (STR_48| (0+32768))
  8697  1239  00F6               	movwf	Lcd_Write_String@a+1
  8698  123A  160A  158A  26A4  160A  118A  	fcall	_Lcd_Write_String
  8699                           
  8700                           ;RTC_F.c: 319: _delay((unsigned long)((2000)*(8000000/4000.0)));
  8701  123F  3015               	movlw	21
  8702  1240  1283               	bcf	3,5	;RP0=0, select bank0
  8703  1241  1303               	bcf	3,6	;RP1=0, select bank0
  8704  1242  00BA               	movwf	??_CheckSensors+2
  8705  1243  304B               	movlw	75
  8706  1244  00B9               	movwf	??_CheckSensors+1
  8707  1245  30D1               	movlw	209
  8708  1246  00B8               	movwf	??_CheckSensors
  8709  1247                     u4867:	
  8710  1247  0BB8               	decfsz	??_CheckSensors,f
  8711  1248  2A47               	goto	u4867
  8712  1249  0BB9               	decfsz	??_CheckSensors+1,f
  8713  124A  2A47               	goto	u4867
  8714  124B  0BBA               	decfsz	??_CheckSensors+2,f
  8715  124C  2A47               	goto	u4867
  8716  124D  0000               	nop
  8717                           
  8718                           ;RTC_F.c: 320: Lcd_Clear();
  8719  124E  160A  158A  2331  160A  118A  	fcall	_Lcd_Clear
  8720                           
  8721                           ;RTC_F.c: 321: Lcd_Set_Cursor(1,1);
  8722  1253  01F4               	clrf	Lcd_Set_Cursor@b
  8723  1254  0AF4               	incf	Lcd_Set_Cursor@b,f
  8724  1255  3001               	movlw	1
  8725  1256  160A  158A  276B  160A  118A  	fcall	_Lcd_Set_Cursor
  8726                           
  8727                           ;RTC_F.c: 322: Lcd_Write_String("     DANGER");
  8728  125B  3090               	movlw	low (STR_47| (0+32768))
  8729  125C  00F5               	movwf	Lcd_Write_String@a
  8730  125D  3089               	movlw	high (STR_47| (0+32768))
  8731  125E  00F6               	movwf	Lcd_Write_String@a+1
  8732  125F  160A  158A  26A4  160A  118A  	fcall	_Lcd_Write_String
  8733  1264                     l508:	
  8734                           ;RTC_F.c: 323: while(1)
  8735                           
  8736                           
  8737                           ;RTC_F.c: 324: {}
  8738  1264  2A64               	goto	l508
  8739  1265                     __end_of_CheckSensors:	
  8740                           
  8741                           	psect	text40
  8742  1B31                     __ptext40:	
  8743 ;; *************** function _Lcd_Clear *****************
  8744 ;; Defined at:
  8745 ;;		line 41 in file "lcd.h"
  8746 ;; Parameters:    Size  Location     Type
  8747 ;;		None
  8748 ;; Auto vars:     Size  Location     Type
  8749 ;;		None
  8750 ;; Return value:  Size  Location     Type
  8751 ;;                  2  160[None  ] int 
  8752 ;; Registers used:
  8753 ;;		wreg, status,2, status,0, pclath, cstack
  8754 ;; Tracked objects:
  8755 ;;		On entry : 0/0
  8756 ;;		On exit  : 0/0
  8757 ;;		Unchanged: 0/0
  8758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8759 ;;      Params:         0       0       0       0       0
  8760 ;;      Locals:         0       0       0       0       0
  8761 ;;      Temps:          0       0       0       0       0
  8762 ;;      Totals:         0       0       0       0       0
  8763 ;;Total ram usage:        0 bytes
  8764 ;; Hardware stack levels used:    1
  8765 ;; Hardware stack levels required when called:    2
  8766 ;; This function calls:
  8767 ;;		_Lcd_Cmd
  8768 ;; This function is called by:
  8769 ;;		_DisplayTimeToLCD
  8770 ;;		_InitUnit
  8771 ;;		_Settings
  8772 ;;		_CheckSensors
  8773 ;;		_main
  8774 ;;		_avgpow
  8775 ;; This function uses a non-reentrant model
  8776 ;;
  8777                           
  8778                           
  8779                           ;psect for function _Lcd_Clear
  8780  1B31                     _Lcd_Clear:	
  8781                           
  8782                           ;lcd.h: 43: Lcd_Cmd(0);
  8783                           
  8784                           ;incstack = 0
  8785                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  8786  1B31  3000               	movlw	0
  8787  1B32  160A  158A  23B4  160A  158A  	fcall	_Lcd_Cmd
  8788                           
  8789                           ;lcd.h: 44: Lcd_Cmd(1);
  8790  1B37  3001               	movlw	1
  8791  1B38  160A  158A  23B4   	fcall	_Lcd_Cmd
  8792  1B3B  0008               	return
  8793  1B3C                     __end_of_Lcd_Clear:	
  8794                           
  8795                           	psect	text41
  8796  1EE1                     __ptext41:	
  8797 ;; *************** function _GSM_Send *****************
  8798 ;; Defined at:
  8799 ;;		line 77 in file "GSM.h"
  8800 ;; Parameters:    Size  Location     Type
  8801 ;;		None
  8802 ;; Auto vars:     Size  Location     Type
  8803 ;;		None
  8804 ;; Return value:  Size  Location     Type
  8805 ;;		None               void
  8806 ;; Registers used:
  8807 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8808 ;; Tracked objects:
  8809 ;;		On entry : 0/0
  8810 ;;		On exit  : 0/0
  8811 ;;		Unchanged: 0/0
  8812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8813 ;;      Params:         0       0       0       0       0
  8814 ;;      Locals:         0       0       0       0       0
  8815 ;;      Temps:          0       3       0       0       0
  8816 ;;      Totals:         0       3       0       0       0
  8817 ;;Total ram usage:        3 bytes
  8818 ;; Hardware stack levels used:    1
  8819 ;; Hardware stack levels required when called:    3
  8820 ;; This function calls:
  8821 ;;		_InitUART
  8822 ;;		_Msg_Setup
  8823 ;;		_SendMsg_Inti
  8824 ;; This function is called by:
  8825 ;;		_CheckSensors
  8826 ;; This function uses a non-reentrant model
  8827 ;;
  8828                           
  8829                           
  8830                           ;psect for function _GSM_Send
  8831  1EE1                     _GSM_Send:	
  8832                           
  8833                           ;GSM.h: 79: InitUART(9600);
  8834                           
  8835                           ;incstack = 0
  8836                           ; Regs used in _GSM_Send: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8837  1EE1  3080               	movlw	128
  8838  1EE2  1283               	bcf	3,5	;RP0=0, select bank0
  8839  1EE3  1303               	bcf	3,6	;RP1=0, select bank0
  8840  1EE4  00A6               	movwf	InitUART@BAUDRATE
  8841  1EE5  3025               	movlw	37
  8842  1EE6  00A7               	movwf	InitUART@BAUDRATE+1
  8843  1EE7  160A  158A  2521  160A  158A  	fcall	_InitUART
  8844                           
  8845                           ;GSM.h: 80: _delay((unsigned long)((1000)*(20000000/4000.0)));
  8846  1EEC  301A               	movlw	26
  8847  1EED  1283               	bcf	3,5	;RP0=0, select bank0
  8848  1EEE  1303               	bcf	3,6	;RP1=0, select bank0
  8849  1EEF  00B7               	movwf	??_GSM_Send+2
  8850  1EF0  305E               	movlw	94
  8851  1EF1  00B6               	movwf	??_GSM_Send+1
  8852  1EF2  3086               	movlw	134
  8853  1EF3  00B5               	movwf	??_GSM_Send
  8854  1EF4                     u4877:	
  8855  1EF4  0BB5               	decfsz	??_GSM_Send,f
  8856  1EF5  2EF4               	goto	u4877
  8857  1EF6  0BB6               	decfsz	??_GSM_Send+1,f
  8858  1EF7  2EF4               	goto	u4877
  8859  1EF8  0BB7               	decfsz	??_GSM_Send+2,f
  8860  1EF9  2EF4               	goto	u4877
  8861  1EFA  0000               	nop
  8862                           
  8863                           ;GSM.h: 81: SendMsg_Inti();
  8864  1EFB  160A  158A  23CE  160A  158A  	fcall	_SendMsg_Inti
  8865                           
  8866                           ;GSM.h: 82: _delay((unsigned long)((1000)*(20000000/4000.0)));
  8867  1F00  301A               	movlw	26
  8868  1F01  1283               	bcf	3,5	;RP0=0, select bank0
  8869  1F02  1303               	bcf	3,6	;RP1=0, select bank0
  8870  1F03  00B7               	movwf	??_GSM_Send+2
  8871  1F04  305E               	movlw	94
  8872  1F05  00B6               	movwf	??_GSM_Send+1
  8873  1F06  3086               	movlw	134
  8874  1F07  00B5               	movwf	??_GSM_Send
  8875  1F08                     u4887:	
  8876  1F08  0BB5               	decfsz	??_GSM_Send,f
  8877  1F09  2F08               	goto	u4887
  8878  1F0A  0BB6               	decfsz	??_GSM_Send+1,f
  8879  1F0B  2F08               	goto	u4887
  8880  1F0C  0BB7               	decfsz	??_GSM_Send+2,f
  8881  1F0D  2F08               	goto	u4887
  8882  1F0E  0000               	nop
  8883                           
  8884                           ;GSM.h: 83: Msg_Setup();
  8885  1F0F  160A  158A  2724  160A  158A  	fcall	_Msg_Setup
  8886                           
  8887                           ;GSM.h: 84: _delay((unsigned long)((1000)*(20000000/4000.0)));
  8888  1F14  301A               	movlw	26
  8889  1F15  1283               	bcf	3,5	;RP0=0, select bank0
  8890  1F16  1303               	bcf	3,6	;RP1=0, select bank0
  8891  1F17  00B7               	movwf	??_GSM_Send+2
  8892  1F18  305E               	movlw	94
  8893  1F19  00B6               	movwf	??_GSM_Send+1
  8894  1F1A  3086               	movlw	134
  8895  1F1B  00B5               	movwf	??_GSM_Send
  8896  1F1C                     u4897:	
  8897  1F1C  0BB5               	decfsz	??_GSM_Send,f
  8898  1F1D  2F1C               	goto	u4897
  8899  1F1E  0BB6               	decfsz	??_GSM_Send+1,f
  8900  1F1F  2F1C               	goto	u4897
  8901  1F20  0BB7               	decfsz	??_GSM_Send+2,f
  8902  1F21  2F1C               	goto	u4897
  8903  1F22  0000               	nop
  8904  1F23  0008               	return
  8905  1F24                     __end_of_GSM_Send:	
  8906                           
  8907                           	psect	text42
  8908  1BCE                     __ptext42:	
  8909 ;; *************** function _SendMsg_Inti *****************
  8910 ;; Defined at:
  8911 ;;		line 16 in file "GSM.h"
  8912 ;; Parameters:    Size  Location     Type
  8913 ;;		None
  8914 ;; Auto vars:     Size  Location     Type
  8915 ;;		None
  8916 ;; Return value:  Size  Location     Type
  8917 ;;		None               void
  8918 ;; Registers used:
  8919 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8920 ;; Tracked objects:
  8921 ;;		On entry : 0/0
  8922 ;;		On exit  : 0/0
  8923 ;;		Unchanged: 0/0
  8924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8925 ;;      Params:         0       0       0       0       0
  8926 ;;      Locals:         0       0       0       0       0
  8927 ;;      Temps:          3       0       0       0       0
  8928 ;;      Totals:         3       0       0       0       0
  8929 ;;Total ram usage:        3 bytes
  8930 ;; Hardware stack levels used:    1
  8931 ;; Hardware stack levels required when called:    2
  8932 ;; This function calls:
  8933 ;;		_SendByteSerially
  8934 ;;		_SendStringSerially
  8935 ;; This function is called by:
  8936 ;;		_GSM_Send
  8937 ;; This function uses a non-reentrant model
  8938 ;;
  8939                           
  8940                           
  8941                           ;psect for function _SendMsg_Inti
  8942  1BCE                     _SendMsg_Inti:	
  8943                           
  8944                           ;GSM.h: 18: SendStringSerially("AT+CMGF=1");
  8945                           
  8946                           ;incstack = 0
  8947                           ; Regs used in _SendMsg_Inti: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8948  1BCE  30B4               	movlw	low (STR_11| (0+32768))
  8949  1BCF  00F1               	movwf	SendStringSerially@st
  8950  1BD0  3089               	movlw	high (STR_11| (0+32768))
  8951  1BD1  00F2               	movwf	SendStringSerially@st+1
  8952  1BD2  160A  158A  246C  160A  158A  	fcall	_SendStringSerially
  8953                           
  8954                           ;GSM.h: 19: SendByteSerially((char)13);
  8955  1BD7  300D               	movlw	13
  8956  1BD8  160A  158A  22E5  160A  158A  	fcall	_SendByteSerially
  8957                           
  8958                           ;GSM.h: 20: _delay((unsigned long)((1000)*(20000000/4000.0)));
  8959  1BDD  301A               	movlw	26
  8960  1BDE  00F5               	movwf	??_SendMsg_Inti+2
  8961  1BDF  305E               	movlw	94
  8962  1BE0  00F4               	movwf	??_SendMsg_Inti+1
  8963  1BE1  3086               	movlw	134
  8964  1BE2  00F3               	movwf	??_SendMsg_Inti
  8965  1BE3                     u4907:	
  8966  1BE3  0BF3               	decfsz	??_SendMsg_Inti,f
  8967  1BE4  2BE3               	goto	u4907
  8968  1BE5  0BF4               	decfsz	??_SendMsg_Inti+1,f
  8969  1BE6  2BE3               	goto	u4907
  8970  1BE7  0BF5               	decfsz	??_SendMsg_Inti+2,f
  8971  1BE8  2BE3               	goto	u4907
  8972  1BE9  0000               	nop
  8973  1BEA  0008               	return
  8974  1BEB                     __end_of_SendMsg_Inti:	
  8975                           
  8976                           	psect	text43
  8977  1F24                     __ptext43:	
  8978 ;; *************** function _Msg_Setup *****************
  8979 ;; Defined at:
  8980 ;;		line 25 in file "GSM.h"
  8981 ;; Parameters:    Size  Location     Type
  8982 ;;		None
  8983 ;; Auto vars:     Size  Location     Type
  8984 ;;		None
  8985 ;; Return value:  Size  Location     Type
  8986 ;;		None               void
  8987 ;; Registers used:
  8988 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8989 ;; Tracked objects:
  8990 ;;		On entry : 0/0
  8991 ;;		On exit  : 0/0
  8992 ;;		Unchanged: 0/0
  8993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8994 ;;      Params:         0       0       0       0       0
  8995 ;;      Locals:         0       0       0       0       0
  8996 ;;      Temps:          0       3       0       0       0
  8997 ;;      Totals:         0       3       0       0       0
  8998 ;;Total ram usage:        3 bytes
  8999 ;; Hardware stack levels used:    1
  9000 ;; Hardware stack levels required when called:    2
  9001 ;; This function calls:
  9002 ;;		_SendByteSerially
  9003 ;;		_SendStringSerially
  9004 ;;		_sprintf
  9005 ;; This function is called by:
  9006 ;;		_GSM_Send
  9007 ;; This function uses a non-reentrant model
  9008 ;;
  9009                           
  9010                           
  9011                           ;psect for function _Msg_Setup
  9012  1F24                     _Msg_Setup:	
  9013                           
  9014                           ;GSM.h: 27: sprintf(txt,"AT+CMGS=\"%s\"\r",number);
  9015                           
  9016                           ;incstack = 0
  9017                           ; Regs used in _Msg_Setup: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9018  1F24  3017               	movlw	low (STR_12| (0+32768))
  9019  1F25  1283               	bcf	3,5	;RP0=0, select bank0
  9020  1F26  1303               	bcf	3,6	;RP1=0, select bank0
  9021  1F27  00A0               	movwf	sprintf@f
  9022  1F28  3089               	movlw	high (STR_12| (0+32768))
  9023  1F29  00A1               	movwf	sprintf@f+1
  9024  1F2A  30AD               	movlw	(low (_number| 0))& (0+255)
  9025  1F2B  00B2               	movwf	??_Msg_Setup
  9026  1F2C  0832               	movf	??_Msg_Setup,w
  9027  1F2D  00A2               	movwf	low ((?_sprintf| 0+2))
  9028  1F2E  3090               	movlw	(low (_txt| (0+256)))& (0+255)
  9029  1F2F  120A  158A  22DC  160A  158A  	fcall	_sprintf
  9030                           
  9031                           ;GSM.h: 28: SendStringSerially(txt);
  9032  1F34  3090               	movlw	(low (_txt| (0+256)))& (0+255)
  9033  1F35  00F1               	movwf	SendStringSerially@st
  9034  1F36  3001               	movlw	1
  9035  1F37  00F2               	movwf	SendStringSerially@st+1
  9036  1F38  160A  158A  246C  160A  158A  	fcall	_SendStringSerially
  9037                           
  9038                           ;GSM.h: 29: _delay((unsigned long)((1000)*(20000000/4000.0)));
  9039  1F3D  301A               	movlw	26
  9040  1F3E  1283               	bcf	3,5	;RP0=0, select bank0
  9041  1F3F  1303               	bcf	3,6	;RP1=0, select bank0
  9042  1F40  00B4               	movwf	??_Msg_Setup+2
  9043  1F41  305E               	movlw	94
  9044  1F42  00B3               	movwf	??_Msg_Setup+1
  9045  1F43  3086               	movlw	134
  9046  1F44  00B2               	movwf	??_Msg_Setup
  9047  1F45                     u4917:	
  9048  1F45  0BB2               	decfsz	??_Msg_Setup,f
  9049  1F46  2F45               	goto	u4917
  9050  1F47  0BB3               	decfsz	??_Msg_Setup+1,f
  9051  1F48  2F45               	goto	u4917
  9052  1F49  0BB4               	decfsz	??_Msg_Setup+2,f
  9053  1F4A  2F45               	goto	u4917
  9054  1F4B  0000               	nop
  9055                           
  9056                           ;GSM.h: 30: SendStringSerially("I'm your safety iron unit. Unexpected situation has occu
      +                          rred. Check it ASAP!");
  9057  1F4C  301C               	movlw	low (STR_13| (0+32768))
  9058  1F4D  00F1               	movwf	SendStringSerially@st
  9059  1F4E  3088               	movlw	high (STR_13| (0+32768))
  9060  1F4F  00F2               	movwf	SendStringSerially@st+1
  9061  1F50  160A  158A  246C  160A  158A  	fcall	_SendStringSerially
  9062                           
  9063                           ;GSM.h: 31: SendByteSerially((char)26);
  9064  1F55  301A               	movlw	26
  9065  1F56  160A  158A  22E5  160A  158A  	fcall	_SendByteSerially
  9066                           
  9067                           ;GSM.h: 32: _delay((unsigned long)((1000)*(20000000/4000.0)));
  9068  1F5B  301A               	movlw	26
  9069  1F5C  1283               	bcf	3,5	;RP0=0, select bank0
  9070  1F5D  1303               	bcf	3,6	;RP1=0, select bank0
  9071  1F5E  00B4               	movwf	??_Msg_Setup+2
  9072  1F5F  305E               	movlw	94
  9073  1F60  00B3               	movwf	??_Msg_Setup+1
  9074  1F61  3086               	movlw	134
  9075  1F62  00B2               	movwf	??_Msg_Setup
  9076  1F63                     u4927:	
  9077  1F63  0BB2               	decfsz	??_Msg_Setup,f
  9078  1F64  2F63               	goto	u4927
  9079  1F65  0BB3               	decfsz	??_Msg_Setup+1,f
  9080  1F66  2F63               	goto	u4927
  9081  1F67  0BB4               	decfsz	??_Msg_Setup+2,f
  9082  1F68  2F63               	goto	u4927
  9083  1F69  0000               	nop
  9084  1F6A  0008               	return
  9085  1F6B                     __end_of_Msg_Setup:	
  9086                           
  9087                           	psect	text44
  9088  1C6C                     __ptext44:	
  9089 ;; *************** function _SendStringSerially *****************
  9090 ;; Defined at:
  9091 ;;		line 71 in file "GSM.h"
  9092 ;; Parameters:    Size  Location     Type
  9093 ;;  st              2    1[COMMON] PTR const unsigned char 
  9094 ;;		 -> STR_13(77), txt(20), STR_11(10), 
  9095 ;; Auto vars:     Size  Location     Type
  9096 ;;		None
  9097 ;; Return value:  Size  Location     Type
  9098 ;;		None               void
  9099 ;; Registers used:
  9100 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9101 ;; Tracked objects:
  9102 ;;		On entry : 0/0
  9103 ;;		On exit  : 0/0
  9104 ;;		Unchanged: 0/0
  9105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9106 ;;      Params:         2       0       0       0       0
  9107 ;;      Locals:         0       0       0       0       0
  9108 ;;      Temps:          0       0       0       0       0
  9109 ;;      Totals:         2       0       0       0       0
  9110 ;;Total ram usage:        2 bytes
  9111 ;; Hardware stack levels used:    1
  9112 ;; Hardware stack levels required when called:    1
  9113 ;; This function calls:
  9114 ;;		_SendByteSerially
  9115 ;; This function is called by:
  9116 ;;		_SendMsg_Inti
  9117 ;;		_Msg_Setup
  9118 ;; This function uses a non-reentrant model
  9119 ;;
  9120                           
  9121                           
  9122                           ;psect for function _SendStringSerially
  9123  1C6C                     _SendStringSerially:	
  9124  1C6C                     l3068:	
  9125                           ;GSM.h: 73: while(*st)
  9126                           
  9127                           ;incstack = 0
  9128                           ; Regs used in _SendStringSerially: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9129                           
  9130  1C6C  0872               	movf	SendStringSerially@st+1,w
  9131  1C6D  1283               	bcf	3,5	;RP0=0, select bank0
  9132  1C6E  1303               	bcf	3,6	;RP1=0, select bank0
  9133  1C6F  00FF               	movwf	127
  9134  1C70  0871               	movf	SendStringSerially@st,w
  9135  1C71  0084               	movwf	4
  9136  1C72  120A  158A  2000  160A  158A  	fcall	stringtab
  9137  1C77  3A00               	xorlw	0
  9138  1C78  1903               	btfsc	3,2
  9139  1C79  0008               	return
  9140                           
  9141                           ;GSM.h: 74: SendByteSerially(*st++);
  9142  1C7A  0872               	movf	SendStringSerially@st+1,w
  9143  1C7B  1283               	bcf	3,5	;RP0=0, select bank0
  9144  1C7C  1303               	bcf	3,6	;RP1=0, select bank0
  9145  1C7D  00FF               	movwf	127
  9146  1C7E  0871               	movf	SendStringSerially@st,w
  9147  1C7F  0084               	movwf	4
  9148  1C80  120A  158A  2000  160A  158A  	fcall	stringtab
  9149  1C85  160A  158A  22E5  160A  158A  	fcall	_SendByteSerially
  9150  1C8A  3001               	movlw	1
  9151  1C8B  07F1               	addwf	SendStringSerially@st,f
  9152  1C8C  1803               	skipnc
  9153  1C8D  0AF2               	incf	SendStringSerially@st+1,f
  9154  1C8E  2C6C               	goto	l3068
  9155  1C8F                     __end_of_SendStringSerially:	
  9156                           
  9157                           	psect	text45
  9158  1AE5                     __ptext45:	
  9159 ;; *************** function _SendByteSerially *****************
  9160 ;; Defined at:
  9161 ;;		line 65 in file "GSM.h"
  9162 ;; Parameters:    Size  Location     Type
  9163 ;;  Byte            1    wreg     unsigned char 
  9164 ;; Auto vars:     Size  Location     Type
  9165 ;;  Byte            1    0[COMMON] unsigned char 
  9166 ;; Return value:  Size  Location     Type
  9167 ;;		None               void
  9168 ;; Registers used:
  9169 ;;		wreg
  9170 ;; Tracked objects:
  9171 ;;		On entry : 0/0
  9172 ;;		On exit  : 0/0
  9173 ;;		Unchanged: 0/0
  9174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9175 ;;      Params:         0       0       0       0       0
  9176 ;;      Locals:         1       0       0       0       0
  9177 ;;      Temps:          0       0       0       0       0
  9178 ;;      Totals:         1       0       0       0       0
  9179 ;;Total ram usage:        1 bytes
  9180 ;; Hardware stack levels used:    1
  9181 ;; This function calls:
  9182 ;;		Nothing
  9183 ;; This function is called by:
  9184 ;;		_SendMsg_Inti
  9185 ;;		_Msg_Setup
  9186 ;;		_SendStringSerially
  9187 ;; This function uses a non-reentrant model
  9188 ;;
  9189                           
  9190                           
  9191                           ;psect for function _SendByteSerially
  9192  1AE5                     _SendByteSerially:	
  9193                           
  9194                           ;incstack = 0
  9195                           ; Regs used in _SendByteSerially: [wreg]
  9196                           ;SendByteSerially@Byte stored from wreg
  9197  1AE5  00F0               	movwf	SendByteSerially@Byte
  9198  1AE6                     l370:	
  9199                           ;GSM.h: 67: while(!TXIF);
  9200                           
  9201  1AE6  1283               	bcf	3,5	;RP0=0, select bank0
  9202  1AE7  1303               	bcf	3,6	;RP1=0, select bank0
  9203  1AE8  1E0C               	btfss	12,4	;volatile
  9204  1AE9  2AE6               	goto	l370
  9205                           
  9206                           ;GSM.h: 68: TXREG = Byte;
  9207  1AEA  0870               	movf	SendByteSerially@Byte,w
  9208  1AEB  0099               	movwf	25	;volatile
  9209  1AEC  0008               	return
  9210  1AED                     __end_of_SendByteSerially:	
  9211                           
  9212                           	psect	text46
  9213  1D21                     __ptext46:	
  9214 ;; *************** function _InitUART *****************
  9215 ;; Defined at:
  9216 ;;		line 35 in file "GSM.h"
  9217 ;; Parameters:    Size  Location     Type
  9218 ;;  BAUDRATE        2    6[BANK0 ] int 
  9219 ;; Auto vars:     Size  Location     Type
  9220 ;;		None
  9221 ;; Return value:  Size  Location     Type
  9222 ;;		None               void
  9223 ;; Registers used:
  9224 ;;		wreg, status,2, status,0, pclath, cstack
  9225 ;; Tracked objects:
  9226 ;;		On entry : 0/0
  9227 ;;		On exit  : 0/0
  9228 ;;		Unchanged: 0/0
  9229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9230 ;;      Params:         0       2       0       0       0
  9231 ;;      Locals:         0       0       0       0       0
  9232 ;;      Temps:          0       0       0       0       0
  9233 ;;      Totals:         0       2       0       0       0
  9234 ;;Total ram usage:        2 bytes
  9235 ;; Hardware stack levels used:    1
  9236 ;; Hardware stack levels required when called:    1
  9237 ;; This function calls:
  9238 ;;		___aldiv
  9239 ;; This function is called by:
  9240 ;;		_GSM_Send
  9241 ;; This function uses a non-reentrant model
  9242 ;;
  9243                           
  9244                           
  9245                           ;psect for function _InitUART
  9246  1D21                     _InitUART:	
  9247                           
  9248                           ;GSM.h: 37: TRISC6 = 0;
  9249                           
  9250                           ;incstack = 0
  9251                           ; Regs used in _InitUART: [wreg+status,2+status,0+pclath+cstack]
  9252  1D21  1683               	bsf	3,5	;RP0=1, select bank1
  9253  1D22  1303               	bcf	3,6	;RP1=0, select bank1
  9254  1D23  1307               	bcf	7,6	;volatile
  9255                           
  9256                           ;GSM.h: 38: TRISC7 = 1;
  9257  1D24  1787               	bsf	7,7	;volatile
  9258                           
  9259                           ;GSM.h: 40: SPBRG = ((20000000/16)/BAUDRATE) - 1;
  9260  1D25  1283               	bcf	3,5	;RP0=0, select bank0
  9261  1D26  1303               	bcf	3,6	;RP1=0, select bank0
  9262  1D27  0826               	movf	InitUART@BAUDRATE,w
  9263  1D28  00F0               	movwf	___aldiv@divisor
  9264  1D29  0827               	movf	InitUART@BAUDRATE+1,w
  9265  1D2A  00F1               	movwf	___aldiv@divisor+1
  9266  1D2B  3000               	movlw	0
  9267  1D2C  1BF1               	btfsc	___aldiv@divisor+1,7
  9268  1D2D  30FF               	movlw	255
  9269  1D2E  00F2               	movwf	___aldiv@divisor+2
  9270  1D2F  00F3               	movwf	___aldiv@divisor+3
  9271  1D30  3000               	movlw	0
  9272  1D31  00F7               	movwf	___aldiv@dividend+3
  9273  1D32  3013               	movlw	19
  9274  1D33  00F6               	movwf	___aldiv@dividend+2
  9275  1D34  3012               	movlw	18
  9276  1D35  00F5               	movwf	___aldiv@dividend+1
  9277  1D36  30D0               	movlw	208
  9278  1D37  00F4               	movwf	___aldiv@dividend
  9279  1D38  160A  118A  237F   	fcall	___aldiv
  9280  1D3B  0870               	movf	?___aldiv,w
  9281  1D3C  3EFF               	addlw	255
  9282  1D3D  1683               	bsf	3,5	;RP0=1, select bank1
  9283  1D3E  1303               	bcf	3,6	;RP1=0, select bank1
  9284  1D3F  0099               	movwf	25	;volatile
  9285                           
  9286                           ;GSM.h: 41: BRGH = 1;
  9287  1D40  1518               	bsf	24,2	;volatile
  9288                           
  9289                           ;GSM.h: 42: SYNC = 0;
  9290  1D41  1218               	bcf	24,4	;volatile
  9291                           
  9292                           ;GSM.h: 43: SPEN = 1;
  9293  1D42  1283               	bcf	3,5	;RP0=0, select bank0
  9294  1D43  1303               	bcf	3,6	;RP1=0, select bank0
  9295  1D44  1798               	bsf	24,7	;volatile
  9296                           
  9297                           ;GSM.h: 44: CREN = 1;
  9298  1D45  1618               	bsf	24,4	;volatile
  9299                           
  9300                           ;GSM.h: 45: SREN = 0;
  9301  1D46  1298               	bcf	24,5	;volatile
  9302                           
  9303                           ;GSM.h: 46: TXIE = 0;
  9304  1D47  1683               	bsf	3,5	;RP0=1, select bank1
  9305  1D48  1303               	bcf	3,6	;RP1=0, select bank1
  9306  1D49  120C               	bcf	12,4	;volatile
  9307                           
  9308                           ;GSM.h: 47: RCIE = 1;
  9309  1D4A  168C               	bsf	12,5	;volatile
  9310                           
  9311                           ;GSM.h: 48: TX9 = 0;
  9312  1D4B  1318               	bcf	24,6	;volatile
  9313                           
  9314                           ;GSM.h: 49: RX9 = 0;
  9315  1D4C  1283               	bcf	3,5	;RP0=0, select bank0
  9316  1D4D  1303               	bcf	3,6	;RP1=0, select bank0
  9317  1D4E  1318               	bcf	24,6	;volatile
  9318                           
  9319                           ;GSM.h: 50: TXEN = 0;
  9320  1D4F  1683               	bsf	3,5	;RP0=1, select bank1
  9321  1D50  1303               	bcf	3,6	;RP1=0, select bank1
  9322  1D51  1298               	bcf	24,5	;volatile
  9323                           
  9324                           ;GSM.h: 51: TXEN = 1;
  9325  1D52  1698               	bsf	24,5	;volatile
  9326  1D53  0008               	return
  9327  1D54                     __end_of_InitUART:	
  9328                           
  9329                           	psect	text47
  9330  137F                     __ptext47:	
  9331 ;; *************** function ___aldiv *****************
  9332 ;; Defined at:
  9333 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\aldiv.c"
  9334 ;; Parameters:    Size  Location     Type
  9335 ;;  divisor         4    0[COMMON] long 
  9336 ;;  dividend        4    4[COMMON] long 
  9337 ;; Auto vars:     Size  Location     Type
  9338 ;;  quotient        4    2[BANK0 ] long 
  9339 ;;  sign            1    1[BANK0 ] unsigned char 
  9340 ;;  counter         1    0[BANK0 ] unsigned char 
  9341 ;; Return value:  Size  Location     Type
  9342 ;;                  4    0[COMMON] long 
  9343 ;; Registers used:
  9344 ;;		wreg, status,2, status,0
  9345 ;; Tracked objects:
  9346 ;;		On entry : 0/0
  9347 ;;		On exit  : 0/0
  9348 ;;		Unchanged: 0/0
  9349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9350 ;;      Params:         8       0       0       0       0
  9351 ;;      Locals:         0       6       0       0       0
  9352 ;;      Temps:          1       0       0       0       0
  9353 ;;      Totals:         9       6       0       0       0
  9354 ;;Total ram usage:       15 bytes
  9355 ;; Hardware stack levels used:    1
  9356 ;; This function calls:
  9357 ;;		Nothing
  9358 ;; This function is called by:
  9359 ;;		_InitUART
  9360 ;; This function uses a non-reentrant model
  9361 ;;
  9362                           
  9363                           
  9364                           ;psect for function ___aldiv
  9365  137F                     ___aldiv:	
  9366                           
  9367                           ;incstack = 0
  9368                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9369  137F  1283               	bcf	3,5	;RP0=0, select bank0
  9370  1380  1303               	bcf	3,6	;RP1=0, select bank0
  9371  1381  01A1               	clrf	___aldiv@sign
  9372  1382  1FF3               	btfss	___aldiv@divisor+3,7
  9373  1383  2B91               	goto	l849
  9374  1384  09F0               	comf	___aldiv@divisor,f
  9375  1385  09F1               	comf	___aldiv@divisor+1,f
  9376  1386  09F2               	comf	___aldiv@divisor+2,f
  9377  1387  09F3               	comf	___aldiv@divisor+3,f
  9378  1388  0AF0               	incf	___aldiv@divisor,f
  9379  1389  1903               	skipnz
  9380  138A  0AF1               	incf	___aldiv@divisor+1,f
  9381  138B  1903               	skipnz
  9382  138C  0AF2               	incf	___aldiv@divisor+2,f
  9383  138D  1903               	skipnz
  9384  138E  0AF3               	incf	___aldiv@divisor+3,f
  9385  138F  01A1               	clrf	___aldiv@sign
  9386  1390  0AA1               	incf	___aldiv@sign,f
  9387  1391                     l849:	
  9388  1391  1FF7               	btfss	___aldiv@dividend+3,7
  9389  1392  2BA2               	goto	l3244
  9390  1393  09F4               	comf	___aldiv@dividend,f
  9391  1394  09F5               	comf	___aldiv@dividend+1,f
  9392  1395  09F6               	comf	___aldiv@dividend+2,f
  9393  1396  09F7               	comf	___aldiv@dividend+3,f
  9394  1397  0AF4               	incf	___aldiv@dividend,f
  9395  1398  1903               	skipnz
  9396  1399  0AF5               	incf	___aldiv@dividend+1,f
  9397  139A  1903               	skipnz
  9398  139B  0AF6               	incf	___aldiv@dividend+2,f
  9399  139C  1903               	skipnz
  9400  139D  0AF7               	incf	___aldiv@dividend+3,f
  9401  139E  3001               	movlw	1
  9402  139F  00F8               	movwf	??___aldiv
  9403  13A0  0878               	movf	??___aldiv,w
  9404  13A1  06A1               	xorwf	___aldiv@sign,f
  9405  13A2                     l3244:	
  9406  13A2  3000               	movlw	0
  9407  13A3  00A5               	movwf	___aldiv@quotient+3
  9408  13A4  3000               	movlw	0
  9409  13A5  00A4               	movwf	___aldiv@quotient+2
  9410  13A6  3000               	movlw	0
  9411  13A7  00A3               	movwf	___aldiv@quotient+1
  9412  13A8  3000               	movlw	0
  9413  13A9  00A2               	movwf	___aldiv@quotient
  9414  13AA  0873               	movf	___aldiv@divisor+3,w
  9415  13AB  0472               	iorwf	___aldiv@divisor+2,w
  9416  13AC  0471               	iorwf	___aldiv@divisor+1,w
  9417  13AD  0470               	iorwf	___aldiv@divisor,w
  9418  13AE  1903               	skipnz
  9419  13AF  2BF7               	goto	l3266
  9420  13B0  01A0               	clrf	___aldiv@counter
  9421  13B1  0AA0               	incf	___aldiv@counter,f
  9422  13B2                     l3252:	
  9423  13B2  1BF3               	btfsc	___aldiv@divisor+3,7
  9424  13B3  2BC2               	goto	l3254
  9425  13B4  3001               	movlw	1
  9426  13B5  00F8               	movwf	??___aldiv
  9427  13B6                     u3145:	
  9428  13B6  1003               	clrc
  9429  13B7  0DF0               	rlf	___aldiv@divisor,f
  9430  13B8  0DF1               	rlf	___aldiv@divisor+1,f
  9431  13B9  0DF2               	rlf	___aldiv@divisor+2,f
  9432  13BA  0DF3               	rlf	___aldiv@divisor+3,f
  9433  13BB  0BF8               	decfsz	??___aldiv,f
  9434  13BC  2BB6               	goto	u3145
  9435  13BD  3001               	movlw	1
  9436  13BE  00F8               	movwf	??___aldiv
  9437  13BF  0878               	movf	??___aldiv,w
  9438  13C0  07A0               	addwf	___aldiv@counter,f
  9439  13C1  2BB2               	goto	l3252
  9440  13C2                     l3254:	
  9441  13C2  3001               	movlw	1
  9442  13C3  00F8               	movwf	??___aldiv
  9443  13C4                     u3165:	
  9444  13C4  1003               	clrc
  9445  13C5  0DA2               	rlf	___aldiv@quotient,f
  9446  13C6  0DA3               	rlf	___aldiv@quotient+1,f
  9447  13C7  0DA4               	rlf	___aldiv@quotient+2,f
  9448  13C8  0DA5               	rlf	___aldiv@quotient+3,f
  9449  13C9  0BF8               	decfsz	??___aldiv,f
  9450  13CA  2BC4               	goto	u3165
  9451  13CB  0873               	movf	___aldiv@divisor+3,w
  9452  13CC  0277               	subwf	___aldiv@dividend+3,w
  9453  13CD  1D03               	skipz
  9454  13CE  2BD9               	goto	u3175
  9455  13CF  0872               	movf	___aldiv@divisor+2,w
  9456  13D0  0276               	subwf	___aldiv@dividend+2,w
  9457  13D1  1D03               	skipz
  9458  13D2  2BD9               	goto	u3175
  9459  13D3  0871               	movf	___aldiv@divisor+1,w
  9460  13D4  0275               	subwf	___aldiv@dividend+1,w
  9461  13D5  1D03               	skipz
  9462  13D6  2BD9               	goto	u3175
  9463  13D7  0870               	movf	___aldiv@divisor,w
  9464  13D8  0274               	subwf	___aldiv@dividend,w
  9465  13D9                     u3175:	
  9466  13D9  1C03               	skipc
  9467  13DA  2BEA               	goto	l3262
  9468  13DB  0870               	movf	___aldiv@divisor,w
  9469  13DC  02F4               	subwf	___aldiv@dividend,f
  9470  13DD  0871               	movf	___aldiv@divisor+1,w
  9471  13DE  1C03               	skipc
  9472  13DF  0F71               	incfsz	___aldiv@divisor+1,w
  9473  13E0  02F5               	subwf	___aldiv@dividend+1,f
  9474  13E1  0872               	movf	___aldiv@divisor+2,w
  9475  13E2  1C03               	skipc
  9476  13E3  0F72               	incfsz	___aldiv@divisor+2,w
  9477  13E4  02F6               	subwf	___aldiv@dividend+2,f
  9478  13E5  0873               	movf	___aldiv@divisor+3,w
  9479  13E6  1C03               	skipc
  9480  13E7  0F73               	incfsz	___aldiv@divisor+3,w
  9481  13E8  02F7               	subwf	___aldiv@dividend+3,f
  9482  13E9  1422               	bsf	___aldiv@quotient,0
  9483  13EA                     l3262:	
  9484  13EA  3001               	movlw	1
  9485  13EB                     u3185:	
  9486  13EB  1003               	clrc
  9487  13EC  0CF3               	rrf	___aldiv@divisor+3,f
  9488  13ED  0CF2               	rrf	___aldiv@divisor+2,f
  9489  13EE  0CF1               	rrf	___aldiv@divisor+1,f
  9490  13EF  0CF0               	rrf	___aldiv@divisor,f
  9491  13F0  3EFF               	addlw	-1
  9492  13F1  1D03               	skipz
  9493  13F2  2BEB               	goto	u3185
  9494  13F3  3001               	movlw	1
  9495  13F4  02A0               	subwf	___aldiv@counter,f
  9496  13F5  1D03               	btfss	3,2
  9497  13F6  2BC2               	goto	l3254
  9498  13F7                     l3266:	
  9499  13F7  0821               	movf	___aldiv@sign,w
  9500  13F8  1903               	btfsc	3,2
  9501  13F9  2C05               	goto	l3270
  9502  13FA  09A2               	comf	___aldiv@quotient,f
  9503  13FB  09A3               	comf	___aldiv@quotient+1,f
  9504  13FC  09A4               	comf	___aldiv@quotient+2,f
  9505  13FD  09A5               	comf	___aldiv@quotient+3,f
  9506  13FE  0AA2               	incf	___aldiv@quotient,f
  9507  13FF  1903               	skipnz
  9508  1400  0AA3               	incf	___aldiv@quotient+1,f
  9509  1401  1903               	skipnz
  9510  1402  0AA4               	incf	___aldiv@quotient+2,f
  9511  1403  1903               	skipnz
  9512  1404  0AA5               	incf	___aldiv@quotient+3,f
  9513  1405                     l3270:	
  9514  1405  0825               	movf	___aldiv@quotient+3,w
  9515  1406  00F3               	movwf	?___aldiv+3
  9516  1407  0824               	movf	___aldiv@quotient+2,w
  9517  1408  00F2               	movwf	?___aldiv+2
  9518  1409  0823               	movf	___aldiv@quotient+1,w
  9519  140A  00F1               	movwf	?___aldiv+1
  9520  140B  0822               	movf	___aldiv@quotient,w
  9521  140C  00F0               	movwf	?___aldiv
  9522  140D  0008               	return
  9523  140E                     __end_of___aldiv:	
  9524                           
  9525                           	psect	text48
  9526  0D45                     __ptext48:	
  9527 ;; *************** function _CLeakage *****************
  9528 ;; Defined at:
  9529 ;;		line 269 in file "RTC_F.c"
  9530 ;; Parameters:    Size  Location     Type
  9531 ;;		None
  9532 ;; Auto vars:     Size  Location     Type
  9533 ;;  power           3   30[BANK0 ] float 
  9534 ;;  voltage         3   22[BANK0 ] float 
  9535 ;;  c               2   37[BANK0 ] unsigned int 
  9536 ;;  a               2   35[BANK0 ] unsigned int 
  9537 ;;  current_bits    2   33[BANK0 ] unsigned int 
  9538 ;;  b               2   28[BANK0 ] unsigned int 
  9539 ;;  dif             2    0        unsigned int 
  9540 ;; Return value:  Size  Location     Type
  9541 ;;                  3  497[None  ] float 
  9542 ;; Registers used:
  9543 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9544 ;; Tracked objects:
  9545 ;;		On entry : 0/0
  9546 ;;		On exit  : 0/0
  9547 ;;		Unchanged: 0/0
  9548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9549 ;;      Params:         0       0       0       0       0
  9550 ;;      Locals:         0      17       0       0       0
  9551 ;;      Temps:          0       4       0       0       0
  9552 ;;      Totals:         0      21       0       0       0
  9553 ;;Total ram usage:       21 bytes
  9554 ;; Hardware stack levels used:    1
  9555 ;; Hardware stack levels required when called:    3
  9556 ;; This function calls:
  9557 ;;		_ADC_Init
  9558 ;;		_ADC_Read
  9559 ;;		_Lcd_Set_Cursor
  9560 ;;		_Lcd_Write_String
  9561 ;;		___ftmul
  9562 ;;		___fttol
  9563 ;;		___lwtoft
  9564 ;;		_sprintf
  9565 ;; This function is called by:
  9566 ;;		_main
  9567 ;; This function uses a non-reentrant model
  9568 ;;
  9569                           
  9570                           
  9571                           ;psect for function _CLeakage
  9572  0D45                     _CLeakage:	
  9573                           
  9574                           ;RTC_F.c: 272: ADC_Init();
  9575                           
  9576                           ;incstack = 0
  9577                           ; Regs used in _CLeakage: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9578  0D45  160A  158A  230D  120A  158A  	fcall	_ADC_Init
  9579                           
  9580                           ;RTC_F.c: 273: a = ADC_Read(0);
  9581  0D4A  3000               	movlw	0
  9582  0D4B  160A  158A  248F  120A  158A  	fcall	_ADC_Read
  9583  0D50  0871               	movf	?_ADC_Read+1,w
  9584  0D51  1283               	bcf	3,5	;RP0=0, select bank0
  9585  0D52  1303               	bcf	3,6	;RP1=0, select bank0
  9586  0D53  00C4               	movwf	CLeakage@a+1
  9587  0D54  0870               	movf	?_ADC_Read,w
  9588  0D55  00C3               	movwf	CLeakage@a
  9589                           
  9590                           ;RTC_F.c: 274: ADC_Init();
  9591  0D56  160A  158A  230D  120A  158A  	fcall	_ADC_Init
  9592                           
  9593                           ;RTC_F.c: 275: b = ADC_Read(1);
  9594  0D5B  3001               	movlw	1
  9595  0D5C  160A  158A  248F  120A  158A  	fcall	_ADC_Read
  9596  0D61  0871               	movf	?_ADC_Read+1,w
  9597  0D62  1283               	bcf	3,5	;RP0=0, select bank0
  9598  0D63  1303               	bcf	3,6	;RP1=0, select bank0
  9599  0D64  00BD               	movwf	CLeakage@b+1
  9600  0D65  0870               	movf	?_ADC_Read,w
  9601  0D66  00BC               	movwf	CLeakage@b
  9602                           
  9603                           ;RTC_F.c: 276: ADC_Init();
  9604  0D67  160A  158A  230D  120A  158A  	fcall	_ADC_Init
  9605                           
  9606                           ;RTC_F.c: 277: c = ADC_Read(2);
  9607  0D6C  3002               	movlw	2
  9608  0D6D  160A  158A  248F  120A  158A  	fcall	_ADC_Read
  9609  0D72  0871               	movf	?_ADC_Read+1,w
  9610  0D73  1283               	bcf	3,5	;RP0=0, select bank0
  9611  0D74  1303               	bcf	3,6	;RP1=0, select bank0
  9612  0D75  00C6               	movwf	CLeakage@c+1
  9613  0D76  0870               	movf	?_ADC_Read,w
  9614  0D77  00C5               	movwf	CLeakage@c
  9615                           
  9616                           ;RTC_F.c: 281: if(a>(c/2))
  9617  0D78  0846               	movf	CLeakage@c+1,w
  9618  0D79  00B3               	movwf	??_CLeakage+1
  9619  0D7A  0845               	movf	CLeakage@c,w
  9620  0D7B  00B2               	movwf	??_CLeakage
  9621  0D7C  1003               	clrc
  9622  0D7D  0CB3               	rrf	??_CLeakage+1,f
  9623  0D7E  0CB2               	rrf	??_CLeakage,f
  9624  0D7F  0844               	movf	CLeakage@a+1,w
  9625  0D80  0233               	subwf	??_CLeakage+1,w
  9626  0D81  1D03               	skipz
  9627  0D82  2D85               	goto	u4295
  9628  0D83  0843               	movf	CLeakage@a,w
  9629  0D84  0232               	subwf	??_CLeakage,w
  9630  0D85                     u4295:	
  9631  0D85  1803               	skipnc
  9632  0D86  2D9B               	goto	l4212
  9633                           
  9634                           ;RTC_F.c: 282: current_bits=a-(c/2);
  9635  0D87  0846               	movf	CLeakage@c+1,w
  9636  0D88  00B3               	movwf	??_CLeakage+1
  9637  0D89  0845               	movf	CLeakage@c,w
  9638  0D8A  00B2               	movwf	??_CLeakage
  9639  0D8B  1003               	clrc
  9640  0D8C  0CB3               	rrf	??_CLeakage+1,f
  9641  0D8D  0CB2               	rrf	??_CLeakage,f
  9642  0D8E  09B2               	comf	??_CLeakage,f
  9643  0D8F  09B3               	comf	??_CLeakage+1,f
  9644  0D90  0AB2               	incf	??_CLeakage,f
  9645  0D91  1903               	skipnz
  9646  0D92  0AB3               	incf	??_CLeakage+1,f
  9647  0D93  0843               	movf	CLeakage@a,w
  9648  0D94  0732               	addwf	??_CLeakage,w
  9649  0D95  00C1               	movwf	CLeakage@current_bits
  9650  0D96  0844               	movf	CLeakage@a+1,w
  9651  0D97  1803               	skipnc
  9652  0D98  0A44               	incf	CLeakage@a+1,w
  9653  0D99  0733               	addwf	??_CLeakage+1,w
  9654  0D9A  2DB0               	goto	L11
  9655  0D9B                     l4212:	
  9656                           
  9657                           ;RTC_F.c: 283: else
  9658                           ;RTC_F.c: 284: current_bits=(c/2)-a;
  9659  0D9B  0943               	comf	CLeakage@a,w
  9660  0D9C  00B2               	movwf	??_CLeakage
  9661  0D9D  0944               	comf	CLeakage@a+1,w
  9662  0D9E  00B3               	movwf	??_CLeakage+1
  9663  0D9F  0AB2               	incf	??_CLeakage,f
  9664  0DA0  1903               	skipnz
  9665  0DA1  0AB3               	incf	??_CLeakage+1,f
  9666  0DA2  0846               	movf	CLeakage@c+1,w
  9667  0DA3  00B5               	movwf	??_CLeakage+3
  9668  0DA4  0845               	movf	CLeakage@c,w
  9669  0DA5  00B4               	movwf	??_CLeakage+2
  9670  0DA6  1003               	clrc
  9671  0DA7  0CB5               	rrf	??_CLeakage+3,f
  9672  0DA8  0CB4               	rrf	??_CLeakage+2,f
  9673  0DA9  0832               	movf	??_CLeakage,w
  9674  0DAA  0734               	addwf	??_CLeakage+2,w
  9675  0DAB  00C1               	movwf	CLeakage@current_bits
  9676  0DAC  0833               	movf	??_CLeakage+1,w
  9677  0DAD  1803               	skipnc
  9678  0DAE  0A33               	incf	??_CLeakage+1,w
  9679  0DAF  0735               	addwf	??_CLeakage+3,w
  9680  0DB0                     L11:	
  9681  0DB0  00C2               	movwf	CLeakage@current_bits+1
  9682                           
  9683                           ;RTC_F.c: 285: float power;
  9684                           ;RTC_F.c: 286: if(current_bits>=5)
  9685  0DB1  3000               	movlw	0
  9686  0DB2  0242               	subwf	CLeakage@current_bits+1,w
  9687  0DB3  3005               	movlw	5
  9688  0DB4  1903               	skipnz
  9689  0DB5  0241               	subwf	CLeakage@current_bits,w
  9690  0DB6  1C03               	skipc
  9691  0DB7  2DE6               	goto	l4218
  9692                           
  9693                           ;RTC_F.c: 287: current=(current_bits*0.0488);
  9694  0DB8  30E3               	movlw	227
  9695  0DB9  00A0               	movwf	___ftmul@f1
  9696  0DBA  3047               	movlw	71
  9697  0DBB  00A1               	movwf	___ftmul@f1+1
  9698  0DBC  303D               	movlw	61
  9699  0DBD  00A2               	movwf	___ftmul@f1+2
  9700  0DBE  0842               	movf	CLeakage@current_bits+1,w
  9701  0DBF  00F9               	movwf	___lwtoft@c+1
  9702  0DC0  0841               	movf	CLeakage@current_bits,w
  9703  0DC1  00F8               	movwf	___lwtoft@c
  9704  0DC2  160A  158A  2386  120A  158A  	fcall	___lwtoft
  9705  0DC7  0878               	movf	?___lwtoft,w
  9706  0DC8  1283               	bcf	3,5	;RP0=0, select bank0
  9707  0DC9  1303               	bcf	3,6	;RP1=0, select bank0
  9708  0DCA  00A3               	movwf	___ftmul@f2
  9709  0DCB  0879               	movf	?___lwtoft+1,w
  9710  0DCC  00A4               	movwf	___ftmul@f2+1
  9711  0DCD  087A               	movf	?___lwtoft+2,w
  9712  0DCE  00A5               	movwf	___ftmul@f2+2
  9713  0DCF  120A  158A  2209  120A  158A  	fcall	___ftmul
  9714  0DD4  1283               	bcf	3,5	;RP0=0, select bank0
  9715  0DD5  1303               	bcf	3,6	;RP1=0, select bank0
  9716  0DD6  0820               	movf	?___ftmul,w
  9717  0DD7  1683               	bsf	3,5	;RP0=1, select bank1
  9718  0DD8  1303               	bcf	3,6	;RP1=0, select bank1
  9719  0DD9  00A0               	movwf	_current^(0+128)
  9720  0DDA  1283               	bcf	3,5	;RP0=0, select bank0
  9721  0DDB  1303               	bcf	3,6	;RP1=0, select bank0
  9722  0DDC  0821               	movf	?___ftmul+1,w
  9723  0DDD  1683               	bsf	3,5	;RP0=1, select bank1
  9724  0DDE  1303               	bcf	3,6	;RP1=0, select bank1
  9725  0DDF  00A1               	movwf	(_current+1)^(0+128)
  9726  0DE0  1283               	bcf	3,5	;RP0=0, select bank0
  9727  0DE1  1303               	bcf	3,6	;RP1=0, select bank0
  9728  0DE2  0822               	movf	?___ftmul+2,w
  9729  0DE3  1683               	bsf	3,5	;RP0=1, select bank1
  9730  0DE4  1303               	bcf	3,6	;RP1=0, select bank1
  9731  0DE5  2DED               	goto	L12
  9732  0DE6                     l4218:	
  9733                           
  9734                           ;RTC_F.c: 288: else
  9735                           ;RTC_F.c: 289: current=0;
  9736  0DE6  3000               	movlw	0
  9737  0DE7  1683               	bsf	3,5	;RP0=1, select bank1
  9738  0DE8  1303               	bcf	3,6	;RP1=0, select bank1
  9739  0DE9  00A0               	movwf	_current^(0+128)
  9740  0DEA  3000               	movlw	0
  9741  0DEB  00A1               	movwf	(_current+1)^(0+128)
  9742  0DEC  3000               	movlw	0
  9743  0DED                     L12:	
  9744  0DED  00A2               	movwf	(_current+2)^(0+128)
  9745                           
  9746                           ;RTC_F.c: 290: float voltage=(230.0/330.0)*b;
  9747  0DEE  306D               	movlw	109
  9748  0DEF  1283               	bcf	3,5	;RP0=0, select bank0
  9749  0DF0  1303               	bcf	3,6	;RP1=0, select bank0
  9750  0DF1  00A0               	movwf	___ftmul@f1
  9751  0DF2  3032               	movlw	50
  9752  0DF3  00A1               	movwf	___ftmul@f1+1
  9753  0DF4  303F               	movlw	63
  9754  0DF5  00A2               	movwf	___ftmul@f1+2
  9755  0DF6  083D               	movf	CLeakage@b+1,w
  9756  0DF7  00F9               	movwf	___lwtoft@c+1
  9757  0DF8  083C               	movf	CLeakage@b,w
  9758  0DF9  00F8               	movwf	___lwtoft@c
  9759  0DFA  160A  158A  2386  120A  158A  	fcall	___lwtoft
  9760  0DFF  0878               	movf	?___lwtoft,w
  9761  0E00  1283               	bcf	3,5	;RP0=0, select bank0
  9762  0E01  1303               	bcf	3,6	;RP1=0, select bank0
  9763  0E02  00A3               	movwf	___ftmul@f2
  9764  0E03  0879               	movf	?___lwtoft+1,w
  9765  0E04  00A4               	movwf	___ftmul@f2+1
  9766  0E05  087A               	movf	?___lwtoft+2,w
  9767  0E06  00A5               	movwf	___ftmul@f2+2
  9768  0E07  120A  158A  2209  120A  158A  	fcall	___ftmul
  9769  0E0C  1283               	bcf	3,5	;RP0=0, select bank0
  9770  0E0D  1303               	bcf	3,6	;RP1=0, select bank0
  9771  0E0E  0820               	movf	?___ftmul,w
  9772  0E0F  00B6               	movwf	CLeakage@voltage
  9773  0E10  0821               	movf	?___ftmul+1,w
  9774  0E11  00B7               	movwf	CLeakage@voltage+1
  9775  0E12  0822               	movf	?___ftmul+2,w
  9776  0E13  00B8               	movwf	CLeakage@voltage+2
  9777                           
  9778                           ;RTC_F.c: 291: power=current*voltage*0.8;
  9779  0E14  0836               	movf	CLeakage@voltage,w
  9780  0E15  00A0               	movwf	___ftmul@f1
  9781  0E16  0837               	movf	CLeakage@voltage+1,w
  9782  0E17  00A1               	movwf	___ftmul@f1+1
  9783  0E18  0838               	movf	CLeakage@voltage+2,w
  9784  0E19  00A2               	movwf	___ftmul@f1+2
  9785  0E1A  1683               	bsf	3,5	;RP0=1, select bank1
  9786  0E1B  1303               	bcf	3,6	;RP1=0, select bank1
  9787  0E1C  0820               	movf	_current^(0+128),w
  9788  0E1D  1283               	bcf	3,5	;RP0=0, select bank0
  9789  0E1E  1303               	bcf	3,6	;RP1=0, select bank0
  9790  0E1F  00A3               	movwf	___ftmul@f2
  9791  0E20  1683               	bsf	3,5	;RP0=1, select bank1
  9792  0E21  1303               	bcf	3,6	;RP1=0, select bank1
  9793  0E22  0821               	movf	(_current+1)^(0+128),w
  9794  0E23  1283               	bcf	3,5	;RP0=0, select bank0
  9795  0E24  1303               	bcf	3,6	;RP1=0, select bank0
  9796  0E25  00A4               	movwf	___ftmul@f2+1
  9797  0E26  1683               	bsf	3,5	;RP0=1, select bank1
  9798  0E27  1303               	bcf	3,6	;RP1=0, select bank1
  9799  0E28  0822               	movf	(_current+2)^(0+128),w
  9800  0E29  1283               	bcf	3,5	;RP0=0, select bank0
  9801  0E2A  1303               	bcf	3,6	;RP1=0, select bank0
  9802  0E2B  00A5               	movwf	___ftmul@f2+2
  9803  0E2C  120A  158A  2209  120A  158A  	fcall	___ftmul
  9804  0E31  1283               	bcf	3,5	;RP0=0, select bank0
  9805  0E32  1303               	bcf	3,6	;RP1=0, select bank0
  9806  0E33  0820               	movf	?___ftmul,w
  9807  0E34  00B9               	movwf	_CLeakage$926
  9808  0E35  0821               	movf	?___ftmul+1,w
  9809  0E36  00BA               	movwf	_CLeakage$926+1
  9810  0E37  0822               	movf	?___ftmul+2,w
  9811  0E38  00BB               	movwf	_CLeakage$926+2
  9812                           
  9813                           ;RTC_F.c: 291: power=current*voltage*0.8;
  9814  0E39  30CD               	movlw	205
  9815  0E3A  00A0               	movwf	___ftmul@f1
  9816  0E3B  304C               	movlw	76
  9817  0E3C  00A1               	movwf	___ftmul@f1+1
  9818  0E3D  303F               	movlw	63
  9819  0E3E  00A2               	movwf	___ftmul@f1+2
  9820  0E3F  0839               	movf	_CLeakage$926,w
  9821  0E40  00A3               	movwf	___ftmul@f2
  9822  0E41  083A               	movf	_CLeakage$926+1,w
  9823  0E42  00A4               	movwf	___ftmul@f2+1
  9824  0E43  083B               	movf	_CLeakage$926+2,w
  9825  0E44  00A5               	movwf	___ftmul@f2+2
  9826  0E45  120A  158A  2209  120A  158A  	fcall	___ftmul
  9827  0E4A  1283               	bcf	3,5	;RP0=0, select bank0
  9828  0E4B  1303               	bcf	3,6	;RP1=0, select bank0
  9829  0E4C  0820               	movf	?___ftmul,w
  9830  0E4D  00BE               	movwf	CLeakage@power
  9831  0E4E  0821               	movf	?___ftmul+1,w
  9832  0E4F  00BF               	movwf	CLeakage@power+1
  9833  0E50  0822               	movf	?___ftmul+2,w
  9834  0E51  00C0               	movwf	CLeakage@power+2
  9835                           
  9836                           ;RTC_F.c: 292: sprintf(text,"    %d W",(int)power);
  9837  0E52  30C7               	movlw	low (STR_46| (0+32768))
  9838  0E53  00A0               	movwf	sprintf@f
  9839  0E54  3089               	movlw	high (STR_46| (0+32768))
  9840  0E55  00A1               	movwf	sprintf@f+1
  9841  0E56  083E               	movf	CLeakage@power,w
  9842  0E57  00F0               	movwf	___fttol@f1
  9843  0E58  083F               	movf	CLeakage@power+1,w
  9844  0E59  00F1               	movwf	___fttol@f1+1
  9845  0E5A  0840               	movf	CLeakage@power+2,w
  9846  0E5B  00F2               	movwf	___fttol@f1+2
  9847  0E5C  160A  118A  2265  120A  158A  	fcall	___fttol
  9848  0E61  0871               	movf	?___fttol+1,w
  9849  0E62  1283               	bcf	3,5	;RP0=0, select bank0
  9850  0E63  1303               	bcf	3,6	;RP1=0, select bank0
  9851  0E64  00A3               	movwf	?_sprintf+3
  9852  0E65  0870               	movf	?___fttol,w
  9853  0E66  00A2               	movwf	?_sprintf+2
  9854  0E67  30A4               	movlw	(low (_text| (0+256)))& (0+255)
  9855  0E68  120A  158A  22DC  120A  158A  	fcall	_sprintf
  9856                           
  9857                           ;RTC_F.c: 294: Lcd_Set_Cursor(2,1);
  9858  0E6D  01F4               	clrf	Lcd_Set_Cursor@b
  9859  0E6E  0AF4               	incf	Lcd_Set_Cursor@b,f
  9860  0E6F  3002               	movlw	2
  9861  0E70  160A  158A  276B  120A  158A  	fcall	_Lcd_Set_Cursor
  9862                           
  9863                           ;RTC_F.c: 295: Lcd_Write_String(text);
  9864  0E75  30A4               	movlw	(low (_text| (0+256)))& (0+255)
  9865  0E76  00F5               	movwf	Lcd_Write_String@a
  9866  0E77  3001               	movlw	1
  9867  0E78  00F6               	movwf	Lcd_Write_String@a+1
  9868  0E79  160A  158A  26A4  120A  158A  	fcall	_Lcd_Write_String
  9869                           
  9870                           ;RTC_F.c: 297: avgpower=(avgpower+(int)power);
  9871  0E7E  1283               	bcf	3,5	;RP0=0, select bank0
  9872  0E7F  1303               	bcf	3,6	;RP1=0, select bank0
  9873  0E80  083E               	movf	CLeakage@power,w
  9874  0E81  00F0               	movwf	___fttol@f1
  9875  0E82  083F               	movf	CLeakage@power+1,w
  9876  0E83  00F1               	movwf	___fttol@f1+1
  9877  0E84  0840               	movf	CLeakage@power+2,w
  9878  0E85  00F2               	movwf	___fttol@f1+2
  9879  0E86  160A  118A  2265   	fcall	___fttol
  9880  0E89  1283               	bcf	3,5	;RP0=0, select bank0
  9881  0E8A  1303               	bcf	3,6	;RP1=0, select bank0
  9882  0E8B  084C               	movf	_avgpower,w
  9883  0E8C  0770               	addwf	?___fttol,w
  9884  0E8D  00CC               	movwf	_avgpower
  9885  0E8E  084D               	movf	_avgpower+1,w
  9886  0E8F  1803               	skipnc
  9887  0E90  0A4D               	incf	_avgpower+1,w
  9888  0E91  0771               	addwf	?___fttol+1,w
  9889  0E92  00CD               	movwf	_avgpower+1
  9890                           
  9891                           ;RTC_F.c: 299: count++;
  9892  0E93  3001               	movlw	1
  9893  0E94  1683               	bsf	3,5	;RP0=1, select bank1
  9894  0E95  1303               	bcf	3,6	;RP1=0, select bank1
  9895  0E96  07A3               	addwf	_count^(0+128),f
  9896  0E97  1803               	skipnc
  9897  0E98  0AA4               	incf	(_count+1)^(0+128),f
  9898  0E99  3000               	movlw	0
  9899  0E9A  07A4               	addwf	(_count+1)^(0+128),f
  9900  0E9B  0008               	return
  9901  0E9C                     __end_of_CLeakage:	
  9902                           
  9903                           	psect	text49
  9904  0ADC                     __ptext49:	
  9905 ;; *************** function _sprintf *****************
  9906 ;; Defined at:
  9907 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  9908 ;; Parameters:    Size  Location     Type
  9909 ;;  sp              1    wreg     PTR unsigned char 
  9910 ;;		 -> text(16), txt(20), 
  9911 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  9912 ;;		 -> STR_54(16), STR_50(13), STR_46(9), STR_41(12), 
  9913 ;;		 -> STR_38(12), STR_12(14), 
  9914 ;; Auto vars:     Size  Location     Type
  9915 ;;  sp              1   16[BANK0 ] PTR unsigned char 
  9916 ;;		 -> text(16), txt(20), 
  9917 ;;  tmpval          4    0        struct .
  9918 ;;  val             2   14[BANK0 ] unsigned int 
  9919 ;;  cp              2   12[BANK0 ] PTR const unsigned char 
  9920 ;;		 -> STR_55(7), DAY(10), YY(5), MM(5), 
  9921 ;;		 -> DD(5), ap(5), ss(5), mm(5), 
  9922 ;;		 -> hh(5), number(15), 
  9923 ;;  len             2    0        unsigned int 
  9924 ;;  c               1   17[BANK0 ] char 
  9925 ;;  ap              1   11[BANK0 ] PTR void [1]
  9926 ;;		 -> ?_sprintf(2), 
  9927 ;;  prec            1   10[BANK0 ] char 
  9928 ;;  flag            1    9[BANK0 ] unsigned char 
  9929 ;; Return value:  Size  Location     Type
  9930 ;;                  2    0[BANK0 ] int 
  9931 ;; Registers used:
  9932 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9933 ;; Tracked objects:
  9934 ;;		On entry : 0/0
  9935 ;;		On exit  : 0/0
  9936 ;;		Unchanged: 0/0
  9937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9938 ;;      Params:         0       6       0       0       0
  9939 ;;      Locals:         0       9       0       0       0
  9940 ;;      Temps:          0       3       0       0       0
  9941 ;;      Totals:         0      18       0       0       0
  9942 ;;Total ram usage:       18 bytes
  9943 ;; Hardware stack levels used:    1
  9944 ;; Hardware stack levels required when called:    1
  9945 ;; This function calls:
  9946 ;;		___lwdiv
  9947 ;;		___lwmod
  9948 ;; This function is called by:
  9949 ;;		_Msg_Setup
  9950 ;;		_Settings
  9951 ;;		_CLeakage
  9952 ;;		_main
  9953 ;;		_avgpow
  9954 ;; This function uses a non-reentrant model
  9955 ;;
  9956                           
  9957                           
  9958                           ;psect for function _sprintf
  9959  0ADC                     _sprintf:	
  9960                           
  9961                           ;incstack = 0
  9962                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9963                           ;sprintf@sp stored from wreg
  9964  0ADC  1283               	bcf	3,5	;RP0=0, select bank0
  9965  0ADD  1303               	bcf	3,6	;RP1=0, select bank0
  9966  0ADE  00B0               	movwf	sprintf@sp
  9967                           
  9968                           ;doprnt.c: 494: va_list ap;
  9969                           ;doprnt.c: 499: signed char c;
  9970                           ;doprnt.c: 506: signed char prec;
  9971                           ;doprnt.c: 508: unsigned char flag;
  9972                           ;doprnt.c: 523: union {
  9973                           ;doprnt.c: 524: unsigned long vd;
  9974                           ;doprnt.c: 525: double integ;
  9975                           ;doprnt.c: 526: } tmpval;
  9976                           ;doprnt.c: 528: unsigned int val;
  9977                           ;doprnt.c: 529: unsigned len;
  9978                           ;doprnt.c: 530: const char * cp;
  9979                           ;doprnt.c: 533: *ap = __va_start();
  9980  0ADF  3022               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  9981  0AE0  00A6               	movwf	??_sprintf
  9982  0AE1  0826               	movf	??_sprintf,w
  9983  0AE2  00AB               	movwf	sprintf@ap
  9984  0AE3                     l3138:	
  9985                           ;doprnt.c: 536: while(c = *f++) {
  9986                           
  9987  0AE3  0821               	movf	sprintf@f+1,w
  9988  0AE4  00A7               	movwf	??_sprintf+1
  9989  0AE5  0820               	movf	sprintf@f,w
  9990  0AE6  00A6               	movwf	??_sprintf
  9991  0AE7  0AA0               	incf	sprintf@f,f
  9992  0AE8  1903               	skipnz
  9993  0AE9  0AA1               	incf	sprintf@f+1,f
  9994  0AEA  0827               	movf	??_sprintf+1,w
  9995  0AEB  00FF               	movwf	127
  9996  0AEC  0826               	movf	??_sprintf,w
  9997  0AED  0084               	movwf	4
  9998  0AEE  120A  158A  2000  120A  158A  	fcall	stringtab
  9999  0AF3  00A8               	movwf	??_sprintf+2
 10000  0AF4  0828               	movf	??_sprintf+2,w
 10001  0AF5  00B1               	movwf	sprintf@c
 10002  0AF6  0831               	movf	sprintf@c,w
 10003  0AF7  1903               	btfsc	3,2
 10004  0AF8  2BFA               	goto	l3140
 10005                           
 10006                           ;doprnt.c: 538: if(c != '%')
 10007  0AF9  3025               	movlw	37
 10008  0AFA  0631               	xorwf	sprintf@c,w
 10009  0AFB  1903               	btfsc	3,2
 10010  0AFC  2B09               	goto	l3078
 10011                           
 10012                           ;doprnt.c: 540: {
 10013                           ;doprnt.c: 541: ((*sp++ = (c)));
 10014  0AFD  0831               	movf	sprintf@c,w
 10015  0AFE  00A6               	movwf	??_sprintf
 10016  0AFF  0830               	movf	sprintf@sp,w
 10017  0B00  0084               	movwf	4
 10018  0B01  0826               	movf	??_sprintf,w
 10019  0B02  1783               	bsf	3,7	;select IRP bank2
 10020  0B03  0080               	movwf	0
 10021  0B04  3001               	movlw	1
 10022  0B05  00A6               	movwf	??_sprintf
 10023  0B06  0826               	movf	??_sprintf,w
 10024  0B07  07B0               	addwf	sprintf@sp,f
 10025                           
 10026                           ;doprnt.c: 542: continue;
 10027  0B08  2AE3               	goto	l3138
 10028  0B09                     l3078:	
 10029                           
 10030                           ;doprnt.c: 543: }
 10031                           ;doprnt.c: 548: flag = 0;
 10032  0B09  01A9               	clrf	sprintf@flag
 10033                           
 10034                           ;doprnt.c: 635: switch(c = *f++) {
 10035  0B0A  2B42               	goto	l3098
 10036  0B0B                     l3080:	
 10037                           ;doprnt.c: 728: case 's':
 10038                           
 10039                           ;doprnt.c: 698: case 'i':
 10040                           ;doprnt.c: 699: break;
 10041                           
 10042                           ;doprnt.c: 697: case 'd':
 10043                           
 10044                           ;doprnt.c: 638: goto alldone;
 10045                           
 10046                           ;doprnt.c: 637: case 0:
 10047                           
 10048                           
 10049                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 10050  0B0B  082B               	movf	sprintf@ap,w
 10051  0B0C  0084               	movwf	4
 10052  0B0D  1383               	bcf	3,7	;select IRP bank0
 10053  0B0E  0800               	movf	0,w
 10054  0B0F  00AC               	movwf	sprintf@cp
 10055  0B10  3000               	movlw	0
 10056  0B11  00AD               	movwf	sprintf@cp+1
 10057  0B12  3001               	movlw	1
 10058  0B13  00A6               	movwf	??_sprintf
 10059  0B14  0826               	movf	??_sprintf,w
 10060  0B15  07AB               	addwf	sprintf@ap,f
 10061                           
 10062                           ;doprnt.c: 740: if(!cp)
 10063  0B16  082C               	movf	sprintf@cp,w
 10064  0B17  042D               	iorwf	sprintf@cp+1,w
 10065  0B18  1D03               	btfss	3,2
 10066  0B19  2B1E               	goto	l3094
 10067                           
 10068                           ;doprnt.c: 741: cp = "(null)";
 10069  0B1A  30D8               	movlw	low (STR_55| (0+32768))
 10070  0B1B  00AC               	movwf	sprintf@cp
 10071  0B1C  3089               	movlw	high (STR_55| (0+32768))
 10072  0B1D  00AD               	movwf	sprintf@cp+1
 10073  0B1E                     l3094:	
 10074                           ;doprnt.c: 777: while(*cp)
 10075                           
 10076  0B1E  082D               	movf	sprintf@cp+1,w
 10077  0B1F  00FF               	movwf	127
 10078  0B20  082C               	movf	sprintf@cp,w
 10079  0B21  0084               	movwf	4
 10080  0B22  120A  158A  2000  120A  158A  	fcall	stringtab
 10081  0B27  3A00               	xorlw	0
 10082  0B28  1903               	btfsc	3,2
 10083  0B29  2AE3               	goto	l3138
 10084                           
 10085                           ;doprnt.c: 778: ((*sp++ = (*cp++)));
 10086  0B2A  082D               	movf	sprintf@cp+1,w
 10087  0B2B  00FF               	movwf	127
 10088  0B2C  082C               	movf	sprintf@cp,w
 10089  0B2D  0084               	movwf	4
 10090  0B2E  120A  158A  2000  120A  158A  	fcall	stringtab
 10091  0B33  00A6               	movwf	??_sprintf
 10092  0B34  0830               	movf	sprintf@sp,w
 10093  0B35  0084               	movwf	4
 10094  0B36  0826               	movf	??_sprintf,w
 10095  0B37  1783               	bsf	3,7	;select IRP bank2
 10096  0B38  0080               	movwf	0
 10097  0B39  3001               	movlw	1
 10098  0B3A  07AC               	addwf	sprintf@cp,f
 10099  0B3B  1803               	skipnc
 10100  0B3C  0AAD               	incf	sprintf@cp+1,f
 10101  0B3D  3001               	movlw	1
 10102  0B3E  00A6               	movwf	??_sprintf
 10103  0B3F  0826               	movf	??_sprintf,w
 10104  0B40  07B0               	addwf	sprintf@sp,f
 10105  0B41  2B1E               	goto	l3094
 10106  0B42                     l3098:	
 10107                           ;doprnt.c: 822: }
 10108                           
 10109                           ;doprnt.c: 813: continue;
 10110                           
 10111                           ;doprnt.c: 802: default:
 10112                           
 10113                           ;doprnt.c: 779: continue;
 10114                           
 10115  0B42  0821               	movf	sprintf@f+1,w
 10116  0B43  00A7               	movwf	??_sprintf+1
 10117  0B44  0820               	movf	sprintf@f,w
 10118  0B45  00A6               	movwf	??_sprintf
 10119  0B46  0AA0               	incf	sprintf@f,f
 10120  0B47  1903               	skipnz
 10121  0B48  0AA1               	incf	sprintf@f+1,f
 10122  0B49  0827               	movf	??_sprintf+1,w
 10123  0B4A  00FF               	movwf	127
 10124  0B4B  0826               	movf	??_sprintf,w
 10125  0B4C  0084               	movwf	4
 10126  0B4D  120A  158A  2000  120A  158A  	fcall	stringtab
 10127  0B52  00B1               	movwf	sprintf@c
 10128                           
 10129                           ; Switch size 1, requested type "space"
 10130                           ; Number of cases is 4, Range of values is 0 to 115
 10131                           ; switch strategies available:
 10132                           ; Name         Instructions Cycles
 10133                           ; simple_byte           13     7 (average)
 10134                           ; jumptable            260     6 (fixed)
 10135                           ;	Chosen strategy is simple_byte
 10136  0B53  3A00               	xorlw	0	; case 0
 10137  0B54  1903               	skipnz
 10138  0B55  2BFA               	goto	l3140
 10139  0B56  3A64               	xorlw	100	; case 100
 10140  0B57  1903               	skipnz
 10141  0B58  2B60               	goto	l3100
 10142  0B59  3A0D               	xorlw	13	; case 105
 10143  0B5A  1903               	skipnz
 10144  0B5B  2B60               	goto	l3100
 10145  0B5C  3A1A               	xorlw	26	; case 115
 10146  0B5D  1903               	skipnz
 10147  0B5E  2B0B               	goto	l3080
 10148  0B5F  2AE3               	goto	l3138
 10149  0B60                     l3100:	
 10150                           
 10151                           ;doprnt.c: 1253: {
 10152                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10153  0B60  082B               	movf	sprintf@ap,w
 10154  0B61  0084               	movwf	4
 10155  0B62  1383               	bcf	3,7	;select IRP bank0
 10156  0B63  0800               	movf	0,w
 10157  0B64  00AE               	movwf	sprintf@val
 10158  0B65  0A84               	incf	4,f
 10159  0B66  0800               	movf	0,w
 10160  0B67  00AF               	movwf	sprintf@val+1
 10161  0B68  3002               	movlw	2
 10162  0B69  00A6               	movwf	??_sprintf
 10163  0B6A  0826               	movf	??_sprintf,w
 10164  0B6B  07AB               	addwf	sprintf@ap,f
 10165                           
 10166                           ;doprnt.c: 1261: if((int)val < 0) {
 10167  0B6C  1FAF               	btfss	sprintf@val+1,7
 10168  0B6D  2B77               	goto	l3110
 10169                           
 10170                           ;doprnt.c: 1262: flag |= 0x03;
 10171  0B6E  3003               	movlw	3
 10172  0B6F  00A6               	movwf	??_sprintf
 10173  0B70  0826               	movf	??_sprintf,w
 10174  0B71  04A9               	iorwf	sprintf@flag,f
 10175                           
 10176                           ;doprnt.c: 1263: val = -val;
 10177  0B72  09AE               	comf	sprintf@val,f
 10178  0B73  09AF               	comf	sprintf@val+1,f
 10179  0B74  0AAE               	incf	sprintf@val,f
 10180  0B75  1903               	skipnz
 10181  0B76  0AAF               	incf	sprintf@val+1,f
 10182  0B77                     l3110:	
 10183                           
 10184                           ;doprnt.c: 1264: }
 10185                           ;doprnt.c: 1266: }
 10186                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10187  0B77  01B1               	clrf	sprintf@c
 10188  0B78  0AB1               	incf	sprintf@c,f
 10189  0B79  3005               	movlw	5
 10190  0B7A  0631               	xorwf	sprintf@c,w
 10191  0B7B  1903               	btfsc	3,2
 10192  0B7C  2BA2               	goto	l3122
 10193  0B7D                     l3116:	
 10194                           
 10195                           ;doprnt.c: 1306: if(val < dpowers[c])
 10196  0B7D  0831               	movf	sprintf@c,w
 10197  0B7E  00A6               	movwf	??_sprintf
 10198  0B7F  0726               	addwf	??_sprintf,w
 10199  0B80  3E12               	addlw	low (_dpowers| (0+32768))
 10200  0B81  0084               	movwf	4
 10201  0B82  3088               	movlw	high (_dpowers| (0+32768))
 10202  0B83  1803               	skipnc
 10203  0B84  3E01               	addlw	1
 10204  0B85  00FF               	movwf	127
 10205  0B86  120A  158A  2000  120A  158A  	fcall	stringtab
 10206  0B8B  00A7               	movwf	??_sprintf+1
 10207  0B8C  120A  158A  2000  120A  158A  	fcall	stringtab
 10208  0B91  00A8               	movwf	??_sprintf+2
 10209  0B92  0828               	movf	??_sprintf+2,w
 10210  0B93  022F               	subwf	sprintf@val+1,w
 10211  0B94  1D03               	skipz
 10212  0B95  2B98               	goto	u2955
 10213  0B96  0827               	movf	??_sprintf+1,w
 10214  0B97  022E               	subwf	sprintf@val,w
 10215  0B98                     u2955:	
 10216  0B98  1C03               	btfss	3,0
 10217  0B99  2BA2               	goto	l3122
 10218                           
 10219                           ;doprnt.c: 1307: break;
 10220  0B9A  3001               	movlw	1
 10221  0B9B  00A6               	movwf	??_sprintf
 10222  0B9C  0826               	movf	??_sprintf,w
 10223  0B9D  07B1               	addwf	sprintf@c,f
 10224  0B9E  3005               	movlw	5
 10225  0B9F  0631               	xorwf	sprintf@c,w
 10226  0BA0  1D03               	btfss	3,2
 10227  0BA1  2B7D               	goto	l3116
 10228  0BA2                     l3122:	
 10229                           
 10230                           ;doprnt.c: 1422: {
 10231                           ;doprnt.c: 1438: if(flag & 0x03)
 10232  0BA2  0829               	movf	sprintf@flag,w
 10233  0BA3  3903               	andlw	3
 10234  0BA4  1903               	btfsc	3,2
 10235  0BA5  2BB1               	goto	l3128
 10236                           
 10237                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 10238  0BA6  302D               	movlw	45
 10239  0BA7  00A6               	movwf	??_sprintf
 10240  0BA8  0830               	movf	sprintf@sp,w
 10241  0BA9  0084               	movwf	4
 10242  0BAA  0826               	movf	??_sprintf,w
 10243  0BAB  1783               	bsf	3,7	;select IRP bank2
 10244  0BAC  0080               	movwf	0
 10245  0BAD  3001               	movlw	1
 10246  0BAE  00A6               	movwf	??_sprintf
 10247  0BAF  0826               	movf	??_sprintf,w
 10248  0BB0  07B0               	addwf	sprintf@sp,f
 10249  0BB1                     l3128:	
 10250                           
 10251                           ;doprnt.c: 1469: }
 10252                           ;doprnt.c: 1472: prec = c;
 10253  0BB1  0831               	movf	sprintf@c,w
 10254  0BB2  00A6               	movwf	??_sprintf
 10255  0BB3  0826               	movf	??_sprintf,w
 10256  0BB4  00AA               	movwf	sprintf@prec
 10257  0BB5                     l3136:	
 10258                           ;doprnt.c: 1474: while(prec--) {
 10259                           
 10260  0BB5  30FF               	movlw	255
 10261  0BB6  00A6               	movwf	??_sprintf
 10262  0BB7  0826               	movf	??_sprintf,w
 10263  0BB8  07AA               	addwf	sprintf@prec,f
 10264  0BB9  0A2A               	incf	sprintf@prec,w
 10265  0BBA  1903               	btfsc	3,2
 10266  0BBB  2AE3               	goto	l3138
 10267                           
 10268                           ;doprnt.c: 1478: {
 10269                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10270  0BBC  300A               	movlw	10
 10271  0BBD  00F8               	movwf	___lwmod@divisor
 10272  0BBE  3000               	movlw	0
 10273  0BBF  00F9               	movwf	___lwmod@divisor+1
 10274  0BC0  082A               	movf	sprintf@prec,w
 10275  0BC1  00A6               	movwf	??_sprintf
 10276  0BC2  0726               	addwf	??_sprintf,w
 10277  0BC3  3E12               	addlw	low (_dpowers| (0+32768))
 10278  0BC4  0084               	movwf	4
 10279  0BC5  3088               	movlw	high (_dpowers| (0+32768))
 10280  0BC6  1803               	skipnc
 10281  0BC7  3E01               	addlw	1
 10282  0BC8  00FF               	movwf	127
 10283  0BC9  120A  158A  2000  120A  158A  	fcall	stringtab
 10284  0BCE  00F0               	movwf	___lwdiv@divisor
 10285  0BCF  120A  158A  2000  120A  158A  	fcall	stringtab
 10286  0BD4  00F1               	movwf	___lwdiv@divisor+1
 10287  0BD5  082F               	movf	sprintf@val+1,w
 10288  0BD6  00F3               	movwf	___lwdiv@dividend+1
 10289  0BD7  082E               	movf	sprintf@val,w
 10290  0BD8  00F2               	movwf	___lwdiv@dividend
 10291  0BD9  160A  158A  2668  120A  158A  	fcall	___lwdiv
 10292  0BDE  0871               	movf	?___lwdiv+1,w
 10293  0BDF  00FB               	movwf	___lwmod@dividend+1
 10294  0BE0  0870               	movf	?___lwdiv,w
 10295  0BE1  00FA               	movwf	___lwmod@dividend
 10296  0BE2  160A  158A  24EF  120A  158A  	fcall	___lwmod
 10297  0BE7  0878               	movf	?___lwmod,w
 10298  0BE8  3E30               	addlw	48
 10299  0BE9  1283               	bcf	3,5	;RP0=0, select bank0
 10300  0BEA  1303               	bcf	3,6	;RP1=0, select bank0
 10301  0BEB  00A7               	movwf	??_sprintf+1
 10302  0BEC  0827               	movf	??_sprintf+1,w
 10303  0BED  00B1               	movwf	sprintf@c
 10304                           
 10305                           ;doprnt.c: 1523: }
 10306                           ;doprnt.c: 1524: ((*sp++ = (c)));
 10307  0BEE  0831               	movf	sprintf@c,w
 10308  0BEF  00A6               	movwf	??_sprintf
 10309  0BF0  0830               	movf	sprintf@sp,w
 10310  0BF1  0084               	movwf	4
 10311  0BF2  0826               	movf	??_sprintf,w
 10312  0BF3  1783               	bsf	3,7	;select IRP bank2
 10313  0BF4  0080               	movwf	0
 10314  0BF5  3001               	movlw	1
 10315  0BF6  00A6               	movwf	??_sprintf
 10316  0BF7  0826               	movf	??_sprintf,w
 10317  0BF8  07B0               	addwf	sprintf@sp,f
 10318  0BF9  2BB5               	goto	l3136
 10319  0BFA                     l3140:	
 10320                           ;doprnt.c: 1525: }
 10321                           ;doprnt.c: 1533: }
 10322                           ;doprnt.c: 1535: alldone:
 10323                           
 10324                           
 10325                           ;doprnt.c: 1538: *sp = 0;
 10326  0BFA  0830               	movf	sprintf@sp,w
 10327  0BFB  0084               	movwf	4
 10328  0BFC  1783               	bsf	3,7	;select IRP bank2
 10329  0BFD  0180               	clrf	0
 10330  0BFE  0008               	return
 10331  0BFF                     __end_of_sprintf:	
 10332                           ;doprnt.c: 1540: return 0;
 10333                           ;	Return value of _sprintf is never used
 10334                           
 10335                           
 10336                           	psect	text50
 10337  1CEF                     __ptext50:	
 10338 ;; *************** function ___lwmod *****************
 10339 ;; Defined at:
 10340 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
 10341 ;; Parameters:    Size  Location     Type
 10342 ;;  divisor         2    8[COMMON] unsigned int 
 10343 ;;  dividend        2   10[COMMON] unsigned int 
 10344 ;; Auto vars:     Size  Location     Type
 10345 ;;  counter         1   13[COMMON] unsigned char 
 10346 ;; Return value:  Size  Location     Type
 10347 ;;                  2    8[COMMON] unsigned int 
 10348 ;; Registers used:
 10349 ;;		wreg, status,2, status,0
 10350 ;; Tracked objects:
 10351 ;;		On entry : 0/0
 10352 ;;		On exit  : 0/0
 10353 ;;		Unchanged: 0/0
 10354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10355 ;;      Params:         4       0       0       0       0
 10356 ;;      Locals:         1       0       0       0       0
 10357 ;;      Temps:          1       0       0       0       0
 10358 ;;      Totals:         6       0       0       0       0
 10359 ;;Total ram usage:        6 bytes
 10360 ;; Hardware stack levels used:    1
 10361 ;; This function calls:
 10362 ;;		Nothing
 10363 ;; This function is called by:
 10364 ;;		_sprintf
 10365 ;; This function uses a non-reentrant model
 10366 ;;
 10367                           
 10368                           
 10369                           ;psect for function ___lwmod
 10370  1CEF                     ___lwmod:	
 10371                           
 10372                           ;incstack = 0
 10373                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 10374  1CEF  0878               	movf	___lwmod@divisor,w
 10375  1CF0  0479               	iorwf	___lwmod@divisor+1,w
 10376  1CF1  1903               	btfsc	3,2
 10377  1CF2  2D1C               	goto	l2918
 10378  1CF3  01FD               	clrf	___lwmod@counter
 10379  1CF4  0AFD               	incf	___lwmod@counter,f
 10380  1CF5                     l2908:	
 10381  1CF5  1BF9               	btfsc	___lwmod@divisor+1,7
 10382  1CF6  2D03               	goto	l2910
 10383  1CF7  3001               	movlw	1
 10384  1CF8                     u2445:	
 10385  1CF8  1003               	clrc
 10386  1CF9  0DF8               	rlf	___lwmod@divisor,f
 10387  1CFA  0DF9               	rlf	___lwmod@divisor+1,f
 10388  1CFB  3EFF               	addlw	-1
 10389  1CFC  1D03               	skipz
 10390  1CFD  2CF8               	goto	u2445
 10391  1CFE  3001               	movlw	1
 10392  1CFF  00FC               	movwf	??___lwmod
 10393  1D00  087C               	movf	??___lwmod,w
 10394  1D01  07FD               	addwf	___lwmod@counter,f
 10395  1D02  2CF5               	goto	l2908
 10396  1D03                     l2910:	
 10397  1D03  0879               	movf	___lwmod@divisor+1,w
 10398  1D04  027B               	subwf	___lwmod@dividend+1,w
 10399  1D05  1D03               	skipz
 10400  1D06  2D09               	goto	u2465
 10401  1D07  0878               	movf	___lwmod@divisor,w
 10402  1D08  027A               	subwf	___lwmod@dividend,w
 10403  1D09                     u2465:	
 10404  1D09  1C03               	skipc
 10405  1D0A  2D11               	goto	l2914
 10406  1D0B  0878               	movf	___lwmod@divisor,w
 10407  1D0C  02FA               	subwf	___lwmod@dividend,f
 10408  1D0D  0879               	movf	___lwmod@divisor+1,w
 10409  1D0E  1C03               	skipc
 10410  1D0F  03FB               	decf	___lwmod@dividend+1,f
 10411  1D10  02FB               	subwf	___lwmod@dividend+1,f
 10412  1D11                     l2914:	
 10413  1D11  3001               	movlw	1
 10414  1D12                     u2475:	
 10415  1D12  1003               	clrc
 10416  1D13  0CF9               	rrf	___lwmod@divisor+1,f
 10417  1D14  0CF8               	rrf	___lwmod@divisor,f
 10418  1D15  3EFF               	addlw	-1
 10419  1D16  1D03               	skipz
 10420  1D17  2D12               	goto	u2475
 10421  1D18  3001               	movlw	1
 10422  1D19  02FD               	subwf	___lwmod@counter,f
 10423  1D1A  1D03               	btfss	3,2
 10424  1D1B  2D03               	goto	l2910
 10425  1D1C                     l2918:	
 10426  1D1C  087B               	movf	___lwmod@dividend+1,w
 10427  1D1D  00F9               	movwf	?___lwmod+1
 10428  1D1E  087A               	movf	___lwmod@dividend,w
 10429  1D1F  00F8               	movwf	?___lwmod
 10430  1D20  0008               	return
 10431  1D21                     __end_of___lwmod:	
 10432                           
 10433                           	psect	text51
 10434  1E68                     __ptext51:	
 10435 ;; *************** function ___lwdiv *****************
 10436 ;; Defined at:
 10437 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
 10438 ;; Parameters:    Size  Location     Type
 10439 ;;  divisor         2    0[COMMON] unsigned int 
 10440 ;;  dividend        2    2[COMMON] unsigned int 
 10441 ;; Auto vars:     Size  Location     Type
 10442 ;;  quotient        2    5[COMMON] unsigned int 
 10443 ;;  counter         1    7[COMMON] unsigned char 
 10444 ;; Return value:  Size  Location     Type
 10445 ;;                  2    0[COMMON] unsigned int 
 10446 ;; Registers used:
 10447 ;;		wreg, status,2, status,0
 10448 ;; Tracked objects:
 10449 ;;		On entry : 0/0
 10450 ;;		On exit  : 0/0
 10451 ;;		Unchanged: 0/0
 10452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10453 ;;      Params:         4       0       0       0       0
 10454 ;;      Locals:         3       0       0       0       0
 10455 ;;      Temps:          1       0       0       0       0
 10456 ;;      Totals:         8       0       0       0       0
 10457 ;;Total ram usage:        8 bytes
 10458 ;; Hardware stack levels used:    1
 10459 ;; This function calls:
 10460 ;;		Nothing
 10461 ;; This function is called by:
 10462 ;;		_sprintf
 10463 ;; This function uses a non-reentrant model
 10464 ;;
 10465                           
 10466                           
 10467                           ;psect for function ___lwdiv
 10468  1E68                     ___lwdiv:	
 10469                           
 10470                           ;incstack = 0
 10471                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10472  1E68  01F5               	clrf	___lwdiv@quotient
 10473  1E69  01F6               	clrf	___lwdiv@quotient+1
 10474  1E6A  0870               	movf	___lwdiv@divisor,w
 10475  1E6B  0471               	iorwf	___lwdiv@divisor+1,w
 10476  1E6C  1903               	btfsc	3,2
 10477  1E6D  2E9F               	goto	l2896
 10478  1E6E  01F7               	clrf	___lwdiv@counter
 10479  1E6F  0AF7               	incf	___lwdiv@counter,f
 10480  1E70                     l2884:	
 10481  1E70  1BF1               	btfsc	___lwdiv@divisor+1,7
 10482  1E71  2E7E               	goto	l2886
 10483  1E72  3001               	movlw	1
 10484  1E73                     u2375:	
 10485  1E73  1003               	clrc
 10486  1E74  0DF0               	rlf	___lwdiv@divisor,f
 10487  1E75  0DF1               	rlf	___lwdiv@divisor+1,f
 10488  1E76  3EFF               	addlw	-1
 10489  1E77  1D03               	skipz
 10490  1E78  2E73               	goto	u2375
 10491  1E79  3001               	movlw	1
 10492  1E7A  00F4               	movwf	??___lwdiv
 10493  1E7B  0874               	movf	??___lwdiv,w
 10494  1E7C  07F7               	addwf	___lwdiv@counter,f
 10495  1E7D  2E70               	goto	l2884
 10496  1E7E                     l2886:	
 10497  1E7E  3001               	movlw	1
 10498  1E7F                     u2395:	
 10499  1E7F  1003               	clrc
 10500  1E80  0DF5               	rlf	___lwdiv@quotient,f
 10501  1E81  0DF6               	rlf	___lwdiv@quotient+1,f
 10502  1E82  3EFF               	addlw	-1
 10503  1E83  1D03               	skipz
 10504  1E84  2E7F               	goto	u2395
 10505  1E85  0871               	movf	___lwdiv@divisor+1,w
 10506  1E86  0273               	subwf	___lwdiv@dividend+1,w
 10507  1E87  1D03               	skipz
 10508  1E88  2E8B               	goto	u2405
 10509  1E89  0870               	movf	___lwdiv@divisor,w
 10510  1E8A  0272               	subwf	___lwdiv@dividend,w
 10511  1E8B                     u2405:	
 10512  1E8B  1C03               	skipc
 10513  1E8C  2E94               	goto	l2892
 10514  1E8D  0870               	movf	___lwdiv@divisor,w
 10515  1E8E  02F2               	subwf	___lwdiv@dividend,f
 10516  1E8F  0871               	movf	___lwdiv@divisor+1,w
 10517  1E90  1C03               	skipc
 10518  1E91  03F3               	decf	___lwdiv@dividend+1,f
 10519  1E92  02F3               	subwf	___lwdiv@dividend+1,f
 10520  1E93  1475               	bsf	___lwdiv@quotient,0
 10521  1E94                     l2892:	
 10522  1E94  3001               	movlw	1
 10523  1E95                     u2415:	
 10524  1E95  1003               	clrc
 10525  1E96  0CF1               	rrf	___lwdiv@divisor+1,f
 10526  1E97  0CF0               	rrf	___lwdiv@divisor,f
 10527  1E98  3EFF               	addlw	-1
 10528  1E99  1D03               	skipz
 10529  1E9A  2E95               	goto	u2415
 10530  1E9B  3001               	movlw	1
 10531  1E9C  02F7               	subwf	___lwdiv@counter,f
 10532  1E9D  1D03               	btfss	3,2
 10533  1E9E  2E7E               	goto	l2886
 10534  1E9F                     l2896:	
 10535  1E9F  0876               	movf	___lwdiv@quotient+1,w
 10536  1EA0  00F1               	movwf	?___lwdiv+1
 10537  1EA1  0875               	movf	___lwdiv@quotient,w
 10538  1EA2  00F0               	movwf	?___lwdiv
 10539  1EA3  0008               	return
 10540  1EA4                     __end_of___lwdiv:	
 10541                           
 10542                           	psect	text52
 10543  1B86                     __ptext52:	
 10544 ;; *************** function ___lwtoft *****************
 10545 ;; Defined at:
 10546 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
 10547 ;; Parameters:    Size  Location     Type
 10548 ;;  c               2    8[COMMON] unsigned int 
 10549 ;; Auto vars:     Size  Location     Type
 10550 ;;		None
 10551 ;; Return value:  Size  Location     Type
 10552 ;;                  3    8[COMMON] float 
 10553 ;; Registers used:
 10554 ;;		wreg, status,2, status,0, pclath, cstack
 10555 ;; Tracked objects:
 10556 ;;		On entry : 0/0
 10557 ;;		On exit  : 0/0
 10558 ;;		Unchanged: 0/0
 10559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10560 ;;      Params:         3       0       0       0       0
 10561 ;;      Locals:         0       0       0       0       0
 10562 ;;      Temps:          1       0       0       0       0
 10563 ;;      Totals:         4       0       0       0       0
 10564 ;;Total ram usage:        4 bytes
 10565 ;; Hardware stack levels used:    1
 10566 ;; Hardware stack levels required when called:    1
 10567 ;; This function calls:
 10568 ;;		___ftpack
 10569 ;; This function is called by:
 10570 ;;		_CLeakage
 10571 ;; This function uses a non-reentrant model
 10572 ;;
 10573                           
 10574                           
 10575                           ;psect for function ___lwtoft
 10576  1B86                     ___lwtoft:	
 10577                           
 10578                           ;incstack = 0
 10579                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
 10580  1B86  0878               	movf	___lwtoft@c,w
 10581  1B87  00F0               	movwf	___ftpack@arg
 10582  1B88  0879               	movf	___lwtoft@c+1,w
 10583  1B89  00F1               	movwf	___ftpack@arg+1
 10584  1B8A  01F2               	clrf	___ftpack@arg+2
 10585  1B8B  308E               	movlw	142
 10586  1B8C  00FB               	movwf	??___lwtoft
 10587  1B8D  087B               	movf	??___lwtoft,w
 10588  1B8E  00F3               	movwf	___ftpack@exp
 10589  1B8F  01F4               	clrf	___ftpack@sign
 10590  1B90  160A  118A  211D   	fcall	___ftpack
 10591  1B93  0870               	movf	?___ftpack,w
 10592  1B94  00F8               	movwf	?___lwtoft
 10593  1B95  0871               	movf	?___ftpack+1,w
 10594  1B96  00F9               	movwf	?___lwtoft+1
 10595  1B97  0872               	movf	?___ftpack+2,w
 10596  1B98  00FA               	movwf	?___lwtoft+2
 10597  1B99  0008               	return
 10598  1B9A                     __end_of___lwtoft:	
 10599                           
 10600                           	psect	text53
 10601  1265                     __ptext53:	
 10602 ;; *************** function ___fttol *****************
 10603 ;; Defined at:
 10604 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
 10605 ;; Parameters:    Size  Location     Type
 10606 ;;  f1              3    0[COMMON] float 
 10607 ;; Auto vars:     Size  Location     Type
 10608 ;;  lval            4    9[COMMON] unsigned long 
 10609 ;;  exp1            1   13[COMMON] unsigned char 
 10610 ;;  sign1           1    8[COMMON] unsigned char 
 10611 ;; Return value:  Size  Location     Type
 10612 ;;                  4    0[COMMON] long 
 10613 ;; Registers used:
 10614 ;;		wreg, status,2, status,0
 10615 ;; Tracked objects:
 10616 ;;		On entry : 0/0
 10617 ;;		On exit  : 0/0
 10618 ;;		Unchanged: 0/0
 10619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10620 ;;      Params:         4       0       0       0       0
 10621 ;;      Locals:         6       0       0       0       0
 10622 ;;      Temps:          4       0       0       0       0
 10623 ;;      Totals:        14       0       0       0       0
 10624 ;;Total ram usage:       14 bytes
 10625 ;; Hardware stack levels used:    1
 10626 ;; This function calls:
 10627 ;;		Nothing
 10628 ;; This function is called by:
 10629 ;;		_CLeakage
 10630 ;; This function uses a non-reentrant model
 10631 ;;
 10632                           
 10633                           
 10634                           ;psect for function ___fttol
 10635  1265                     ___fttol:	
 10636                           
 10637                           ;incstack = 0
 10638                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 10639  1265  0870               	movf	___fttol@f1,w
 10640  1266  00F4               	movwf	??___fttol
 10641  1267  0871               	movf	___fttol@f1+1,w
 10642  1268  00F5               	movwf	??___fttol+1
 10643  1269  0872               	movf	___fttol@f1+2,w
 10644  126A  00F6               	movwf	??___fttol+2
 10645  126B  1003               	clrc
 10646  126C  0D75               	rlf	??___fttol+1,w
 10647  126D  0D76               	rlf	??___fttol+2,w
 10648  126E  00F7               	movwf	??___fttol+3
 10649  126F  0877               	movf	??___fttol+3,w
 10650  1270  00FD               	movwf	___fttol@exp1
 10651  1271  087D               	movf	___fttol@exp1,w
 10652  1272  1D03               	btfss	3,2
 10653  1273  2A7D               	goto	l4064
 10654  1274  3000               	movlw	0
 10655  1275  00F3               	movwf	?___fttol+3
 10656  1276  3000               	movlw	0
 10657  1277  00F2               	movwf	?___fttol+2
 10658  1278  3000               	movlw	0
 10659  1279  00F1               	movwf	?___fttol+1
 10660  127A  3000               	movlw	0
 10661  127B  00F0               	movwf	?___fttol
 10662  127C  0008               	return
 10663  127D                     l4064:	
 10664  127D  0870               	movf	___fttol@f1,w
 10665  127E  00F4               	movwf	??___fttol
 10666  127F  0871               	movf	___fttol@f1+1,w
 10667  1280  00F5               	movwf	??___fttol+1
 10668  1281  0872               	movf	___fttol@f1+2,w
 10669  1282  00F6               	movwf	??___fttol+2
 10670  1283  3017               	movlw	23
 10671  1284                     u4195:	
 10672  1284  1003               	clrc
 10673  1285  0CF6               	rrf	??___fttol+2,f
 10674  1286  0CF5               	rrf	??___fttol+1,f
 10675  1287  0CF4               	rrf	??___fttol,f
 10676  1288  3EFF               	addlw	-1
 10677  1289  1D03               	skipz
 10678  128A  2A84               	goto	u4195
 10679  128B  0874               	movf	??___fttol,w
 10680  128C  00F7               	movwf	??___fttol+3
 10681  128D  0877               	movf	??___fttol+3,w
 10682  128E  00F8               	movwf	___fttol@sign1
 10683  128F  17F1               	bsf	___fttol@f1+1,7
 10684  1290  30FF               	movlw	255
 10685  1291  05F0               	andwf	___fttol@f1,f
 10686  1292  30FF               	movlw	255
 10687  1293  05F1               	andwf	___fttol@f1+1,f
 10688  1294  3000               	movlw	0
 10689  1295  05F2               	andwf	___fttol@f1+2,f
 10690  1296  0870               	movf	___fttol@f1,w
 10691  1297  00F9               	movwf	___fttol@lval
 10692  1298  0871               	movf	___fttol@f1+1,w
 10693  1299  00FA               	movwf	___fttol@lval+1
 10694  129A  0872               	movf	___fttol@f1+2,w
 10695  129B  00FB               	movwf	___fttol@lval+2
 10696  129C  01FC               	clrf	___fttol@lval+3
 10697  129D  308E               	movlw	142
 10698  129E  02FD               	subwf	___fttol@exp1,f
 10699  129F  1FFD               	btfss	___fttol@exp1,7
 10700  12A0  2ABF               	goto	l4084
 10701  12A1  087D               	movf	___fttol@exp1,w
 10702  12A2  3A80               	xorlw	128
 10703  12A3  3E8F               	addlw	143
 10704  12A4  1803               	skipnc
 10705  12A5  2AAF               	goto	l4082
 10706  12A6  3000               	movlw	0
 10707  12A7  00F3               	movwf	?___fttol+3
 10708  12A8  3000               	movlw	0
 10709  12A9  00F2               	movwf	?___fttol+2
 10710  12AA  3000               	movlw	0
 10711  12AB  00F1               	movwf	?___fttol+1
 10712  12AC  3000               	movlw	0
 10713  12AD  00F0               	movwf	?___fttol
 10714  12AE  0008               	return
 10715  12AF                     l4082:	
 10716  12AF  3001               	movlw	1
 10717  12B0                     u4225:	
 10718  12B0  1003               	clrc
 10719  12B1  0CFC               	rrf	___fttol@lval+3,f
 10720  12B2  0CFB               	rrf	___fttol@lval+2,f
 10721  12B3  0CFA               	rrf	___fttol@lval+1,f
 10722  12B4  0CF9               	rrf	___fttol@lval,f
 10723  12B5  3EFF               	addlw	-1
 10724  12B6  1D03               	skipz
 10725  12B7  2AB0               	goto	u4225
 10726  12B8  3001               	movlw	1
 10727  12B9  00F4               	movwf	??___fttol
 10728  12BA  0874               	movf	??___fttol,w
 10729  12BB  07FD               	addwf	___fttol@exp1,f
 10730  12BC  1903               	btfsc	3,2
 10731  12BD  2ADA               	goto	l4092
 10732  12BE  2AAF               	goto	l4082
 10733  12BF                     l4084:	
 10734  12BF  3018               	movlw	24
 10735  12C0  027D               	subwf	___fttol@exp1,w
 10736  12C1  1C03               	skipc
 10737  12C2  2AD7               	goto	l1061
 10738  12C3  3000               	movlw	0
 10739  12C4  00F3               	movwf	?___fttol+3
 10740  12C5  3000               	movlw	0
 10741  12C6  00F2               	movwf	?___fttol+2
 10742  12C7  3000               	movlw	0
 10743  12C8  00F1               	movwf	?___fttol+1
 10744  12C9  3000               	movlw	0
 10745  12CA  00F0               	movwf	?___fttol
 10746  12CB  0008               	return
 10747  12CC                     l4090:	
 10748  12CC  3001               	movlw	1
 10749  12CD  00F4               	movwf	??___fttol
 10750  12CE                     u4255:	
 10751  12CE  1003               	clrc
 10752  12CF  0DF9               	rlf	___fttol@lval,f
 10753  12D0  0DFA               	rlf	___fttol@lval+1,f
 10754  12D1  0DFB               	rlf	___fttol@lval+2,f
 10755  12D2  0DFC               	rlf	___fttol@lval+3,f
 10756  12D3  0BF4               	decfsz	??___fttol,f
 10757  12D4  2ACE               	goto	u4255
 10758  12D5  3001               	movlw	1
 10759  12D6  02FD               	subwf	___fttol@exp1,f
 10760  12D7                     l1061:	
 10761  12D7  087D               	movf	___fttol@exp1,w
 10762  12D8  1D03               	btfss	3,2
 10763  12D9  2ACC               	goto	l4090
 10764  12DA                     l4092:	
 10765  12DA  0878               	movf	___fttol@sign1,w
 10766  12DB  1903               	btfsc	3,2
 10767  12DC  2AE8               	goto	l4096
 10768  12DD  09F9               	comf	___fttol@lval,f
 10769  12DE  09FA               	comf	___fttol@lval+1,f
 10770  12DF  09FB               	comf	___fttol@lval+2,f
 10771  12E0  09FC               	comf	___fttol@lval+3,f
 10772  12E1  0AF9               	incf	___fttol@lval,f
 10773  12E2  1903               	skipnz
 10774  12E3  0AFA               	incf	___fttol@lval+1,f
 10775  12E4  1903               	skipnz
 10776  12E5  0AFB               	incf	___fttol@lval+2,f
 10777  12E6  1903               	skipnz
 10778  12E7  0AFC               	incf	___fttol@lval+3,f
 10779  12E8                     l4096:	
 10780  12E8  087C               	movf	___fttol@lval+3,w
 10781  12E9  00F3               	movwf	?___fttol+3
 10782  12EA  087B               	movf	___fttol@lval+2,w
 10783  12EB  00F2               	movwf	?___fttol+2
 10784  12EC  087A               	movf	___fttol@lval+1,w
 10785  12ED  00F1               	movwf	?___fttol+1
 10786  12EE  0879               	movf	___fttol@lval,w
 10787  12EF  00F0               	movwf	?___fttol
 10788  12F0  0008               	return
 10789  12F1                     __end_of___fttol:	
 10790                           
 10791                           	psect	text54
 10792  0A09                     __ptext54:	
 10793 ;; *************** function ___ftmul *****************
 10794 ;; Defined at:
 10795 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 10796 ;; Parameters:    Size  Location     Type
 10797 ;;  f1              3    0[BANK0 ] float 
 10798 ;;  f2              3    3[BANK0 ] float 
 10799 ;; Auto vars:     Size  Location     Type
 10800 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
 10801 ;;  sign            1   15[BANK0 ] unsigned char 
 10802 ;;  cntr            1   14[BANK0 ] unsigned char 
 10803 ;;  exp             1   10[BANK0 ] unsigned char 
 10804 ;; Return value:  Size  Location     Type
 10805 ;;                  3    0[BANK0 ] float 
 10806 ;; Registers used:
 10807 ;;		wreg, status,2, status,0, pclath, cstack
 10808 ;; Tracked objects:
 10809 ;;		On entry : 0/0
 10810 ;;		On exit  : 0/0
 10811 ;;		Unchanged: 0/0
 10812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10813 ;;      Params:         0       6       0       0       0
 10814 ;;      Locals:         0       6       0       0       0
 10815 ;;      Temps:          0       4       0       0       0
 10816 ;;      Totals:         0      16       0       0       0
 10817 ;;Total ram usage:       16 bytes
 10818 ;; Hardware stack levels used:    1
 10819 ;; Hardware stack levels required when called:    1
 10820 ;; This function calls:
 10821 ;;		___ftpack
 10822 ;; This function is called by:
 10823 ;;		_CLeakage
 10824 ;; This function uses a non-reentrant model
 10825 ;;
 10826                           
 10827                           
 10828                           ;psect for function ___ftmul
 10829  0A09                     ___ftmul:	
 10830                           
 10831                           ;incstack = 0
 10832                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 10833  0A09  1283               	bcf	3,5	;RP0=0, select bank0
 10834  0A0A  1303               	bcf	3,6	;RP1=0, select bank0
 10835  0A0B  0820               	movf	___ftmul@f1,w
 10836  0A0C  00A6               	movwf	??___ftmul
 10837  0A0D  0821               	movf	___ftmul@f1+1,w
 10838  0A0E  00A7               	movwf	??___ftmul+1
 10839  0A0F  0822               	movf	___ftmul@f1+2,w
 10840  0A10  00A8               	movwf	??___ftmul+2
 10841  0A11  1003               	clrc
 10842  0A12  0D27               	rlf	??___ftmul+1,w
 10843  0A13  0D28               	rlf	??___ftmul+2,w
 10844  0A14  00A9               	movwf	??___ftmul+3
 10845  0A15  0829               	movf	??___ftmul+3,w
 10846  0A16  00AA               	movwf	___ftmul@exp
 10847  0A17  082A               	movf	___ftmul@exp,w
 10848  0A18  1D03               	btfss	3,2
 10849  0A19  2A21               	goto	l4014
 10850  0A1A  3000               	movlw	0
 10851  0A1B  00A0               	movwf	?___ftmul
 10852  0A1C  3000               	movlw	0
 10853  0A1D  00A1               	movwf	?___ftmul+1
 10854  0A1E  3000               	movlw	0
 10855  0A1F  00A2               	movwf	?___ftmul+2
 10856  0A20  0008               	return
 10857  0A21                     l4014:	
 10858  0A21  0823               	movf	___ftmul@f2,w
 10859  0A22  00A6               	movwf	??___ftmul
 10860  0A23  0824               	movf	___ftmul@f2+1,w
 10861  0A24  00A7               	movwf	??___ftmul+1
 10862  0A25  0825               	movf	___ftmul@f2+2,w
 10863  0A26  00A8               	movwf	??___ftmul+2
 10864  0A27  1003               	clrc
 10865  0A28  0D27               	rlf	??___ftmul+1,w
 10866  0A29  0D28               	rlf	??___ftmul+2,w
 10867  0A2A  00A9               	movwf	??___ftmul+3
 10868  0A2B  0829               	movf	??___ftmul+3,w
 10869  0A2C  00AF               	movwf	___ftmul@sign
 10870  0A2D  082F               	movf	___ftmul@sign,w
 10871  0A2E  1D03               	btfss	3,2
 10872  0A2F  2A37               	goto	l4020
 10873  0A30  3000               	movlw	0
 10874  0A31  00A0               	movwf	?___ftmul
 10875  0A32  3000               	movlw	0
 10876  0A33  00A1               	movwf	?___ftmul+1
 10877  0A34  3000               	movlw	0
 10878  0A35  00A2               	movwf	?___ftmul+2
 10879  0A36  0008               	return
 10880  0A37                     l4020:	
 10881  0A37  082F               	movf	___ftmul@sign,w
 10882  0A38  3E7B               	addlw	123
 10883  0A39  00A6               	movwf	??___ftmul
 10884  0A3A  0826               	movf	??___ftmul,w
 10885  0A3B  07AA               	addwf	___ftmul@exp,f
 10886  0A3C  0820               	movf	___ftmul@f1,w
 10887  0A3D  00A6               	movwf	??___ftmul
 10888  0A3E  0821               	movf	___ftmul@f1+1,w
 10889  0A3F  00A7               	movwf	??___ftmul+1
 10890  0A40  0822               	movf	___ftmul@f1+2,w
 10891  0A41  00A8               	movwf	??___ftmul+2
 10892  0A42  3010               	movlw	16
 10893  0A43                     u4065:	
 10894  0A43  1003               	clrc
 10895  0A44  0CA8               	rrf	??___ftmul+2,f
 10896  0A45  0CA7               	rrf	??___ftmul+1,f
 10897  0A46  0CA6               	rrf	??___ftmul,f
 10898  0A47  3EFF               	addlw	-1
 10899  0A48  1D03               	skipz
 10900  0A49  2A43               	goto	u4065
 10901  0A4A  0826               	movf	??___ftmul,w
 10902  0A4B  00A9               	movwf	??___ftmul+3
 10903  0A4C  0829               	movf	??___ftmul+3,w
 10904  0A4D  00AF               	movwf	___ftmul@sign
 10905  0A4E  0823               	movf	___ftmul@f2,w
 10906  0A4F  00A6               	movwf	??___ftmul
 10907  0A50  0824               	movf	___ftmul@f2+1,w
 10908  0A51  00A7               	movwf	??___ftmul+1
 10909  0A52  0825               	movf	___ftmul@f2+2,w
 10910  0A53  00A8               	movwf	??___ftmul+2
 10911  0A54  3010               	movlw	16
 10912  0A55                     u4075:	
 10913  0A55  1003               	clrc
 10914  0A56  0CA8               	rrf	??___ftmul+2,f
 10915  0A57  0CA7               	rrf	??___ftmul+1,f
 10916  0A58  0CA6               	rrf	??___ftmul,f
 10917  0A59  3EFF               	addlw	-1
 10918  0A5A  1D03               	skipz
 10919  0A5B  2A55               	goto	u4075
 10920  0A5C  0826               	movf	??___ftmul,w
 10921  0A5D  00A9               	movwf	??___ftmul+3
 10922  0A5E  0829               	movf	??___ftmul+3,w
 10923  0A5F  06AF               	xorwf	___ftmul@sign,f
 10924  0A60  3080               	movlw	128
 10925  0A61  00A6               	movwf	??___ftmul
 10926  0A62  0826               	movf	??___ftmul,w
 10927  0A63  05AF               	andwf	___ftmul@sign,f
 10928  0A64  17A1               	bsf	___ftmul@f1+1,7
 10929  0A65  17A4               	bsf	___ftmul@f2+1,7
 10930  0A66  30FF               	movlw	255
 10931  0A67  05A3               	andwf	___ftmul@f2,f
 10932  0A68  30FF               	movlw	255
 10933  0A69  05A4               	andwf	___ftmul@f2+1,f
 10934  0A6A  3000               	movlw	0
 10935  0A6B  05A5               	andwf	___ftmul@f2+2,f
 10936  0A6C  3000               	movlw	0
 10937  0A6D  00AB               	movwf	___ftmul@f3_as_product
 10938  0A6E  3000               	movlw	0
 10939  0A6F  00AC               	movwf	___ftmul@f3_as_product+1
 10940  0A70  3000               	movlw	0
 10941  0A71  00AD               	movwf	___ftmul@f3_as_product+2
 10942  0A72  3007               	movlw	7
 10943  0A73  00A6               	movwf	??___ftmul
 10944  0A74  0826               	movf	??___ftmul,w
 10945  0A75  00AE               	movwf	___ftmul@cntr
 10946  0A76                     l4032:	
 10947  0A76  1C20               	btfss	___ftmul@f1,0
 10948  0A77  2A86               	goto	l4036
 10949  0A78  0823               	movf	___ftmul@f2,w
 10950  0A79  07AB               	addwf	___ftmul@f3_as_product,f
 10951  0A7A  0824               	movf	___ftmul@f2+1,w
 10952  0A7B  1103               	clrz
 10953  0A7C  1803               	skipnc
 10954  0A7D  0A24               	incf	___ftmul@f2+1,w
 10955  0A7E  1D03               	btfss	3,2
 10956  0A7F  07AC               	addwf	___ftmul@f3_as_product+1,f
 10957  0A80  0825               	movf	___ftmul@f2+2,w
 10958  0A81  1103               	clrz
 10959  0A82  1803               	skipnc
 10960  0A83  0A25               	incf	___ftmul@f2+2,w
 10961  0A84  1D03               	btfss	3,2
 10962  0A85  07AD               	addwf	___ftmul@f3_as_product+2,f
 10963  0A86                     l4036:	
 10964  0A86  3001               	movlw	1
 10965  0A87                     u4105:	
 10966  0A87  1003               	clrc
 10967  0A88  0CA2               	rrf	___ftmul@f1+2,f
 10968  0A89  0CA1               	rrf	___ftmul@f1+1,f
 10969  0A8A  0CA0               	rrf	___ftmul@f1,f
 10970  0A8B  3EFF               	addlw	-1
 10971  0A8C  1D03               	skipz
 10972  0A8D  2A87               	goto	u4105
 10973  0A8E  3001               	movlw	1
 10974  0A8F                     u4115:	
 10975  0A8F  1003               	clrc
 10976  0A90  0DA3               	rlf	___ftmul@f2,f
 10977  0A91  0DA4               	rlf	___ftmul@f2+1,f
 10978  0A92  0DA5               	rlf	___ftmul@f2+2,f
 10979  0A93  3EFF               	addlw	-1
 10980  0A94  1D03               	skipz
 10981  0A95  2A8F               	goto	u4115
 10982  0A96  3001               	movlw	1
 10983  0A97  02AE               	subwf	___ftmul@cntr,f
 10984  0A98  1D03               	btfss	3,2
 10985  0A99  2A76               	goto	l4032
 10986  0A9A  3009               	movlw	9
 10987  0A9B  00A6               	movwf	??___ftmul
 10988  0A9C  0826               	movf	??___ftmul,w
 10989  0A9D  00AE               	movwf	___ftmul@cntr
 10990  0A9E                     l4044:	
 10991  0A9E  1C20               	btfss	___ftmul@f1,0
 10992  0A9F  2AAE               	goto	l4048
 10993  0AA0  0823               	movf	___ftmul@f2,w
 10994  0AA1  07AB               	addwf	___ftmul@f3_as_product,f
 10995  0AA2  0824               	movf	___ftmul@f2+1,w
 10996  0AA3  1103               	clrz
 10997  0AA4  1803               	skipnc
 10998  0AA5  0A24               	incf	___ftmul@f2+1,w
 10999  0AA6  1D03               	btfss	3,2
 11000  0AA7  07AC               	addwf	___ftmul@f3_as_product+1,f
 11001  0AA8  0825               	movf	___ftmul@f2+2,w
 11002  0AA9  1103               	clrz
 11003  0AAA  1803               	skipnc
 11004  0AAB  0A25               	incf	___ftmul@f2+2,w
 11005  0AAC  1D03               	btfss	3,2
 11006  0AAD  07AD               	addwf	___ftmul@f3_as_product+2,f
 11007  0AAE                     l4048:	
 11008  0AAE  3001               	movlw	1
 11009  0AAF                     u4155:	
 11010  0AAF  1003               	clrc
 11011  0AB0  0CA2               	rrf	___ftmul@f1+2,f
 11012  0AB1  0CA1               	rrf	___ftmul@f1+1,f
 11013  0AB2  0CA0               	rrf	___ftmul@f1,f
 11014  0AB3  3EFF               	addlw	-1
 11015  0AB4  1D03               	skipz
 11016  0AB5  2AAF               	goto	u4155
 11017  0AB6  3001               	movlw	1
 11018  0AB7                     u4165:	
 11019  0AB7  1003               	clrc
 11020  0AB8  0CAD               	rrf	___ftmul@f3_as_product+2,f
 11021  0AB9  0CAC               	rrf	___ftmul@f3_as_product+1,f
 11022  0ABA  0CAB               	rrf	___ftmul@f3_as_product,f
 11023  0ABB  3EFF               	addlw	-1
 11024  0ABC  1D03               	skipz
 11025  0ABD  2AB7               	goto	u4165
 11026  0ABE  3001               	movlw	1
 11027  0ABF  02AE               	subwf	___ftmul@cntr,f
 11028  0AC0  1D03               	btfss	3,2
 11029  0AC1  2A9E               	goto	l4044
 11030  0AC2  082B               	movf	___ftmul@f3_as_product,w
 11031  0AC3  00F0               	movwf	___ftpack@arg
 11032  0AC4  082C               	movf	___ftmul@f3_as_product+1,w
 11033  0AC5  00F1               	movwf	___ftpack@arg+1
 11034  0AC6  082D               	movf	___ftmul@f3_as_product+2,w
 11035  0AC7  00F2               	movwf	___ftpack@arg+2
 11036  0AC8  082A               	movf	___ftmul@exp,w
 11037  0AC9  00A6               	movwf	??___ftmul
 11038  0ACA  0826               	movf	??___ftmul,w
 11039  0ACB  00F3               	movwf	___ftpack@exp
 11040  0ACC  082F               	movf	___ftmul@sign,w
 11041  0ACD  00A7               	movwf	??___ftmul+1
 11042  0ACE  0827               	movf	??___ftmul+1,w
 11043  0ACF  00F4               	movwf	___ftpack@sign
 11044  0AD0  160A  118A  211D   	fcall	___ftpack
 11045  0AD3  0870               	movf	?___ftpack,w
 11046  0AD4  1283               	bcf	3,5	;RP0=0, select bank0
 11047  0AD5  1303               	bcf	3,6	;RP1=0, select bank0
 11048  0AD6  00A0               	movwf	?___ftmul
 11049  0AD7  0871               	movf	?___ftpack+1,w
 11050  0AD8  00A1               	movwf	?___ftmul+1
 11051  0AD9  0872               	movf	?___ftpack+2,w
 11052  0ADA  00A2               	movwf	?___ftmul+2
 11053  0ADB  0008               	return
 11054  0ADC                     __end_of___ftmul:	
 11055                           
 11056                           	psect	text55
 11057  111D                     __ptext55:	
 11058 ;; *************** function ___ftpack *****************
 11059 ;; Defined at:
 11060 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 11061 ;; Parameters:    Size  Location     Type
 11062 ;;  arg             3    0[COMMON] unsigned um
 11063 ;;  exp             1    3[COMMON] unsigned char 
 11064 ;;  sign            1    4[COMMON] unsigned char 
 11065 ;; Auto vars:     Size  Location     Type
 11066 ;;		None
 11067 ;; Return value:  Size  Location     Type
 11068 ;;                  3    0[COMMON] float 
 11069 ;; Registers used:
 11070 ;;		wreg, status,2, status,0
 11071 ;; Tracked objects:
 11072 ;;		On entry : 0/0
 11073 ;;		On exit  : 0/0
 11074 ;;		Unchanged: 0/0
 11075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11076 ;;      Params:         5       0       0       0       0
 11077 ;;      Locals:         0       0       0       0       0
 11078 ;;      Temps:          3       0       0       0       0
 11079 ;;      Totals:         8       0       0       0       0
 11080 ;;Total ram usage:        8 bytes
 11081 ;; Hardware stack levels used:    1
 11082 ;; This function calls:
 11083 ;;		Nothing
 11084 ;; This function is called by:
 11085 ;;		___ftmul
 11086 ;;		___lwtoft
 11087 ;; This function uses a non-reentrant model
 11088 ;;
 11089                           
 11090                           
 11091                           ;psect for function ___ftpack
 11092  111D                     ___ftpack:	
 11093                           
 11094                           ;incstack = 0
 11095                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 11096  111D  0873               	movf	___ftpack@exp,w
 11097  111E  1903               	btfsc	3,2
 11098  111F  2925               	goto	l3734
 11099  1120  0872               	movf	___ftpack@arg+2,w
 11100  1121  0471               	iorwf	___ftpack@arg+1,w
 11101  1122  0470               	iorwf	___ftpack@arg,w
 11102  1123  1D03               	skipz
 11103  1124  2938               	goto	l3740
 11104  1125                     l3734:	
 11105  1125  3000               	movlw	0
 11106  1126  00F0               	movwf	?___ftpack
 11107  1127  3000               	movlw	0
 11108  1128  00F1               	movwf	?___ftpack+1
 11109  1129  3000               	movlw	0
 11110  112A  00F2               	movwf	?___ftpack+2
 11111  112B  0008               	return
 11112  112C                     l3738:	
 11113  112C  3001               	movlw	1
 11114  112D  00F5               	movwf	??___ftpack
 11115  112E  0875               	movf	??___ftpack,w
 11116  112F  07F3               	addwf	___ftpack@exp,f
 11117  1130  3001               	movlw	1
 11118  1131                     u3825:	
 11119  1131  1003               	clrc
 11120  1132  0CF2               	rrf	___ftpack@arg+2,f
 11121  1133  0CF1               	rrf	___ftpack@arg+1,f
 11122  1134  0CF0               	rrf	___ftpack@arg,f
 11123  1135  3EFF               	addlw	-1
 11124  1136  1D03               	skipz
 11125  1137  2931               	goto	u3825
 11126  1138                     l3740:	
 11127  1138  30FE               	movlw	254
 11128  1139  0572               	andwf	___ftpack@arg+2,w
 11129  113A  1903               	btfsc	3,2
 11130  113B  2953               	goto	l970
 11131  113C  292C               	goto	l3738
 11132  113D                     l3742:	
 11133  113D  3001               	movlw	1
 11134  113E  00F5               	movwf	??___ftpack
 11135  113F  0875               	movf	??___ftpack,w
 11136  1140  07F3               	addwf	___ftpack@exp,f
 11137  1141  3001               	movlw	1
 11138  1142  07F0               	addwf	___ftpack@arg,f
 11139  1143  3000               	movlw	0
 11140  1144  1803               	skipnc
 11141  1145  3001               	movlw	1
 11142  1146  07F1               	addwf	___ftpack@arg+1,f
 11143  1147  3000               	movlw	0
 11144  1148  1803               	skipnc
 11145  1149  3001               	movlw	1
 11146  114A  07F2               	addwf	___ftpack@arg+2,f
 11147  114B  3001               	movlw	1
 11148  114C                     u3845:	
 11149  114C  1003               	clrc
 11150  114D  0CF2               	rrf	___ftpack@arg+2,f
 11151  114E  0CF1               	rrf	___ftpack@arg+1,f
 11152  114F  0CF0               	rrf	___ftpack@arg,f
 11153  1150  3EFF               	addlw	-1
 11154  1151  1D03               	skipz
 11155  1152  294C               	goto	u3845
 11156  1153                     l970:	
 11157  1153  30FF               	movlw	255
 11158  1154  0572               	andwf	___ftpack@arg+2,w
 11159  1155  1903               	btfsc	3,2
 11160  1156  2966               	goto	l3750
 11161  1157  293D               	goto	l3742
 11162  1158                     l3752:	
 11163  1158  3002               	movlw	2
 11164  1159  0273               	subwf	___ftpack@exp,w
 11165  115A  1C03               	btfss	3,0
 11166  115B  2968               	goto	l977
 11167  115C  3001               	movlw	1
 11168  115D  02F3               	subwf	___ftpack@exp,f
 11169  115E  3001               	movlw	1
 11170  115F                     u3865:	
 11171  115F  1003               	clrc
 11172  1160  0DF0               	rlf	___ftpack@arg,f
 11173  1161  0DF1               	rlf	___ftpack@arg+1,f
 11174  1162  0DF2               	rlf	___ftpack@arg+2,f
 11175  1163  3EFF               	addlw	-1
 11176  1164  1D03               	skipz
 11177  1165  295F               	goto	u3865
 11178  1166                     l3750:	
 11179  1166  1FF1               	btfss	___ftpack@arg+1,7
 11180  1167  2958               	goto	l3752
 11181  1168                     l977:	
 11182  1168  1873               	btfsc	___ftpack@exp,0
 11183  1169  2970               	goto	l978
 11184  116A  30FF               	movlw	255
 11185  116B  05F0               	andwf	___ftpack@arg,f
 11186  116C  307F               	movlw	127
 11187  116D  05F1               	andwf	___ftpack@arg+1,f
 11188  116E  30FF               	movlw	255
 11189  116F  05F2               	andwf	___ftpack@arg+2,f
 11190  1170                     l978:	
 11191  1170  1003               	clrc
 11192  1171  0CF3               	rrf	___ftpack@exp,f
 11193  1172  0873               	movf	___ftpack@exp,w
 11194  1173  00F5               	movwf	??___ftpack
 11195  1174  01F6               	clrf	??___ftpack+1
 11196  1175  01F7               	clrf	??___ftpack+2
 11197  1176  3010               	movlw	16
 11198  1177                     u3905:	
 11199  1177  1003               	clrc
 11200  1178  0DF5               	rlf	??___ftpack,f
 11201  1179  0DF6               	rlf	??___ftpack+1,f
 11202  117A  0DF7               	rlf	??___ftpack+2,f
 11203  117B  3EFF               	addlw	-1
 11204  117C  1D03               	skipz
 11205  117D  2977               	goto	u3905
 11206  117E  0875               	movf	??___ftpack,w
 11207  117F  04F0               	iorwf	___ftpack@arg,f
 11208  1180  0876               	movf	??___ftpack+1,w
 11209  1181  04F1               	iorwf	___ftpack@arg+1,f
 11210  1182  0877               	movf	??___ftpack+2,w
 11211  1183  04F2               	iorwf	___ftpack@arg+2,f
 11212  1184  0874               	movf	___ftpack@sign,w
 11213  1185  1903               	btfsc	3,2
 11214  1186  0008               	return
 11215  1187  17F2               	bsf	___ftpack@arg+2,7
 11216  1188  0008               	return
 11217  1189                     __end_of___ftpack:	
 11218                           
 11219                           	psect	text56
 11220  1EA4                     __ptext56:	
 11221 ;; *************** function _Lcd_Write_String *****************
 11222 ;; Defined at:
 11223 ;;		line 103 in file "lcd.h"
 11224 ;; Parameters:    Size  Location     Type
 11225 ;;  a               2    5[COMMON] PTR unsigned char 
 11226 ;;		 -> STR_53(16), STR_52(14), STR_51(16), STR_49(12), 
 11227 ;;		 -> STR_48(14), STR_47(12), text(16), STR_45(8), 
 11228 ;;		 -> STR_44(9), STR_43(15), STR_42(14), STR_40(13), 
 11229 ;;		 -> STR_39(14), STR_37(15), STR_36(15), STR_35(16), 
 11230 ;;		 -> STR_34(13), STR_33(17), STR_32(15), STR_31(14), 
 11231 ;;		 -> STR_30(16), STR_29(6), STR_28(16), STR_27(16), 
 11232 ;;		 -> STR_26(16), STR_25(17), STR_24(12), STR_23(4), 
 11233 ;;		 -> STR_22(4), STR_21(4), STR_20(4), STR_19(4), 
 11234 ;;		 -> STR_18(4), STR_17(4), STR_16(4), STR_15(3), 
 11235 ;;		 -> STR_14(3), txt(20), STR_10(4), number(15), 
 11236 ;; Auto vars:     Size  Location     Type
 11237 ;;  i               2   10[COMMON] int 
 11238 ;; Return value:  Size  Location     Type
 11239 ;;		None               void
 11240 ;; Registers used:
 11241 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 11242 ;; Tracked objects:
 11243 ;;		On entry : 0/0
 11244 ;;		On exit  : 0/0
 11245 ;;		Unchanged: 0/0
 11246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11247 ;;      Params:         2       0       0       0       0
 11248 ;;      Locals:         2       0       0       0       0
 11249 ;;      Temps:          3       0       0       0       0
 11250 ;;      Totals:         7       0       0       0       0
 11251 ;;Total ram usage:        7 bytes
 11252 ;; Hardware stack levels used:    1
 11253 ;; Hardware stack levels required when called:    2
 11254 ;; This function calls:
 11255 ;;		_Lcd_Write_Char
 11256 ;; This function is called by:
 11257 ;;		_GetKeyDate
 11258 ;;		_DisplayTimeToLCD
 11259 ;;		_DisplayDateOnLCD
 11260 ;;		_InitUnit
 11261 ;;		_Settings
 11262 ;;		_CLeakage
 11263 ;;		_CheckSensors
 11264 ;;		_main
 11265 ;;		_avgpow
 11266 ;; This function uses a non-reentrant model
 11267 ;;
 11268                           
 11269                           
 11270                           ;psect for function _Lcd_Write_String
 11271  1EA4                     _Lcd_Write_String:	
 11272                           
 11273                           ;lcd.h: 105: int i;
 11274                           ;lcd.h: 106: for(i=0;a[i]!='\0';i++)
 11275                           
 11276                           ;incstack = 0
 11277                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 11278  1EA4  01FA               	clrf	Lcd_Write_String@i
 11279  1EA5  01FB               	clrf	Lcd_Write_String@i+1
 11280  1EA6                     l2950:	
 11281  1EA6  087A               	movf	Lcd_Write_String@i,w
 11282  1EA7  0775               	addwf	Lcd_Write_String@a,w
 11283  1EA8  00F8               	movwf	??_Lcd_Write_String+1
 11284  1EA9  0876               	movf	Lcd_Write_String@a+1,w
 11285  1EAA  00F7               	movwf	??_Lcd_Write_String
 11286  1EAB  1803               	skipnc
 11287  1EAC  0AF7               	incf	??_Lcd_Write_String,f
 11288  1EAD  1BFA               	btfsc	Lcd_Write_String@i,7
 11289  1EAE  03F7               	decf	??_Lcd_Write_String,f
 11290  1EAF  0877               	movf	??_Lcd_Write_String,w
 11291  1EB0  00F9               	movwf	??_Lcd_Write_String+2
 11292  1EB1  0879               	movf	??_Lcd_Write_String+2,w
 11293  1EB2  1283               	bcf	3,5	;RP0=0, select bank0
 11294  1EB3  1303               	bcf	3,6	;RP1=0, select bank0
 11295  1EB4  00FF               	movwf	127
 11296  1EB5  0878               	movf	??_Lcd_Write_String+1,w
 11297  1EB6  0084               	movwf	4
 11298  1EB7  120A  158A  2000  160A  158A  	fcall	stringtab
 11299  1EBC  3A00               	xorlw	0
 11300  1EBD  1903               	btfsc	3,2
 11301  1EBE  0008               	return
 11302                           
 11303                           ;lcd.h: 107: Lcd_Write_Char(a[i]);
 11304  1EBF  087A               	movf	Lcd_Write_String@i,w
 11305  1EC0  0775               	addwf	Lcd_Write_String@a,w
 11306  1EC1  00F8               	movwf	??_Lcd_Write_String+1
 11307  1EC2  0876               	movf	Lcd_Write_String@a+1,w
 11308  1EC3  00F7               	movwf	??_Lcd_Write_String
 11309  1EC4  1803               	skipnc
 11310  1EC5  0AF7               	incf	??_Lcd_Write_String,f
 11311  1EC6  1BFA               	btfsc	Lcd_Write_String@i,7
 11312  1EC7  03F7               	decf	??_Lcd_Write_String,f
 11313  1EC8  0877               	movf	??_Lcd_Write_String,w
 11314  1EC9  00F9               	movwf	??_Lcd_Write_String+2
 11315  1ECA  0879               	movf	??_Lcd_Write_String+2,w
 11316  1ECB  1283               	bcf	3,5	;RP0=0, select bank0
 11317  1ECC  1303               	bcf	3,6	;RP1=0, select bank0
 11318  1ECD  00FF               	movwf	127
 11319  1ECE  0878               	movf	??_Lcd_Write_String+1,w
 11320  1ECF  0084               	movwf	4
 11321  1ED0  120A  158A  2000  160A  158A  	fcall	stringtab
 11322  1ED5  160A  158A  262F  160A  158A  	fcall	_Lcd_Write_Char
 11323  1EDA  3001               	movlw	1
 11324  1EDB  07FA               	addwf	Lcd_Write_String@i,f
 11325  1EDC  1803               	skipnc
 11326  1EDD  0AFB               	incf	Lcd_Write_String@i+1,f
 11327  1EDE  3000               	movlw	0
 11328  1EDF  07FB               	addwf	Lcd_Write_String@i+1,f
 11329  1EE0  2EA6               	goto	l2950
 11330  1EE1                     __end_of_Lcd_Write_String:	
 11331                           
 11332                           	psect	text57
 11333  1E2F                     __ptext57:	
 11334 ;; *************** function _Lcd_Write_Char *****************
 11335 ;; Defined at:
 11336 ;;		line 87 in file "lcd.h"
 11337 ;; Parameters:    Size  Location     Type
 11338 ;;  a               1    wreg     unsigned char 
 11339 ;; Auto vars:     Size  Location     Type
 11340 ;;  a               1    4[COMMON] unsigned char 
 11341 ;;  y               1    3[COMMON] unsigned char 
 11342 ;;  temp            1    2[COMMON] unsigned char 
 11343 ;; Return value:  Size  Location     Type
 11344 ;;		None               void
 11345 ;; Registers used:
 11346 ;;		wreg, status,2, status,0, pclath, cstack
 11347 ;; Tracked objects:
 11348 ;;		On entry : 0/0
 11349 ;;		On exit  : 0/0
 11350 ;;		Unchanged: 0/0
 11351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11352 ;;      Params:         0       0       0       0       0
 11353 ;;      Locals:         3       0       0       0       0
 11354 ;;      Temps:          1       0       0       0       0
 11355 ;;      Totals:         4       0       0       0       0
 11356 ;;Total ram usage:        4 bytes
 11357 ;; Hardware stack levels used:    1
 11358 ;; Hardware stack levels required when called:    1
 11359 ;; This function calls:
 11360 ;;		_Lcd_Port
 11361 ;; This function is called by:
 11362 ;;		_Lcd_Write_String
 11363 ;;		_DisplayTimeToLCD
 11364 ;;		_DisplayDateOnLCD
 11365 ;;		_Settings
 11366 ;; This function uses a non-reentrant model
 11367 ;;
 11368                           
 11369                           
 11370                           ;psect for function _Lcd_Write_Char
 11371  1E2F                     _Lcd_Write_Char:	
 11372                           
 11373                           ;incstack = 0
 11374                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
 11375                           ;Lcd_Write_Char@a stored from wreg
 11376  1E2F  00F4               	movwf	Lcd_Write_Char@a
 11377                           
 11378                           ;lcd.h: 89: char temp,y;
 11379                           ;lcd.h: 90: temp = a&0x0F;
 11380  1E30  0874               	movf	Lcd_Write_Char@a,w
 11381  1E31  390F               	andlw	15
 11382  1E32  00F1               	movwf	??_Lcd_Write_Char
 11383  1E33  0871               	movf	??_Lcd_Write_Char,w
 11384  1E34  00F2               	movwf	Lcd_Write_Char@temp
 11385                           
 11386                           ;lcd.h: 91: y = a&0xF0;
 11387  1E35  0874               	movf	Lcd_Write_Char@a,w
 11388  1E36  39F0               	andlw	240
 11389  1E37  00F1               	movwf	??_Lcd_Write_Char
 11390  1E38  0871               	movf	??_Lcd_Write_Char,w
 11391  1E39  00F3               	movwf	Lcd_Write_Char@y
 11392                           
 11393                           ;lcd.h: 92: RD2 = 1;
 11394  1E3A  1283               	bcf	3,5	;RP0=0, select bank0
 11395  1E3B  1303               	bcf	3,6	;RP1=0, select bank0
 11396  1E3C  1508               	bsf	8,2	;volatile
 11397                           
 11398                           ;lcd.h: 93: Lcd_Port(y>>4);
 11399  1E3D  0873               	movf	Lcd_Write_Char@y,w
 11400  1E3E  00F1               	movwf	??_Lcd_Write_Char
 11401  1E3F  3004               	movlw	4
 11402  1E40                     u2265:	
 11403  1E40  1003               	clrc
 11404  1E41  0CF1               	rrf	??_Lcd_Write_Char,f
 11405  1E42  3EFF               	addlw	-1
 11406  1E43  1D03               	skipz
 11407  1E44  2E40               	goto	u2265
 11408  1E45  0871               	movf	??_Lcd_Write_Char,w
 11409  1E46  160A  158A  239A  160A  158A  	fcall	_Lcd_Port
 11410                           
 11411                           ;lcd.h: 94: RD3 = 1;
 11412  1E4B  1283               	bcf	3,5	;RP0=0, select bank0
 11413  1E4C  1303               	bcf	3,6	;RP1=0, select bank0
 11414  1E4D  1588               	bsf	8,3	;volatile
 11415                           
 11416                           ;lcd.h: 95: _delay((unsigned long)((40)*(20000000/4000000.0)));
 11417  1E4E  3042               	movlw	66
 11418  1E4F  00F1               	movwf	??_Lcd_Write_Char
 11419  1E50                     u4937:	
 11420  1E50  0BF1               	decfsz	??_Lcd_Write_Char,f
 11421  1E51  2E50               	goto	u4937
 11422  1E52  0000               	nop
 11423                           
 11424                           ;lcd.h: 96: RD3 = 0;
 11425  1E53  1283               	bcf	3,5	;RP0=0, select bank0
 11426  1E54  1303               	bcf	3,6	;RP1=0, select bank0
 11427  1E55  1188               	bcf	8,3	;volatile
 11428                           
 11429                           ;lcd.h: 97: Lcd_Port(temp);
 11430  1E56  0872               	movf	Lcd_Write_Char@temp,w
 11431  1E57  160A  158A  239A  160A  158A  	fcall	_Lcd_Port
 11432                           
 11433                           ;lcd.h: 98: RD3 = 1;
 11434  1E5C  1283               	bcf	3,5	;RP0=0, select bank0
 11435  1E5D  1303               	bcf	3,6	;RP1=0, select bank0
 11436  1E5E  1588               	bsf	8,3	;volatile
 11437                           
 11438                           ;lcd.h: 99: _delay((unsigned long)((40)*(20000000/4000000.0)));
 11439  1E5F  3042               	movlw	66
 11440  1E60  00F1               	movwf	??_Lcd_Write_Char
 11441  1E61                     u4947:	
 11442  1E61  0BF1               	decfsz	??_Lcd_Write_Char,f
 11443  1E62  2E61               	goto	u4947
 11444  1E63  0000               	nop
 11445                           
 11446                           ;lcd.h: 100: RD3 = 0;
 11447  1E64  1283               	bcf	3,5	;RP0=0, select bank0
 11448  1E65  1303               	bcf	3,6	;RP1=0, select bank0
 11449  1E66  1188               	bcf	8,3	;volatile
 11450  1E67  0008               	return
 11451  1E68                     __end_of_Lcd_Write_Char:	
 11452                           
 11453                           	psect	text58
 11454  1F6B                     __ptext58:	
 11455 ;; *************** function _Lcd_Set_Cursor *****************
 11456 ;; Defined at:
 11457 ;;		line 47 in file "lcd.h"
 11458 ;; Parameters:    Size  Location     Type
 11459 ;;  a               1    wreg     unsigned char 
 11460 ;;  b               1    4[COMMON] unsigned char 
 11461 ;; Auto vars:     Size  Location     Type
 11462 ;;  a               1    7[COMMON] unsigned char 
 11463 ;;  temp            1   10[COMMON] unsigned char 
 11464 ;;  y               1    9[COMMON] unsigned char 
 11465 ;;  z               1    8[COMMON] unsigned char 
 11466 ;; Return value:  Size  Location     Type
 11467 ;;		None               void
 11468 ;; Registers used:
 11469 ;;		wreg, status,2, status,0, pclath, cstack
 11470 ;; Tracked objects:
 11471 ;;		On entry : 0/0
 11472 ;;		On exit  : 0/0
 11473 ;;		Unchanged: 0/0
 11474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11475 ;;      Params:         1       0       0       0       0
 11476 ;;      Locals:         4       0       0       0       0
 11477 ;;      Temps:          2       0       0       0       0
 11478 ;;      Totals:         7       0       0       0       0
 11479 ;;Total ram usage:        7 bytes
 11480 ;; Hardware stack levels used:    1
 11481 ;; Hardware stack levels required when called:    2
 11482 ;; This function calls:
 11483 ;;		_Lcd_Cmd
 11484 ;; This function is called by:
 11485 ;;		_DisplayTimeToLCD
 11486 ;;		_DisplayDateOnLCD
 11487 ;;		_InitUnit
 11488 ;;		_Settings
 11489 ;;		_CLeakage
 11490 ;;		_CheckSensors
 11491 ;;		_main
 11492 ;;		_avgpow
 11493 ;; This function uses a non-reentrant model
 11494 ;;
 11495                           
 11496                           
 11497                           ;psect for function _Lcd_Set_Cursor
 11498  1F6B                     _Lcd_Set_Cursor:	
 11499                           
 11500                           ;incstack = 0
 11501                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
 11502                           ;Lcd_Set_Cursor@a stored from wreg
 11503  1F6B  00F7               	movwf	Lcd_Set_Cursor@a
 11504                           
 11505                           ;lcd.h: 49: char temp,z,y;
 11506                           ;lcd.h: 50: if(a == 1)
 11507  1F6C  0377               	decf	Lcd_Set_Cursor@a,w
 11508  1F6D  1D03               	btfss	3,2
 11509  1F6E  2F90               	goto	l2934
 11510                           
 11511                           ;lcd.h: 51: {
 11512                           ;lcd.h: 52: temp = 0x80 + b - 1;
 11513  1F6F  0874               	movf	Lcd_Set_Cursor@b,w
 11514  1F70  3E7F               	addlw	127
 11515  1F71  00F5               	movwf	??_Lcd_Set_Cursor
 11516  1F72  0875               	movf	??_Lcd_Set_Cursor,w
 11517  1F73  00FA               	movwf	Lcd_Set_Cursor@temp
 11518                           
 11519                           ;lcd.h: 53: z = temp>>4;
 11520  1F74  087A               	movf	Lcd_Set_Cursor@temp,w
 11521  1F75  00F5               	movwf	??_Lcd_Set_Cursor
 11522  1F76  3004               	movlw	4
 11523  1F77                     u2505:	
 11524  1F77  1003               	clrc
 11525  1F78  0CF5               	rrf	??_Lcd_Set_Cursor,f
 11526  1F79  3EFF               	addlw	-1
 11527  1F7A  1D03               	skipz
 11528  1F7B  2F77               	goto	u2505
 11529  1F7C  0875               	movf	??_Lcd_Set_Cursor,w
 11530  1F7D  00F6               	movwf	??_Lcd_Set_Cursor+1
 11531  1F7E  0876               	movf	??_Lcd_Set_Cursor+1,w
 11532  1F7F  00F8               	movwf	Lcd_Set_Cursor@z
 11533                           
 11534                           ;lcd.h: 54: y = temp & 0x0F;
 11535  1F80  087A               	movf	Lcd_Set_Cursor@temp,w
 11536  1F81  390F               	andlw	15
 11537  1F82  00F5               	movwf	??_Lcd_Set_Cursor
 11538  1F83  0875               	movf	??_Lcd_Set_Cursor,w
 11539  1F84  00F9               	movwf	Lcd_Set_Cursor@y
 11540                           
 11541                           ;lcd.h: 55: Lcd_Cmd(z);
 11542  1F85  0878               	movf	Lcd_Set_Cursor@z,w
 11543  1F86  160A  158A  23B4  160A  158A  	fcall	_Lcd_Cmd
 11544                           
 11545                           ;lcd.h: 56: Lcd_Cmd(y);
 11546  1F8B  0879               	movf	Lcd_Set_Cursor@y,w
 11547  1F8C  160A  158A  23B4   	fcall	_Lcd_Cmd
 11548                           
 11549                           ;lcd.h: 57: }
 11550  1F8F  0008               	return
 11551  1F90                     l2934:	
 11552                           
 11553                           ;lcd.h: 58: else if(a == 2)
 11554  1F90  3002               	movlw	2
 11555  1F91  0677               	xorwf	Lcd_Set_Cursor@a,w
 11556  1F92  1D03               	btfss	3,2
 11557  1F93  0008               	return
 11558                           
 11559                           ;lcd.h: 59: {
 11560                           ;lcd.h: 60: temp = 0xC0 + b - 1;
 11561  1F94  0874               	movf	Lcd_Set_Cursor@b,w
 11562  1F95  3EBF               	addlw	191
 11563  1F96  00F5               	movwf	??_Lcd_Set_Cursor
 11564  1F97  0875               	movf	??_Lcd_Set_Cursor,w
 11565  1F98  00FA               	movwf	Lcd_Set_Cursor@temp
 11566                           
 11567                           ;lcd.h: 61: z = temp>>4;
 11568  1F99  087A               	movf	Lcd_Set_Cursor@temp,w
 11569  1F9A  00F5               	movwf	??_Lcd_Set_Cursor
 11570  1F9B  3004               	movlw	4
 11571  1F9C                     u2525:	
 11572  1F9C  1003               	clrc
 11573  1F9D  0CF5               	rrf	??_Lcd_Set_Cursor,f
 11574  1F9E  3EFF               	addlw	-1
 11575  1F9F  1D03               	skipz
 11576  1FA0  2F9C               	goto	u2525
 11577  1FA1  0875               	movf	??_Lcd_Set_Cursor,w
 11578  1FA2  00F6               	movwf	??_Lcd_Set_Cursor+1
 11579  1FA3  0876               	movf	??_Lcd_Set_Cursor+1,w
 11580  1FA4  00F8               	movwf	Lcd_Set_Cursor@z
 11581                           
 11582                           ;lcd.h: 62: y = temp & 0x0F;
 11583  1FA5  087A               	movf	Lcd_Set_Cursor@temp,w
 11584  1FA6  390F               	andlw	15
 11585  1FA7  00F5               	movwf	??_Lcd_Set_Cursor
 11586  1FA8  0875               	movf	??_Lcd_Set_Cursor,w
 11587  1FA9  00F9               	movwf	Lcd_Set_Cursor@y
 11588                           
 11589                           ;lcd.h: 63: Lcd_Cmd(z);
 11590  1FAA  0878               	movf	Lcd_Set_Cursor@z,w
 11591  1FAB  160A  158A  23B4  160A  158A  	fcall	_Lcd_Cmd
 11592                           
 11593                           ;lcd.h: 64: Lcd_Cmd(y);
 11594  1FB0  0879               	movf	Lcd_Set_Cursor@y,w
 11595  1FB1  160A  158A  23B4   	fcall	_Lcd_Cmd
 11596  1FB4  0008               	return
 11597  1FB5                     __end_of_Lcd_Set_Cursor:	
 11598                           
 11599                           	psect	text59
 11600  1BB4                     __ptext59:	
 11601 ;; *************** function _Lcd_Cmd *****************
 11602 ;; Defined at:
 11603 ;;		line 32 in file "lcd.h"
 11604 ;; Parameters:    Size  Location     Type
 11605 ;;  a               1    wreg     unsigned char 
 11606 ;; Auto vars:     Size  Location     Type
 11607 ;;  a               1    3[COMMON] unsigned char 
 11608 ;; Return value:  Size  Location     Type
 11609 ;;		None               void
 11610 ;; Registers used:
 11611 ;;		wreg, status,2, status,0, pclath, cstack
 11612 ;; Tracked objects:
 11613 ;;		On entry : 0/0
 11614 ;;		On exit  : 0/0
 11615 ;;		Unchanged: 0/0
 11616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11617 ;;      Params:         0       0       0       0       0
 11618 ;;      Locals:         1       0       0       0       0
 11619 ;;      Temps:          2       0       0       0       0
 11620 ;;      Totals:         3       0       0       0       0
 11621 ;;Total ram usage:        3 bytes
 11622 ;; Hardware stack levels used:    1
 11623 ;; Hardware stack levels required when called:    1
 11624 ;; This function calls:
 11625 ;;		_Lcd_Port
 11626 ;; This function is called by:
 11627 ;;		_Lcd_Clear
 11628 ;;		_Lcd_Set_Cursor
 11629 ;;		_Lcd_Init
 11630 ;;		_Lcd_Shift_Right
 11631 ;;		_Lcd_Shift_Left
 11632 ;; This function uses a non-reentrant model
 11633 ;;
 11634                           
 11635                           
 11636                           ;psect for function _Lcd_Cmd
 11637  1BB4                     _Lcd_Cmd:	
 11638                           
 11639                           ;incstack = 0
 11640                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
 11641                           ;Lcd_Cmd@a stored from wreg
 11642  1BB4  00F3               	movwf	Lcd_Cmd@a
 11643                           
 11644                           ;lcd.h: 34: RD2 = 0;
 11645  1BB5  1283               	bcf	3,5	;RP0=0, select bank0
 11646  1BB6  1303               	bcf	3,6	;RP1=0, select bank0
 11647  1BB7  1108               	bcf	8,2	;volatile
 11648                           
 11649                           ;lcd.h: 35: Lcd_Port(a);
 11650  1BB8  0873               	movf	Lcd_Cmd@a,w
 11651  1BB9  160A  158A  239A  160A  158A  	fcall	_Lcd_Port
 11652                           
 11653                           ;lcd.h: 36: RD3 = 1;
 11654  1BBE  1283               	bcf	3,5	;RP0=0, select bank0
 11655  1BBF  1303               	bcf	3,6	;RP1=0, select bank0
 11656  1BC0  1588               	bsf	8,3	;volatile
 11657                           
 11658                           ;lcd.h: 37: _delay((unsigned long)((4)*(20000000/4000.0)));
 11659  1BC1  301A               	movlw	26
 11660  1BC2  00F2               	movwf	??_Lcd_Cmd+1
 11661  1BC3  30F8               	movlw	248
 11662  1BC4  00F1               	movwf	??_Lcd_Cmd
 11663  1BC5                     u4957:	
 11664  1BC5  0BF1               	decfsz	??_Lcd_Cmd,f
 11665  1BC6  2BC5               	goto	u4957
 11666  1BC7  0BF2               	decfsz	??_Lcd_Cmd+1,f
 11667  1BC8  2BC5               	goto	u4957
 11668  1BC9  0000               	nop
 11669                           
 11670                           ;lcd.h: 38: RD3 = 0;
 11671  1BCA  1283               	bcf	3,5	;RP0=0, select bank0
 11672  1BCB  1303               	bcf	3,6	;RP1=0, select bank0
 11673  1BCC  1188               	bcf	8,3	;volatile
 11674  1BCD  0008               	return
 11675  1BCE                     __end_of_Lcd_Cmd:	
 11676                           
 11677                           	psect	text60
 11678  1B9A                     __ptext60:	
 11679 ;; *************** function _Lcd_Port *****************
 11680 ;; Defined at:
 11681 ;;		line 10 in file "lcd.h"
 11682 ;; Parameters:    Size  Location     Type
 11683 ;;  a               1    wreg     unsigned char 
 11684 ;; Auto vars:     Size  Location     Type
 11685 ;;  a               1    0[COMMON] unsigned char 
 11686 ;; Return value:  Size  Location     Type
 11687 ;;		None               void
 11688 ;; Registers used:
 11689 ;;		wreg
 11690 ;; Tracked objects:
 11691 ;;		On entry : 0/0
 11692 ;;		On exit  : 0/0
 11693 ;;		Unchanged: 0/0
 11694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11695 ;;      Params:         0       0       0       0       0
 11696 ;;      Locals:         1       0       0       0       0
 11697 ;;      Temps:          0       0       0       0       0
 11698 ;;      Totals:         1       0       0       0       0
 11699 ;;Total ram usage:        1 bytes
 11700 ;; Hardware stack levels used:    1
 11701 ;; This function calls:
 11702 ;;		Nothing
 11703 ;; This function is called by:
 11704 ;;		_Lcd_Cmd
 11705 ;;		_Lcd_Init
 11706 ;;		_Lcd_Write_Char
 11707 ;; This function uses a non-reentrant model
 11708 ;;
 11709                           
 11710                           
 11711                           ;psect for function _Lcd_Port
 11712  1B9A                     _Lcd_Port:	
 11713                           
 11714                           ;incstack = 0
 11715                           ; Regs used in _Lcd_Port: [wreg]
 11716                           ;Lcd_Port@a stored from wreg
 11717  1B9A  00F0               	movwf	Lcd_Port@a
 11718                           
 11719                           ;lcd.h: 12: if(a & 1)
 11720  1B9B  1C70               	btfss	Lcd_Port@a,0
 11721  1B9C  2BA1               	goto	l147
 11722                           
 11723                           ;lcd.h: 13: RD4 = 1;
 11724  1B9D  1283               	bcf	3,5	;RP0=0, select bank0
 11725  1B9E  1303               	bcf	3,6	;RP1=0, select bank0
 11726  1B9F  1608               	bsf	8,4	;volatile
 11727  1BA0  2BA4               	goto	l148
 11728  1BA1                     l147:	
 11729                           
 11730                           ;lcd.h: 14: else
 11731                           ;lcd.h: 15: RD4 = 0;
 11732  1BA1  1283               	bcf	3,5	;RP0=0, select bank0
 11733  1BA2  1303               	bcf	3,6	;RP1=0, select bank0
 11734  1BA3  1208               	bcf	8,4	;volatile
 11735  1BA4                     l148:	
 11736                           
 11737                           ;lcd.h: 17: if(a & 2)
 11738  1BA4  1CF0               	btfss	Lcd_Port@a,1
 11739  1BA5  2BA8               	goto	l149
 11740                           
 11741                           ;lcd.h: 18: RD5 = 1;
 11742  1BA6  1688               	bsf	8,5	;volatile
 11743  1BA7  2BA9               	goto	l150
 11744  1BA8                     l149:	
 11745                           
 11746                           ;lcd.h: 19: else
 11747                           ;lcd.h: 20: RD5 = 0;
 11748  1BA8  1288               	bcf	8,5	;volatile
 11749  1BA9                     l150:	
 11750                           
 11751                           ;lcd.h: 22: if(a & 4)
 11752  1BA9  1D70               	btfss	Lcd_Port@a,2
 11753  1BAA  2BAD               	goto	l151
 11754                           
 11755                           ;lcd.h: 23: RD6 = 1;
 11756  1BAB  1708               	bsf	8,6	;volatile
 11757  1BAC  2BAE               	goto	l152
 11758  1BAD                     l151:	
 11759                           
 11760                           ;lcd.h: 24: else
 11761                           ;lcd.h: 25: RD6 = 0;
 11762  1BAD  1308               	bcf	8,6	;volatile
 11763  1BAE                     l152:	
 11764                           
 11765                           ;lcd.h: 27: if(a & 8)
 11766  1BAE  1DF0               	btfss	Lcd_Port@a,3
 11767  1BAF  2BB2               	goto	l153
 11768                           
 11769                           ;lcd.h: 28: RD7 = 1;
 11770  1BB0  1788               	bsf	8,7	;volatile
 11771  1BB1  0008               	return
 11772  1BB2                     l153:	
 11773                           
 11774                           ;lcd.h: 29: else
 11775                           ;lcd.h: 30: RD7 = 0;
 11776  1BB2  1388               	bcf	8,7	;volatile
 11777  1BB3  0008               	return
 11778  1BB4                     __end_of_Lcd_Port:	
 11779                           
 11780                           	psect	text61
 11781  1C8F                     __ptext61:	
 11782 ;; *************** function _ADC_Read *****************
 11783 ;; Defined at:
 11784 ;;		line 14 in file "ADC.h"
 11785 ;; Parameters:    Size  Location     Type
 11786 ;;  channel         1    wreg     unsigned char 
 11787 ;; Auto vars:     Size  Location     Type
 11788 ;;  channel         1    4[COMMON] unsigned char 
 11789 ;; Return value:  Size  Location     Type
 11790 ;;                  2    0[COMMON] unsigned int 
 11791 ;; Registers used:
 11792 ;;		wreg, status,2, status,0
 11793 ;; Tracked objects:
 11794 ;;		On entry : 0/0
 11795 ;;		On exit  : 0/0
 11796 ;;		Unchanged: 0/0
 11797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11798 ;;      Params:         2       0       0       0       0
 11799 ;;      Locals:         1       0       0       0       0
 11800 ;;      Temps:          2       0       0       0       0
 11801 ;;      Totals:         5       0       0       0       0
 11802 ;;Total ram usage:        5 bytes
 11803 ;; Hardware stack levels used:    1
 11804 ;; This function calls:
 11805 ;;		Nothing
 11806 ;; This function is called by:
 11807 ;;		_CLeakage
 11808 ;; This function uses a non-reentrant model
 11809 ;;
 11810                           
 11811                           
 11812                           ;psect for function _ADC_Read
 11813  1C8F                     _ADC_Read:	
 11814                           
 11815                           ;incstack = 0
 11816                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
 11817                           ;ADC_Read@channel stored from wreg
 11818  1C8F  00F4               	movwf	ADC_Read@channel
 11819                           
 11820                           ;ADC.h: 16: if(channel > 7)
 11821  1C90  3008               	movlw	8
 11822  1C91  0274               	subwf	ADC_Read@channel,w
 11823  1C92  1C03               	skipc
 11824  1C93  2C97               	goto	l3818
 11825                           
 11826                           ;ADC.h: 17: return 0;
 11827  1C94  01F0               	clrf	?_ADC_Read
 11828  1C95  01F1               	clrf	?_ADC_Read+1
 11829  1C96  0008               	return
 11830  1C97                     l3818:	
 11831                           
 11832                           ;ADC.h: 19: ADCON0 &= 0xC5;
 11833  1C97  30C5               	movlw	197
 11834  1C98  00F2               	movwf	??_ADC_Read
 11835  1C99  0872               	movf	??_ADC_Read,w
 11836  1C9A  1283               	bcf	3,5	;RP0=0, select bank0
 11837  1C9B  1303               	bcf	3,6	;RP1=0, select bank0
 11838  1C9C  059F               	andwf	31,f	;volatile
 11839                           
 11840                           ;ADC.h: 20: ADCON0 |= channel<<3;
 11841  1C9D  0874               	movf	ADC_Read@channel,w
 11842  1C9E  00F2               	movwf	??_ADC_Read
 11843  1C9F  3002               	movlw	2
 11844  1CA0                     u3955:	
 11845  1CA0  1003               	clrc
 11846  1CA1  0DF2               	rlf	??_ADC_Read,f
 11847  1CA2  3EFF               	addlw	-1
 11848  1CA3  1D03               	skipz
 11849  1CA4  2CA0               	goto	u3955
 11850  1CA5  1003               	clrc
 11851  1CA6  0D72               	rlf	??_ADC_Read,w
 11852  1CA7  00F3               	movwf	??_ADC_Read+1
 11853  1CA8  0873               	movf	??_ADC_Read+1,w
 11854  1CA9  049F               	iorwf	31,f	;volatile
 11855                           
 11856                           ;ADC.h: 21: _delay((unsigned long)((2)*(8000000/4000.0)));
 11857  1CAA  3006               	movlw	6
 11858  1CAB  00F3               	movwf	??_ADC_Read+1
 11859  1CAC  3030               	movlw	48
 11860  1CAD  00F2               	movwf	??_ADC_Read
 11861  1CAE                     u4967:	
 11862  1CAE  0BF2               	decfsz	??_ADC_Read,f
 11863  1CAF  2CAE               	goto	u4967
 11864  1CB0  0BF3               	decfsz	??_ADC_Read+1,f
 11865  1CB1  2CAE               	goto	u4967
 11866  1CB2  0000               	nop
 11867                           
 11868                           ;ADC.h: 22: GO_nDONE = 1;
 11869  1CB3  1283               	bcf	3,5	;RP0=0, select bank0
 11870  1CB4  1303               	bcf	3,6	;RP1=0, select bank0
 11871  1CB5  151F               	bsf	31,2	;volatile
 11872  1CB6                     l390:	
 11873                           ;ADC.h: 23: while(GO_nDONE);
 11874                           
 11875  1CB6  191F               	btfsc	31,2	;volatile
 11876  1CB7  2CB6               	goto	l390
 11877                           
 11878                           ;ADC.h: 24: return ((ADRESH<<8)+ADRESL);
 11879  1CB8  081E               	movf	30,w	;volatile
 11880  1CB9  00F1               	movwf	?_ADC_Read+1
 11881  1CBA  1683               	bsf	3,5	;RP0=1, select bank1
 11882  1CBB  1303               	bcf	3,6	;RP1=0, select bank1
 11883  1CBC  081E               	movf	30,w	;volatile
 11884  1CBD  00F0               	movwf	?_ADC_Read
 11885  1CBE  0008               	return
 11886  1CBF                     __end_of_ADC_Read:	
 11887                           
 11888                           	psect	text62
 11889  1B0D                     __ptext62:	
 11890 ;; *************** function _ADC_Init *****************
 11891 ;; Defined at:
 11892 ;;		line 8 in file "ADC.h"
 11893 ;; Parameters:    Size  Location     Type
 11894 ;;		None
 11895 ;; Auto vars:     Size  Location     Type
 11896 ;;		None
 11897 ;; Return value:  Size  Location     Type
 11898 ;;		None               void
 11899 ;; Registers used:
 11900 ;;		wreg
 11901 ;; Tracked objects:
 11902 ;;		On entry : 0/0
 11903 ;;		On exit  : 0/0
 11904 ;;		Unchanged: 0/0
 11905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11906 ;;      Params:         0       0       0       0       0
 11907 ;;      Locals:         0       0       0       0       0
 11908 ;;      Temps:          0       0       0       0       0
 11909 ;;      Totals:         0       0       0       0       0
 11910 ;;Total ram usage:        0 bytes
 11911 ;; Hardware stack levels used:    1
 11912 ;; This function calls:
 11913 ;;		Nothing
 11914 ;; This function is called by:
 11915 ;;		_InitUnit
 11916 ;;		_CLeakage
 11917 ;; This function uses a non-reentrant model
 11918 ;;
 11919                           
 11920                           
 11921                           ;psect for function _ADC_Init
 11922  1B0D                     _ADC_Init:	
 11923                           
 11924                           ;ADC.h: 10: ADCON0 = 0x81;
 11925                           
 11926                           ;incstack = 0
 11927                           ; Regs used in _ADC_Init: [wreg]
 11928  1B0D  3081               	movlw	129
 11929  1B0E  1283               	bcf	3,5	;RP0=0, select bank0
 11930  1B0F  1303               	bcf	3,6	;RP1=0, select bank0
 11931  1B10  009F               	movwf	31	;volatile
 11932                           
 11933                           ;ADC.h: 11: ADCON1 = 0x82;
 11934  1B11  3082               	movlw	130
 11935  1B12  1683               	bsf	3,5	;RP0=1, select bank1
 11936  1B13  1303               	bcf	3,6	;RP1=0, select bank1
 11937  1B14  009F               	movwf	31	;volatile
 11938  1B15  0008               	return
 11939  1B16                     __end_of_ADC_Init:	
 11940  007E                     btemp	set	126	;btemp
 11941  007E                     wtemp	set	126
 11942  007E                     wtemp0	set	126
 11943  0080                     wtemp1	set	128
 11944  0082                     wtemp2	set	130
 11945  0084                     wtemp3	set	132
 11946  0086                     wtemp4	set	134
 11947  0088                     wtemp5	set	136
 11948  007F                     wtemp6	set	127
 11949  007E                     ttemp	set	126
 11950  007E                     ttemp0	set	126
 11951  0081                     ttemp1	set	129
 11952  0084                     ttemp2	set	132
 11953  0087                     ttemp3	set	135
 11954  007F                     ttemp4	set	127
 11955  007E                     ltemp	set	126
 11956  007E                     ltemp0	set	126
 11957  0082                     ltemp1	set	130
 11958  0086                     ltemp2	set	134
 11959  0080                     ltemp3	set	128


Data Sizes:
    Strings     492
    Constant    10
    Data        0
    BSS         151
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     42      79
    BANK1            80      0      78
    BANK3            96      0      36
    BANK2            96      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_9(CODE[4]), STR_8(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), 
		 -> STR_5(CODE[4]), STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[3]), 
		 -> STR_1(CODE[3]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 10
		 -> DAY(BANK1[10]), ap(BANK1[5]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 10
		 -> DAY(BANK1[10]), ap(BANK1[5]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), cDAY(BANK1[5]), YY(BANK1[5]), MM(BANK1[5]), 
		 -> DD(BANK1[5]), ss(BANK1[5]), mm(BANK1[5]), hh(BANK1[5]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_54(CODE[16]), STR_50(CODE[13]), STR_46(CODE[9]), STR_41(CODE[12]), 
		 -> STR_38(CODE[12]), STR_12(CODE[14]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_55(CODE[7]), DAY(BANK1[10]), YY(BANK1[5]), MM(BANK1[5]), 
		 -> DD(BANK1[5]), ap(BANK1[5]), ss(BANK1[5]), mm(BANK1[5]), 
		 -> hh(BANK1[5]), number(BANK1[15]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> text(BANK3[16]), txt(BANK3[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Read_Bytes_From_DS1307_RTC@pData	PTR unsigned char  size(1) Largest target is 4
		 -> pRTCArray(BANK0[4]), 

    Write_Bytes_To_DS1307_RTC@pData	PTR unsigned char  size(1) Largest target is 4
		 -> pRTCArray(BANK0[4]), 

    sp__Get_DS1307_RTC_Date	PTR unsigned char  size(1) Largest target is 4
		 -> pRTCArray(BANK0[4]), 

    sp__Get_DS1307_RTC_Time	PTR unsigned char  size(1) Largest target is 4
		 -> pRTCArray(BANK0[4]), 

    DisplayDateOnLCD@pDateArray	PTR unsigned char  size(1) Largest target is 4
		 -> pRTCArray(BANK0[4]), 

    DisplayTimeToLCD@pTimeArray	PTR unsigned char  size(1) Largest target is 4
		 -> pRTCArray(BANK0[4]), 

    SendStringSerially@st	PTR const unsigned char  size(2) Largest target is 77
		 -> STR_13(CODE[77]), txt(BANK3[20]), STR_11(CODE[10]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 10
		 -> DAY(BANK1[10]), ap(BANK1[5]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> STR_53(CODE[16]), STR_52(CODE[14]), STR_51(CODE[16]), STR_49(CODE[12]), 
		 -> STR_48(CODE[14]), STR_47(CODE[12]), text(BANK3[16]), STR_45(CODE[8]), 
		 -> STR_44(CODE[9]), STR_43(CODE[15]), STR_42(CODE[14]), STR_40(CODE[13]), 
		 -> STR_39(CODE[14]), STR_37(CODE[15]), STR_36(CODE[15]), STR_35(CODE[16]), 
		 -> STR_34(CODE[13]), STR_33(CODE[17]), STR_32(CODE[15]), STR_31(CODE[14]), 
		 -> STR_30(CODE[16]), STR_29(CODE[6]), STR_28(CODE[16]), STR_27(CODE[16]), 
		 -> STR_26(CODE[16]), STR_25(CODE[17]), STR_24(CODE[12]), STR_23(CODE[4]), 
		 -> STR_22(CODE[4]), STR_21(CODE[4]), STR_20(CODE[4]), STR_19(CODE[4]), 
		 -> STR_18(CODE[4]), STR_17(CODE[4]), STR_16(CODE[4]), STR_15(CODE[3]), 
		 -> STR_14(CODE[3]), txt(BANK3[20]), STR_10(CODE[4]), number(BANK1[15]), 


Critical Paths under _main in COMMON

    _Settings->_DisplayDateOnLCD
    _Settings->_DisplayTimeToLCD
    _Settings->_GetKeyDate
    _atoi->___wmul
    _Set_DS1307_RTC_Time->___awdiv
    _Set_DS1307_RTC_Date->___awdiv
    _Write_Bytes_To_DS1307_RTC->_I2C_Write_Byte
    _Get_DS1307_RTC_Time->_Read_Bytes_From_DS1307_RTC
    _Get_DS1307_RTC_Date->_Read_Bytes_From_DS1307_RTC
    _Read_Bytes_From_DS1307_RTC->_I2C_Write_Byte
    _GetKeyTime->_strcpy
    _GetKeyNumber->_READ_SWITCHES
    _GetKeyDate->_Lcd_Write_String
    _GetKey->_READ_SWITCHES
    _EEPROMSET->_writeEEPROM
    _DisplayTimeToLCD->_Lcd_Write_String
    _DisplayDateOnLCD->_Lcd_Write_String
    _Lcd_Init->_Lcd_Cmd
    _GetKeySettings->_READ_SWITCHES
    _EEPROMGET->_readEEPROM
    _Lcd_Clear->_Lcd_Cmd
    _SendMsg_Inti->_SendStringSerially
    _SendStringSerially->_SendByteSerially
    _InitUART->___aldiv
    _CLeakage->___fttol
    _sprintf->___fttol
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___lwtoft->___ftpack
    ___ftmul->___lwtoft
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_CLeakage
    _avgpow->_sprintf
    _InitUnit->_Settings
    _Settings->_sprintf
    _CheckSensors->_GSM_Send
    _GSM_Send->_Msg_Setup
    _Msg_Setup->_sprintf
    _InitUART->___aldiv
    _CLeakage->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   96079
                                             39 BANK0      3     3      0
                           _CLeakage
                       _CheckSensors
                           _InitUnit
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            ___awdiv
                            ___awmod
                             _avgpow
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _avgpow                                               0     0      0    9977
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            ___awdiv
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _InitUnit                                             4     4      0   52472
                                             26 BANK0      4     4      0
                           _ADC_Init
                          _EEPROMGET
                     _GetKeySettings
                            _InitI2C
                         _InitKeypad
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                           _Settings
 ---------------------------------------------------------------------------------
 (2) _Settings                                             8     8      0   45585
                                             18 BANK0      8     8      0
                   _DisplayDateOnLCD
                   _DisplayTimeToLCD
                          _EEPROMSET
                             _GetKey
                         _GetKeyDate
                       _GetKeyNumber
                         _GetKeyTime
                _Get_DS1307_RTC_Date
                _Get_DS1307_RTC_Time
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                _Set_DS1307_RTC_Date
                _Set_DS1307_RTC_Time
                               _atoi
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2     918
                                              6 COMMON     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     198
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Set_DS1307_RTC_Time                                 12     9      3    4329
                                              9 COMMON     4     1      3
                                              0 BANK0      8     8      0
          _Write_Bytes_To_DS1307_RTC
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _Set_DS1307_RTC_Date                                 12     9      3    4351
                                              9 COMMON     4     1      3
                                              0 BANK0      8     8      0
          _Write_Bytes_To_DS1307_RTC
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) _Write_Bytes_To_DS1307_RTC                            7     5      2     346
                                              1 COMMON     7     5      2
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _Get_DS1307_RTC_Time                                  4     4      0     831
                                              9 COMMON     4     4      0
         _Read_Bytes_From_DS1307_RTC
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _Get_DS1307_RTC_Date                                  4     4      0     831
                                              9 COMMON     4     4      0
         _Read_Bytes_From_DS1307_RTC
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     463
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _Read_Bytes_From_DS1307_RTC                           8     5      3     368
                                              1 COMMON     8     5      3
                        _I2C_ReStart
                      _I2C_Read_Byte
                       _I2C_Send_ACK
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (5) _I2C_Write_Byte                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_Send_NACK                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_Send_ACK                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_Read_Byte                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_ReStart                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _GetKeyTime                                           2     2      0     951
                                              5 COMMON     2     2      0
                      _READ_SWITCHES
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _GetKeyNumber                                         2     2      0      68
                                              3 COMMON     2     2      0
                      _READ_SWITCHES
 ---------------------------------------------------------------------------------
 (3) _GetKeyDate                                           2     2      0    3710
                                             12 COMMON     2     2      0
                   _Lcd_Write_String
                      _READ_SWITCHES
                             _strcpy
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               5     3      2     795
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (3) _GetKey                                               2     2      0      46
                                              3 COMMON     2     2      0
                      _READ_SWITCHES
 ---------------------------------------------------------------------------------
 (3) _EEPROMSET                                            4     4      0     210
                                              4 COMMON     4     4      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (4) _writeEEPROM                                          4     3      1     120
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _DisplayTimeToLCD                                     3     3      0   10511
                                             12 COMMON     2     2      0
                                              0 BANK0      1     1      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _DisplayDateOnLCD                                     3     3      0   10401
                                             12 COMMON     2     2      0
                                              0 BANK0      1     1      0
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4    1780
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1890
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _InitKeypad                                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetKeySettings                                       6     6      0      71
                                              3 COMMON     6     6      0
                      _READ_SWITCHES
 ---------------------------------------------------------------------------------
 (4) _READ_SWITCHES                                        3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _EEPROMGET                                            4     4      0     112
                                              1 COMMON     4     4      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CheckSensors                                         3     3      0    9064
                                             24 BANK0      3     3      0
                           _GSM_Send
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _GSM_Send                                             3     3      0    2582
                                             21 BANK0      3     3      0
                           _InitUART
                          _Msg_Setup
                       _SendMsg_Inti
 ---------------------------------------------------------------------------------
 (3) _SendMsg_Inti                                         3     3      0     248
                                              3 COMMON     3     3      0
                   _SendByteSerially
                 _SendStringSerially
 ---------------------------------------------------------------------------------
 (3) _Msg_Setup                                            3     3      0    1853
                                             18 BANK0      3     3      0
                   _SendByteSerially
                 _SendStringSerially
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _SendStringSerially                                   2     0      2     226
                                              1 COMMON     2     0      2
                   _SendByteSerially
 ---------------------------------------------------------------------------------
 (5) _SendByteSerially                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _InitUART                                             2     0      2     481
                                              6 BANK0      2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             15     7      8     406
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _CLeakage                                            23    23      0   12809
                                             18 BANK0     21    21      0
                           _ADC_Init
                           _ADC_Read
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            ___ftmul
                            ___fttol
                           ___lwtoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             24    18      6    1605
                                              0 BANK0     18    12      6
                            ___awdiv (ARG)
                            ___fttol (ARG)
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    1757
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     358
                                              0 COMMON    14    10      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    2379
                                              0 BANK0     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1629
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     7     5      2    2759
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       7     6      1    3613
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Read                                             5     3      2      44
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CLeakage
     _ADC_Init
     _ADC_Read
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
     ___lwtoft
       ___ftpack
     _sprintf
       ___awdiv (ARG)
       ___fttol (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
   _CheckSensors
     _GSM_Send
       _InitUART
         ___aldiv
       _Msg_Setup
         _SendByteSerially
         _SendStringSerially
           _SendByteSerially
         _sprintf
           ___awdiv (ARG)
           ___fttol (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
       _SendMsg_Inti
         _SendByteSerially
         _SendStringSerially
           _SendByteSerially
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
   _InitUnit
     _ADC_Init
     _EEPROMGET
       _readEEPROM
     _GetKeySettings
       _READ_SWITCHES
     _InitI2C
     _InitKeypad
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
       _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _Settings
       _DisplayDateOnLCD
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_Port
         _Lcd_Write_Char
           _Lcd_Port
         _Lcd_Write_String
           _Lcd_Write_Char
             _Lcd_Port
         ___awdiv
         ___awmod
       _DisplayTimeToLCD
         _Lcd_Clear
           _Lcd_Cmd
             _Lcd_Port
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_Port
         _Lcd_Write_Char
           _Lcd_Port
         _Lcd_Write_String
           _Lcd_Write_Char
             _Lcd_Port
         ___awdiv
         ___awmod
       _EEPROMSET
         _writeEEPROM
       _GetKey
         _READ_SWITCHES
       _GetKeyDate
         _Lcd_Write_String
           _Lcd_Write_Char
             _Lcd_Port
         _READ_SWITCHES
         _strcpy
       _GetKeyNumber
         _READ_SWITCHES
       _GetKeyTime
         _READ_SWITCHES
         _strcpy
       _Get_DS1307_RTC_Date
         _Read_Bytes_From_DS1307_RTC
           _I2C_ReStart
           _I2C_Read_Byte
           _I2C_Send_ACK
           _I2C_Send_NACK
           _I2C_Start
           _I2C_Stop
           _I2C_Write_Byte
         ___bmul
       _Get_DS1307_RTC_Time
         _Read_Bytes_From_DS1307_RTC
           _I2C_ReStart
           _I2C_Read_Byte
           _I2C_Send_ACK
           _I2C_Send_NACK
           _I2C_Start
           _I2C_Stop
           _I2C_Write_Byte
         ___bmul
       _Lcd_Clear
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Write_Char
         _Lcd_Port
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _Set_DS1307_RTC_Date
         _Write_Bytes_To_DS1307_RTC
           _I2C_Start
           _I2C_Stop
           _I2C_Write_Byte
         ___awdiv
         ___awmod
       _Set_DS1307_RTC_Time
         _Write_Bytes_To_DS1307_RTC
           _I2C_Start
           _I2C_Stop
           _I2C_Write_Byte
         ___awdiv
         ___awmod
       _atoi
         ___wmul
         _isdigit
       _sprintf
         ___awdiv (ARG)
         ___fttol (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___awdiv
   ___awmod
   _avgpow
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     ___awdiv
     _sprintf
       ___awdiv (ARG)
       ___fttol (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
   _sprintf
     ___awdiv (ARG)
     ___fttol (ARG)
     ___lwdiv (ARG)
     ___lwmod (ARG)
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      CF       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2A      4F       5       98.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      4E       7       97.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0      24       9       37.5%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      CF      12        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue May 24 21:10:06 2016

                                  _a 004A                                    _b 004E  
                                  _c 0050                                    _d 00A5  
                                  _e 0052                                    _f 0054  
                                  _g 0056                                    _h 0058  
                                  _x 0068                                    pc 0002  
                     ___bmul@product 0072                   __size_of_I2C_Start 0008  
                        __CFG_CP$OFF 0000                                   _DD 00C6  
                                 _MM 00CB                                   _RD 0C60  
                                 _WR 0C61                                   _YY 00D0  
                       ___awdiv@sign 0076                                   _ap 00D5  
                                 _hh 00DF                                   _mm 00E4  
                                 _ss 00E9                                   fsr 0004  
                      CLeakage@power 003E                  ___wmul@multiplicand 0072  
                                l150 1BA9                                  l230 0EB1  
                                l151 1BAD                                  l152 1BAE  
                                l400 0D44                                  l153 1BB2  
                                l250 0F24                                  l242 0EF6  
                                l234 0ECC                                  l147 1BA1  
                                l251 0F1E                                  l243 0EF0  
                                l235 0EC6                                  l148 1BA4  
                                l149 1BA8                                  l229 0EB7  
                                l270 0F91                                  l262 0F67  
                                l254 0F39                                  l246 0F0F  
                                l238 0EE1                                  l271 0F8B  
                                l263 0F61                                  l255 0F33  
                                l247 0F09                                  l239 0EDB  
                                l328 0104                                  l521 1769  
                                l370 1AE6                                  l282 0FD4  
                                l274 0FA6                                  l266 0F7C  
                                l258 0F4E                                  l522 1791  
                                l507 11FC                                  l291 0FF8  
                                l283 0FCE                                  l275 0FA0  
                                l267 0F76                                  l259 0F48  
                                l419 1C03                                  l508 1264  
                                l605 1B19                                  l390 1CB6  
                                l286 0FE9                                  l278 0FBF  
                                l287 0FE3                                  l279 0FB9  
                                l527 17FF                                  l467 0416  
                                l660 15E1                                  l476 051E  
                                l581 1B00                                  l575 1AF0  
                                l593 1B2C                                  l569 1AF8  
                                l587 1B23                                  l599 1B6A  
                                l849 1391                                  l970 1153  
                                l794 1C33                                  _DAY 00BC  
                                l977 1168                                  l978 1170  
                                _RB0 0030                                  _RB1 0031  
                                _RC0 0038                                  _RB2 0032  
                                _RC1 0039                                  _RB3 0033  
                                _RD0 0040                                  _RC2 003A  
                                _RB4 0034                                  _RD1 0041  
                                _RB5 0035                                  _RE0 0048  
                                _RD2 0042                                  _RB6 0036  
                                _RE1 0049                                  _RD3 0043  
                                _RB7 0037                                  _RE2 004A  
                                _RD4 0044                                  _RD5 0045  
                                _RD6 0046                                  _RD7 0047  
                                _PEN 048A                         __CFG_CPD$OFF 0000  
                                _SEN 0488                                  _RX9 00C6  
                                _TX9 04C6                                  _iDD 005A  
                                _iMM 00A9                                  _iYY 00AB  
                                _iap 005C                 __size_of_I2C_ReStart 0008  
                                _ihh 005E                                  _imm 0060  
                                _iss 0062                                  fsr0 0004  
                                _txt 0190                                  indf 0000  
                       ___awmod@sign 0076                   I2C_Write_Byte@Byte 0070  
                 __size_of_EEPROMGET 0035                   __size_of_EEPROMSET 0036  
                       __CFG_FOSC$HS 0000                         __CFG_LVP$OFF 0000  
            Set_DS1307_RTC_Time@Mode 007C              Set_DS1307_RTC_Time@Mins 007A  
            Set_DS1307_RTC_Time@Secs 007B                                 l1061 12D7  
                               l3100 0B60                                 l3110 0B77  
                               l3122 0BA2                                 l3050 0FFE  
                               l3202 1096                                 l4020 0A37  
                               l3116 0B7D                                 l3140 0BFA  
                               l3300 1024                                 l3060 1C4F  
                               l3204 10B8                                 l4014 0A21  
                               l3310 102C                                 l3222 1B77  
                               l4032 0A76                                 l3136 0BB5  
                               l3128 0BB1                                 l3080 0B0B  
                               l3312 103A                                 l3208 1C2B  
                               l3138 0AE3                                 l3322 105B  
                               l3410 133B                                 l3226 1B7D  
                               l4044 0A9E                                 l4036 0A86  
                               l4212 0D9B                                 l3252 13B2  
                               l3244 13A2                                 l3068 1C6C  
                               l3404 131D                                 l3094 0B1E  
                               l3078 0B09                                 l3270 1405  
                               l3262 13EA                                 l3254 13C2  
                               l3326 1063                                 l3318 1050  
                               l3350 1FCC                                 l3342 1FC6  
                               l3430 137D                                 l4048 0AAE  
                               l4064 127D                                 l3352 1FDA  
                               l3360 1FF3                                 l3600 025A  
                               l3440 0020                                 l3424 1369  
                               l3416 1354                                 l3176 1DD5  
                               l4090 12CC                                 l4082 12AF  
                               l3098 0B42                                 l4218 0DE6  
                               l3266 13F7                                 l3338 1FBF  
                               l3602 0262                                 l3178 1DF3  
                               l3282 0010                                 l4314 1792  
                               l4092 12DA                                 l4084 12BF  
                               l3364 1FFB                                 l3356 1FE8  
                               l3452 005C                                 l2910 1D03  
                               l3294 1019                                 l3606 026A  
                               l3622 1D96                                 l3374 1B63  
                               l3470 00B4                                 l3462 0088  
                               l3446 003E                                 l3702 1518  
                               l4096 12E8                                 l3560 0D36  
                               l3472 00BF                                 l3464 0093  
                               l3480 00DF                                 l3384 1C17  
                               l3632 141C                                 l4192 03DE  
                               l2914 1D11                                 l3554 0D26  
                               l3474 00CA                                 l3466 009E  
                               l3482 00F6                                 l3458 007A  
                               l3634 140E                                 l4274 179B  
                               l3740 1138                                 l2908 1CF5  
                               l3556 0D2E                                 l3628 1DB5  
                               l3476 00D5                                 l3468 00A9  
                               l3708 1539                                 l3652 144F  
                               l3636 1423                                 l4276 16EB  
                               l2934 1F90                                 l2950 1EA6  
                               l3750 1166                                 l3742 113D  
                               l3734 1125                                 l2918 1D1C  
                               l3590 0232                                 l3398 12FF  
                               l3662 149B                                 l3654 1455  
                               l3646 1443                                 l3752 1158  
                               l3840 1D7F                                 l3592 023A  
                               l2864 1B73                                 l3672 15E8  
                               l3656 148C                                 l3818 1C97  
                               l3738 112C                                 l3834 1D61  
                               l3594 0242                                 l3674 15F0  
                               l3930 061C                                 l2892 1E94  
                               l2884 1E70                                 l3596 024A  
                               l3588 022A                                 l3668 15E3  
                               l3860 0452                                 l2886 1E7E  
                               l3598 0252                                 l3926 0606  
                               l2896 1E9F                                 l3792 1CC5  
                               l3696 14F6                                 l3794 1CED  
                               l3698 14F7                                 l3962 0725  
                               l3890 04F7                                 l3868 047C  
                               l3958 0714                                 l3992 079E  
                               l3994 07AE                                 _EEIF 006C  
                               STR_1 0A05                                 STR_2 0914  
                               STR_3 09F5                                 STR_4 09ED  
                               STR_5 09E9                                 STR_6 0A01  
                               STR_7 09F1                                 STR_8 09FD  
                               STR_9 09F9                                 _BRGH 04C2  
                               _CREN 00C4                                 u3025 1DDE  
                               u2405 1E8B                                 u3045 109C  
                               u2415 1E95                                 u2505 1F77  
                               u2265 1E40                                 u4105 0A87  
                               u3145 13B6                                 u3305 1051  
                               u3065 1C34                                 u4115 0A8F  
                               u3075 1C3B                                 u2525 1F9C  
                               u2445 1CF8                                 u3165 13C4  
                               u2375 1E73                                 u3175 13D9  
                               u4065 0A43                                 u4225 12B0  
                               u2465 1D09                                 u3185 13EB  
                               u3265 102F                                 u4155 0AAF  
                               u4075 0A55                                 u2395 1E7F  
                               u2475 1D12                                 u4165 0AB7  
                               u3285 103B                                 u3365 1FCF  
                               u3525 002B                                 u4255 12CE  
                               u3295 1047                                 u3535 0049  
                               u3455 130A                                 u3385 1FE0  
                               u3545 0067                                 u3465 1328  
                               u3705 16CD                                 u4345 16F8  
                               u4195 1284                                 u3395 1FE9  
                               u3555 0085                                 u3475 1346  
                               u3715 14BE                                 u4507 035A  
                               u4427 1752                                 u3565 1D94  
                               u3485 135F                                 u3725 14DE  
                               u3645 1569                                 u4517 036E  
                               u4437 178A                                 u4295 0D85  
                               u3575 1DB3                                 u3655 159F  
                               u4607 070C                                 u4527 038E  
                               u4447 17C7                                 u3905 1177  
                               u3825 1131                                 u3665 15D5  
                               u4617 074E                                 u4537 03A2  
                               u4457 17F3                                 u2955 0B98  
                               u4707 0ED4                                 u3755 1505  
                               u3675 162B                                 u4627 0784  
                               u4547 03EB                                 u4467 02F1  
                               _RCIE 0465                                 _RCEN 048B  
                               u3845 114C                                 u4717 0EE9  
                               u4637 1DB9                                 u3765 1526  
                               u3685 1661                                 u4557 040E  
                               u4477 0301                                 u4807 0FB2  
                               u4727 0F02                                 u4647 10CB  
                               u3775 11A7                                 u3695 1697  
                               u4567 0470                                 u4487 0326  
                               u3865 115F                                 u4817 0FC7  
                               u4737 0F17                                 u4657 10DA  
                               u3785 11C6                                 u4577 04EF  
                               u4497 033A                                 u3955 1CA0  
                               u4907 1BE3                                 u4827 0FDC  
                               u4747 0F2C                                 u4667 10E9  
                               u3795 11E5                                 u4587 05A8  
                               u4917 1F45                                 u4837 0FF1  
                               u4757 0F41                                 u4677 1CD7  
                               u4597 06A5                                 u4927 1F63  
                               u4847 1D83                                 u3975 1D5F  
                               u4767 0F5A                                 u4687 0EAA  
                               u4937 1E50                                 u4857 121D  
                               u3985 1D7D                                 u4777 0F6F  
                               u4697 0EBF                                 u4947 1E61  
                               u4867 1247                                 u4787 0F84  
                               u4957 1BC5                                 u4877 1EF4  
                               u4797 0F99                                 u4967 1CAE  
                               u4887 1F08                                 u4897 1F1C  
                               _SPEN 00C7                                 _RSEN 0489  
                               _SREN 00C5                                 _TXIE 0464  
                               _WREN 0C62                                 _TXEN 04C5  
                               _TXIF 0064                                 _SYNC 04C4  
                               _cDAY 00DA                                 _iDAY 00A7  
                       __CFG_WRT$OFF 0000                                 _Temp 006E  
        ??_Write_Bytes_To_DS1307_RTC 0073                 __end_of_GetKeyNumber 1C29  
                  ?_Lcd_Write_String 0075                                 _atoi 140E  
                               _main 16E5                         ___ftpack@arg 0070  
                               _mins 0064                                 _secs 0066  
                       ___ftpack@exp 0073                                 _text 01A4  
                               btemp 007E                     __end_of_I2C_Stop 1B05  
                   __end_of_ADC_Init 1B16                     __end_of_ADC_Read 1CBF  
                      __CFG_BOREN$ON 0000                                 ltemp 007E  
              __size_of_I2C_Send_ACK 0009                                 start 0000  
                               ttemp 007E                   ??_Lcd_Write_String 0077  
                               wtemp 007E                      CLeakage@voltage 0036  
                    __end_of_Lcd_Cmd 1BCE                    ___bmul@multiplier 0073  
                       ___ftmul@cntr 002E                          _writeEEPROM 1BEB  
                       ___ftmul@sign 002F                      __end_of_InitI2C 100F  
                         _GetKeyDate 0012                           _GetKeyTime 12F1  
                       ___fttol@exp1 007D                         ___fttol@lval 0079  
             __size_of_READ_SWITCHES 0164             Set_DS1307_RTC_Time@Hours 0079  
                    __end_of___aldiv 140E                   writeEEPROM@address 0072  
                              ?_atoi 0076                                ?_main 0070  
                              _ACKEN 048C                                _ACKDT 048D  
                    __end_of___awdiv 1068                                _EEADR 010D  
                              STR_10 09E5                                STR_11 09B4  
                              STR_20 09F1                                STR_12 0917  
                              STR_21 09FD                                STR_13 081C  
                              STR_14 0A05                                STR_22 09F9  
                              STR_30 08CB                                STR_23 09E5  
                              STR_15 0914                                STR_31 0933  
                              STR_16 09F5                                STR_24 0984  
                              STR_40 095D                                STR_32 08DB  
                              STR_17 09ED                                STR_41 099C  
                              STR_33 087A                                STR_25 0869  
                      __CFG_WDTE$OFF 0000                                STR_18 09E9  
                              STR_34 0977                                STR_50 096A  
                              STR_42 094F                                STR_26 088B  
                              STR_27 088B                                STR_19 0A01  
                              STR_43 08F9                                STR_35 08BB  
                              STR_51 089B                                STR_28 088B  
                              STR_52 0933                                STR_44 09BE  
                              STR_36 0908                      __end_of___awmod 2000  
                              STR_53 089B                                STR_29 09DF  
                              STR_45 09D0                                STR_37 08EA  
                              STR_46 09C7                                STR_38 09A8  
                              STR_54 08AB                                STR_55 09D8  
                              STR_47 0990                                STR_39 0941  
                              STR_48 0925                                STR_49 0990  
                              _EEPGD 0C67                      __end_of___ftmul 0ADC  
                    ___awdiv@divisor 0070                      __end_of___fttol 12F1  
                    __end_of___lwdiv 1EA4                      __end_of___lwmod 1D21  
                   __end_of_GSM_Send 1F24                     __end_of_CLeakage 0E9C  
                    ___awdiv@counter 0075                                _SPBRG 0099  
                              _PORTB 0006                                _PORTD 0008  
            __size_of_Lcd_Set_Cursor 004A                                _TRISA 0085  
                              _TRISB 0086                                _TRISC 0087  
                              _TRISD 0088                                _TRISE 0089  
                              _SSPIF 0063                                _TXREG 0019  
 __end_of_Read_Bytes_From_DS1307_RTC 10C1           _Read_Bytes_From_DS1307_RTC 1068  
                 _SendStringSerially 1C6C                      __end_of_dpowers 081C  
             __size_of_I2C_Read_Byte 0009                                _count 00A3  
                    __end_of_isdigit 0012                         _I2C_Send_ACK 1B1F  
                      ___ftpack@sign 0074                                atoi@a 007B  
                              atoi@s 0076                    __end_of_I2C_Start 1AFD  
              __size_of_CheckSensors 006F                                pclath 000A  
                              ltemp0 007E                                ltemp1 0082  
                              ltemp2 0086                                ltemp3 0080  
                        InitUnit@Key 003D                  ?_SendStringSerially 0071  
                              ttemp0 007E                                ttemp1 0081  
                              ttemp2 0084                                ttemp3 0087  
                              ttemp4 007F               __size_of_I2C_Send_NACK 0009  
                              status 0003                                wtemp0 007E  
                              wtemp1 0080                                wtemp2 0082  
                              wtemp3 0084                                wtemp4 0086  
                              wtemp5 0088                                wtemp6 007F  
                    __end_of_sprintf 0BFF                     __end_of_Lcd_Init 111D  
                   __end_of_Lcd_Port 1BB4                    __end_of_EEPROMGET 1D89  
                  __end_of_EEPROMSET 1DBF                           _InitKeypad 1B3C  
                    __initialization 07E4                         __end_of_atoi 14A0  
                       __end_of_main 1800                     __end_of_InitUART 1D54  
        __end_of_Get_DS1307_RTC_Date 11F6                     __end_of_InitUnit 0416  
        __end_of_Set_DS1307_RTC_Date 16E5          __end_of_Get_DS1307_RTC_Time 153B  
          _Write_Bytes_To_DS1307_RTC 1DBF          __end_of_Set_DS1307_RTC_Time 15FD  
                     _GetKeySettings 1CBF                 ??_SendStringSerially 0073  
                             ??_atoi 0078                               ??_main 0047  
                      ___fttol@sign1 0078                   __size_of_Lcd_Clear 000B  
                       _CheckSensors 11F6                     __end_of_Settings 07E4  
                             _ADCON0 001F                               _ADCON1 009F  
                             _ADRESH 001E                               _ADRESL 009E  
                             _EEDATA 010C                               _EECON2 018D  
                   ___awdiv@dividend 0072                     __end_of___ftpack 1189  
                      _READ_SWITCHES 0E9C                               _INTCON 000B  
                   __end_of___lwtoft 1B9A                            ??_Lcd_Cmd 0071  
            __size_of_Lcd_Write_Char 0039                               _SSPADD 0093  
                             _TRISC3 043B                               _TRISC4 043C  
                             _TRISC6 043E                               _TRISC7 043F  
                             _SSPCON 0014                               _SSPBUF 0013  
          __size_of_DisplayDateOnLCD 0181                            ??_InitI2C 0070  
                             _GetKey 1B55                       __CFG_PWRTE$OFF 0000  
                 __size_of_Msg_Setup 0047                          ?_GetKeyDate 0070  
                             ___bmul 1B75                        _I2C_Read_Byte 1B16  
                        ?_GetKeyTime 0070                            ??___aldiv 0078  
                             ___wmul 1C29                            ??___awdiv 0074  
                          ??___awmod 0074               __end_of_GetKeySettings 1CEF  
                          ??___ftmul 0026                            ??___fttol 0074  
                          ??___lwdiv 0074                            ??___lwmod 007C  
                             _avgpow 1DF7                      ADC_Read@channel 0074  
                   ___awdiv@quotient 0077                      ___awmod@divisor 0070  
                             _number 00AD                        _I2C_Send_NACK 1B28  
                    ___awmod@counter 0075                               _strcpy 1C4A  
              ___ftmul@f3_as_product 002B             __end_of_SendByteSerially 1AED  
                      ?_SendMsg_Inti 0070                            ??_isdigit 0070  
                          ?_I2C_Stop 0070                            ?_ADC_Init 0070  
                          ?_ADC_Read 0070                __size_of_GetKeyNumber 0020  
                          ??_sprintf 0026                       ?_READ_SWITCHES 0070  
                    Lcd_Set_Cursor@a 0077                      Lcd_Set_Cursor@b 0074  
                    Lcd_Set_Cursor@y 0079                      Lcd_Set_Cursor@z 0078  
            __end_of__initialization 07FC                    __end_of_Lcd_Clear 1B3C  
Read_Bytes_From_DS1307_RTC@NoOfBytes 0072                  ___bmul@multiplicand 0070  
                          ?_GSM_Send 0070                            ?_CLeakage 0070  
                        ?_InitKeypad 0070                           ___ftmul@f1 0020  
                         ___ftmul@f2 0023            __size_of_DisplayTimeToLCD 0146  
                     ?_I2C_Read_Byte 0070                           ___fttol@f1 0070  
                     __pcstackCOMMON 0070                      ?_GetKeySettings 0070  
               SendByteSerially@Byte 0070                       ?_I2C_Send_NACK 0070  
                         ___lwtoft@c 0078                         _GetKeyNumber 1C09  
                     ??_SendMsg_Inti 0073                       _Lcd_Set_Cursor 1F6B  
                         ??_I2C_Stop 0070                           ??_ADC_Init 0070  
                         ??_ADC_Read 0072                            ?_Lcd_Init 0070  
                  __end_of_Msg_Setup 1F6B                            ?_Lcd_Port 0070  
                __size_of_GetKeyDate 00F4                  __size_of_GetKeyTime 008E  
                         __pbssBANK0 004A                           __pbssBANK1 00A0  
                         __pbssBANK3 0190                            CLeakage@a 0043  
                          CLeakage@b 003C                            CLeakage@c 0045  
                          ?_InitUART 0026                            ?_InitUnit 0070  
                            ?_GetKey 0070                           ??_GSM_Send 0035  
                         ??_CLeakage 0032                           __pmaintext 16E5  
                       ?_writeEEPROM 0070                              ?___bmul 0070  
                          ?_Settings 0070                              ?___wmul 0070  
                            ?_avgpow 0070              __size_of_I2C_Write_Byte 0010  
                            _ACKSTAT 048E                        ??_I2C_ReStart 0070  
          __size_of_Lcd_Write_String 003D                            ?___ftpack 0070  
             __end_of_Lcd_Set_Cursor 1FB5                              ?_strcpy 0070  
                          ?___lwtoft 0078          ?_Read_Bytes_From_DS1307_RTC 0071  
                    ??_READ_SWITCHES 0070                           ??_Lcd_Init 0074  
 __size_of_Write_Bytes_To_DS1307_RTC 0038                  __size_of_InitKeypad 000C  
                         ??_Lcd_Port 0070                        GetKeyDate@key 007D  
                            _SSPSTAT 0094                           __stringtab 0800  
                         ??_InitUART 0079                       _Lcd_Write_Char 1E2F  
                            _Lcd_Cmd 1BB4                           ??_InitUnit 003A  
               SendStringSerially@st 0071                     _DisplayDateOnLCD 0106  
                         _readEEPROM 1B48                              _InitI2C 1002  
                          _I2C_Start 1AF5                      ??_I2C_Read_Byte 0070  
                    __size_of_GetKey 0010                           ??_Settings 0032  
                            ___aldiv 137F                      __size_of___bmul 0011  
                    ??_I2C_Send_NACK 0070                              ___awdiv 100F  
                            ___awmod 1FB5                      __size_of___wmul 0021  
                            ___ftmul 0A09                              ___fttol 1265  
                            ___lwdiv 1E68                              ___lwmod 1CEF  
                          _EEPROMGET 1D54                            _EEPROMSET 1D89  
                      GetKeyTime@key 0076                      __size_of_avgpow 0038  
                         ??___ftpack 0075                      ?_Lcd_Set_Cursor 0074  
                            __ptext1 1DF7                              __ptext2 0287  
                            __ptext3 0416                              __ptext4 140E  
                            __ptext5 0004                              __ptext6 1C29  
                            __ptext7 153B                              __ptext8 15FD  
                            __ptext9 1DBF                           ??___lwtoft 007B  
                    __size_of_strcpy 0022                              _dpowers 0812  
                            _current 00A0                              _isdigit 0004  
                         EEPROMGET@x 0073                     ___awmod@dividend 0072  
                   ___aldiv@dividend 0074                           EEPROMSET@x 0076  
                __end_of_I2C_ReStart 1AF5                     InitUART@BAUDRATE 0026  
                        Settings@Key 0038                              _sprintf 0ADC  
                            clrloop0 1B06               __end_of_Lcd_Write_Char 1E68  
         DisplayDateOnLCD@pDateArray 0020    __end_of_Write_Bytes_To_DS1307_RTC 1DF7  
               end_of_initialization 07FC                           ?_I2C_Start 0070  
               __end_of_SendMsg_Inti 1BEB                            GetKey@key 0074  
                   _DisplayTimeToLCD 0BFF                         ??_GetKeyDate 007C  
                       ??_GetKeyTime 0075                     ___aldiv@quotient 0022  
                          Lcd_Port@a 0070                         __pstringtext 0800  
                         ?_EEPROMGET 0070                           ?_EEPROMSET 0070  
        __size_of_SendStringSerially 0023                    ?_SendByteSerially 0070  
       __size_of_Get_DS1307_RTC_Date 006D         __size_of_Set_DS1307_RTC_Date 00E8  
       __size_of_Get_DS1307_RTC_Time 009B                 CLeakage@current_bits 0041  
       __size_of_Set_DS1307_RTC_Time 00C2           Write_Bytes_To_DS1307_RTC@i 0076  
                 ??_SendByteSerially 0070                    __size_of_I2C_Stop 0008  
                  __size_of_ADC_Init 0009                    __size_of_ADC_Read 0030  
                  readEEPROM@address 0070    Read_Bytes_From_DS1307_RTC@Address 0076  
                    ?_Lcd_Write_Char 0070                   __end_of_GetKeyDate 0106  
                  Lcd_Write_String@a 0075                    Lcd_Write_String@i 007A  
                 __end_of_GetKeyTime 137F                          ?_readEEPROM 0070  
                   writeEEPROM@datas 0070     Write_Bytes_To_DS1307_RTC@Address 0075  
                   ??_GetKeySettings 0073                         ??_InitKeypad 0070  
                     __end_of_GetKey 1B65                          ___ftmul@exp 002A  
                          _Lcd_Clear 1B31  __size_of_Read_Bytes_From_DS1307_RTC 0059  
                  __size_of_GSM_Send 0043                    __size_of_CLeakage 0157  
                     __end_of___bmul 1B86                       _I2C_Write_Byte 1B65  
               __size_of_writeEEPROM 001E                       __end_of___wmul 1C4A  
                   _Lcd_Write_String 1EA4                          _I2C_ReStart 1AED  
                     __end_of_avgpow 1E2F                       __end_of_strcpy 1C6C  
             writeEEPROM@INTCON_SAVE 0073                  start_initialization 07E4  
                 __end_of_InitKeypad 1B48                    __size_of_Lcd_Init 005C  
                  __size_of_Lcd_Port 001A                            _Msg_Setup 1F24  
                  __size_of_InitUART 0033                          ??_I2C_Start 0070  
                           ??_GetKey 0073                    __size_of_InitUnit 018F  
             __end_of_I2C_Write_Byte 1B75                           ?_Lcd_Clear 0070  
                           ??___bmul 0071                             ??___wmul 0074  
                          Settings@x 0036                          ??_EEPROMGET 0071  
                           ??_avgpow 007E                          ??_EEPROMSET 0074  
                    Lcd_Write_Char@a 0074                      Lcd_Write_Char@y 0073  
                  __size_of_Settings 03CE          Read_Bytes_From_DS1307_RTC@i 0077  
           __end_of_DisplayDateOnLCD 0287                             ??_strcpy 0072  
                          _pRTCArray 006A                  __size_of_readEEPROM 000D  
                  __size_of___ftpack 006C                            ___latbits 0002  
                  __size_of___lwtoft 0014                        __pcstackBANK0 0020  
     Write_Bytes_To_DS1307_RTC@pData 0071                        ?_I2C_Send_ACK 0070  
              __size_of_SendMsg_Inti 001D                           ?_Msg_Setup 0070  
                           ?_Lcd_Cmd 0070                          sprintf@flag 0029  
                        sprintf@prec 002A                             ?_InitI2C 0070  
                   ___lwdiv@dividend 0072                      GetKeyNumber@key 0074  
                   ??_Lcd_Set_Cursor 0075                      ?_I2C_Write_Byte 0070  
         DisplayTimeToLCD@pTimeArray 0020                             ?___aldiv 0070  
                           ?___awdiv 0070                             ?___awmod 0070  
                           ?___ftmul 0020                             ?___fttol 0070  
                       _CLeakage$926 0039                             ?___lwdiv 0070  
                           ?___lwmod 0078                        ?_CheckSensors 0070  
                           ?_isdigit 0070                         _SendMsg_Inti 1BCE  
                           _I2C_Stop 1AFD                             _ADC_Init 1B0D  
                           _ADC_Read 1C8F             __end_of_DisplayTimeToLCD 0D45  
                     ??_I2C_Send_ACK 0070                     ___lwdiv@quotient 0075  
                           ?_sprintf 0020                __end_of_READ_SWITCHES 1000  
                  GetKeySettings@key 0078                    GetKeySettings@set 0076  
                    ___aldiv@divisor 0070                      ___aldiv@counter 0020  
                     ___wmul@product 0074                            clear_ram0 1B05  
                _Get_DS1307_RTC_Date 1189                             _GSM_Send 1EE1  
                           _CLeakage 0D45                             Lcd_Cmd@a 0073  
                _Set_DS1307_RTC_Date 15FD                  _Get_DS1307_RTC_Time 14A0  
              __end_of_I2C_Read_Byte 1B1F                  _Set_DS1307_RTC_Time 153B  
                           _GO_nDONE 00FA                          ??_Lcd_Clear 0074  
    Read_Bytes_From_DS1307_RTC@pData 0071                __end_of_I2C_Send_NACK 1B31  
                        __stringbase 0812                    ___wmul@multiplier 0070  
                     ??_CheckSensors 0038                     ??_Lcd_Write_Char 0071  
               ?_Get_DS1307_RTC_Date 0070                 ?_Set_DS1307_RTC_Date 0079  
               ?_Get_DS1307_RTC_Time 0070                 ?_Set_DS1307_RTC_Time 0079  
                           _Lcd_Init 10C1                             _Lcd_Port 1B9A  
                           _InitUART 1D21             __end_of_Lcd_Write_String 1EE1  
                        ??_Msg_Setup 0032           ?_Write_Bytes_To_DS1307_RTC 0071  
                           _InitUnit 0287                         ??_readEEPROM 0070  
                   __size_of_Lcd_Cmd 001A            __size_of_SendByteSerially 0008  
                   __size_of_InitI2C 000D                             _Settings 0416  
         __end_of_SendStringSerially 1C8F                     __size_of___aldiv 008F  
                   __size_of___awdiv 0059                     __size_of___awmod 004B  
                   __size_of___ftmul 00D3                     __size_of___fttol 008C  
                   __size_of___lwdiv 003C                     __size_of___lwmod 0032  
                           ___ftpack 111D                         ?_I2C_ReStart 0070  
                      ?_GetKeyNumber 0070                   __end_of__stringtab 0812  
                        _isdigit$633 0070                             ___lwtoft 1B86  
              ??_Get_DS1307_RTC_Date 0079                           sprintf@val 002E  
              ??_Set_DS1307_RTC_Date 0020                ??_Get_DS1307_RTC_Time 0079  
                 __end_of_readEEPROM 1B55                ??_Set_DS1307_RTC_Time 0020  
                   __size_of_isdigit 000E                      ___lwdiv@divisor 0070  
                    ___lwdiv@counter 0077                             __ptext10 14A0  
                           __ptext11 1189                             __ptext20 1AED  
                           __ptext12 1B75                             __ptext21 12F1  
                           __ptext13 1068                             __ptext30 1FB5  
                           __ptext22 1C09                             __ptext14 1B65  
                           __ptext31 100F                             __ptext23 0012  
                           __ptext15 1AFD                             __ptext40 1B31  
                           __ptext32 10C1                             __ptext24 1C4A  
                           __ptext16 1AF5                             __ptext41 1EE1  
                           __ptext33 1B3C                             __ptext25 1B55  
                           __ptext17 1B28                             __ptext50 1CEF  
                           __ptext42 1BCE                             __ptext34 1002  
                           __ptext26 1D89                             __ptext18 1B1F  
                           __ptext51 1E68                             __ptext43 1F24  
                           __ptext35 1CBF                             __ptext27 1BEB  
                           __ptext19 1B16                             __ptext60 1B9A  
                           __ptext52 1B86                             __ptext44 1C6C  
                           __ptext36 0E9C                             __ptext28 0BFF  
                           __ptext61 1C8F                             __ptext53 1265  
                           __ptext45 1AE5                             __ptext37 1D54  
                           __ptext29 0106                             __ptext62 1B0D  
                           __ptext54 0A09                             __ptext46 1D21  
                           __ptext38 1B48                             __ptext55 111D  
                           __ptext47 137F                             __ptext39 11F6  
                           __ptext56 1EA4                             __ptext48 0D45  
                           __ptext57 1E2F                             __ptext49 0ADC  
                           __ptext58 1F6B                             __ptext59 1BB4  
                   __size_of_sprintf 0123                             _avgpower 004C  
                         strcpy@from 0070                        __size_of_atoi 0092  
                      __size_of_main 011B                        ??_writeEEPROM 0071  
               __end_of_I2C_Send_ACK 1B28                             atoi@sign 007A  
                       Settings@nkey 0039                       ??_GetKeyNumber 0073  
                  ?_DisplayDateOnLCD 0070                   ??_DisplayDateOnLCD 007C  
       ??_Read_Bytes_From_DS1307_RTC 0074                             isdigit@c 0071  
                 Lcd_Write_Char@temp 0072                            sprintf@ap 002B  
                          sprintf@cp 002C                            sprintf@sp 0030  
                   ___lwmod@dividend 007A   Write_Bytes_To_DS1307_RTC@NoOfBytes 0072  
                   ??_I2C_Write_Byte 0070                 __end_of_CheckSensors 1265  
           Set_DS1307_RTC_Date@Month 0079                            stringcode 080A  
                 Lcd_Set_Cursor@temp 007A                  __end_of_writeEEPROM 1C09  
            __size_of_GetKeySettings 0030                           _OPTION_REG 0081  
                           sprintf@c 0031                             sprintf@f 0020  
                    ___lwmod@divisor 0078              Set_DS1307_RTC_Date@Date 007C  
                           strcpy@cp 0073                             strcpy@to 0074  
                    ___lwmod@counter 007D              Set_DS1307_RTC_Date@Year 007A  
                           stringtab 0800                         ___aldiv@sign 0021  
                  ?_DisplayTimeToLCD 0070                   ??_DisplayTimeToLCD 007C  
             Set_DS1307_RTC_Date@Day 007B                     _SendByteSerially 1AE5  
