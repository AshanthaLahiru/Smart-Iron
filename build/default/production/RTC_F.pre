
# 1 "RTC_F.c"

# 26 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\htc.h"
extern const char __xc8_OPTIM_SPEED;


# 13 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\xc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 49 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\pic16f877a.h"
extern volatile unsigned char INDF @ 0x000;

asm("INDF equ 00h");



extern volatile unsigned char TMR0 @ 0x001;

asm("TMR0 equ 01h");



extern volatile unsigned char PCL @ 0x002;

asm("PCL equ 02h");



extern volatile unsigned char STATUS @ 0x003;

asm("STATUS equ 03h");


typedef union {
struct {
unsigned C :1;
unsigned DC :1;
unsigned Z :1;
unsigned nPD :1;
unsigned nTO :1;
unsigned RP :2;
unsigned IRP :1;
};
struct {
unsigned :5;
unsigned RP0 :1;
unsigned RP1 :1;
};
struct {
unsigned CARRY :1;
};
struct {
unsigned :2;
unsigned ZERO :1;
};
} STATUSbits_t;
extern volatile STATUSbits_t STATUSbits @ 0x003;

# 154
extern volatile unsigned char FSR @ 0x004;

asm("FSR equ 04h");



extern volatile unsigned char PORTA @ 0x005;

asm("PORTA equ 05h");


typedef union {
struct {
unsigned RA0 :1;
unsigned RA1 :1;
unsigned RA2 :1;
unsigned RA3 :1;
unsigned RA4 :1;
unsigned RA5 :1;
};
} PORTAbits_t;
extern volatile PORTAbits_t PORTAbits @ 0x005;

# 209
extern volatile unsigned char PORTB @ 0x006;

asm("PORTB equ 06h");


typedef union {
struct {
unsigned RB0 :1;
unsigned RB1 :1;
unsigned RB2 :1;
unsigned RB3 :1;
unsigned RB4 :1;
unsigned RB5 :1;
unsigned RB6 :1;
unsigned RB7 :1;
};
} PORTBbits_t;
extern volatile PORTBbits_t PORTBbits @ 0x006;

# 270
extern volatile unsigned char PORTC @ 0x007;

asm("PORTC equ 07h");


typedef union {
struct {
unsigned RC0 :1;
unsigned RC1 :1;
unsigned RC2 :1;
unsigned RC3 :1;
unsigned RC4 :1;
unsigned RC5 :1;
unsigned RC6 :1;
unsigned RC7 :1;
};
} PORTCbits_t;
extern volatile PORTCbits_t PORTCbits @ 0x007;

# 331
extern volatile unsigned char PORTD @ 0x008;

asm("PORTD equ 08h");


typedef union {
struct {
unsigned RD0 :1;
unsigned RD1 :1;
unsigned RD2 :1;
unsigned RD3 :1;
unsigned RD4 :1;
unsigned RD5 :1;
unsigned RD6 :1;
unsigned RD7 :1;
};
} PORTDbits_t;
extern volatile PORTDbits_t PORTDbits @ 0x008;

# 392
extern volatile unsigned char PORTE @ 0x009;

asm("PORTE equ 09h");


typedef union {
struct {
unsigned RE0 :1;
unsigned RE1 :1;
unsigned RE2 :1;
};
} PORTEbits_t;
extern volatile PORTEbits_t PORTEbits @ 0x009;

# 423
extern volatile unsigned char PCLATH @ 0x00A;

asm("PCLATH equ 0Ah");


typedef union {
struct {
unsigned PCLATH :5;
};
} PCLATHbits_t;
extern volatile PCLATHbits_t PCLATHbits @ 0x00A;

# 442
extern volatile unsigned char INTCON @ 0x00B;

asm("INTCON equ 0Bh");


typedef union {
struct {
unsigned RBIF :1;
unsigned INTF :1;
unsigned TMR0IF :1;
unsigned RBIE :1;
unsigned INTE :1;
unsigned TMR0IE :1;
unsigned PEIE :1;
unsigned GIE :1;
};
struct {
unsigned :2;
unsigned T0IF :1;
unsigned :2;
unsigned T0IE :1;
};
} INTCONbits_t;
extern volatile INTCONbits_t INTCONbits @ 0x00B;

# 519
extern volatile unsigned char PIR1 @ 0x00C;

asm("PIR1 equ 0Ch");


typedef union {
struct {
unsigned TMR1IF :1;
unsigned TMR2IF :1;
unsigned CCP1IF :1;
unsigned SSPIF :1;
unsigned TXIF :1;
unsigned RCIF :1;
unsigned ADIF :1;
unsigned PSPIF :1;
};
} PIR1bits_t;
extern volatile PIR1bits_t PIR1bits @ 0x00C;

# 580
extern volatile unsigned char PIR2 @ 0x00D;

asm("PIR2 equ 0Dh");


typedef union {
struct {
unsigned CCP2IF :1;
unsigned :2;
unsigned BCLIF :1;
unsigned EEIF :1;
unsigned :1;
unsigned CMIF :1;
};
} PIR2bits_t;
extern volatile PIR2bits_t PIR2bits @ 0x00D;

# 619
extern volatile unsigned short TMR1 @ 0x00E;

asm("TMR1 equ 0Eh");



extern volatile unsigned char TMR1L @ 0x00E;

asm("TMR1L equ 0Eh");



extern volatile unsigned char TMR1H @ 0x00F;

asm("TMR1H equ 0Fh");



extern volatile unsigned char T1CON @ 0x010;

asm("T1CON equ 010h");


typedef union {
struct {
unsigned TMR1ON :1;
unsigned TMR1CS :1;
unsigned nT1SYNC :1;
unsigned T1OSCEN :1;
unsigned T1CKPS :2;
};
struct {
unsigned :2;
unsigned T1SYNC :1;
unsigned :1;
unsigned T1CKPS0 :1;
unsigned T1CKPS1 :1;
};
struct {
unsigned :2;
unsigned T1INSYNC :1;
};
} T1CONbits_t;
extern volatile T1CONbits_t T1CONbits @ 0x010;

# 711
extern volatile unsigned char TMR2 @ 0x011;

asm("TMR2 equ 011h");



extern volatile unsigned char T2CON @ 0x012;

asm("T2CON equ 012h");


typedef union {
struct {
unsigned T2CKPS :2;
unsigned TMR2ON :1;
unsigned TOUTPS :4;
};
struct {
unsigned T2CKPS0 :1;
unsigned T2CKPS1 :1;
unsigned :1;
unsigned TOUTPS0 :1;
unsigned TOUTPS1 :1;
unsigned TOUTPS2 :1;
unsigned TOUTPS3 :1;
};
} T2CONbits_t;
extern volatile T2CONbits_t T2CONbits @ 0x012;

# 787
extern volatile unsigned char SSPBUF @ 0x013;

asm("SSPBUF equ 013h");



extern volatile unsigned char SSPCON @ 0x014;

asm("SSPCON equ 014h");


typedef union {
struct {
unsigned SSPM :4;
unsigned CKP :1;
unsigned SSPEN :1;
unsigned SSPOV :1;
unsigned WCOL :1;
};
struct {
unsigned SSPM0 :1;
unsigned SSPM1 :1;
unsigned SSPM2 :1;
unsigned SSPM3 :1;
};
} SSPCONbits_t;
extern volatile SSPCONbits_t SSPCONbits @ 0x014;

# 862
extern volatile unsigned short CCPR1 @ 0x015;

asm("CCPR1 equ 015h");



extern volatile unsigned char CCPR1L @ 0x015;

asm("CCPR1L equ 015h");



extern volatile unsigned char CCPR1H @ 0x016;

asm("CCPR1H equ 016h");



extern volatile unsigned char CCP1CON @ 0x017;

asm("CCP1CON equ 017h");


typedef union {
struct {
unsigned CCP1M :4;
unsigned CCP1Y :1;
unsigned CCP1X :1;
};
struct {
unsigned CCP1M0 :1;
unsigned CCP1M1 :1;
unsigned CCP1M2 :1;
unsigned CCP1M3 :1;
};
} CCP1CONbits_t;
extern volatile CCP1CONbits_t CCP1CONbits @ 0x017;

# 937
extern volatile unsigned char RCSTA @ 0x018;

asm("RCSTA equ 018h");


typedef union {
struct {
unsigned RX9D :1;
unsigned OERR :1;
unsigned FERR :1;
unsigned ADDEN :1;
unsigned CREN :1;
unsigned SREN :1;
unsigned RX9 :1;
unsigned SPEN :1;
};
struct {
unsigned RCD8 :1;
unsigned :5;
unsigned RC9 :1;
};
struct {
unsigned :6;
unsigned nRC8 :1;
};
struct {
unsigned :6;
unsigned RC8_9 :1;
};
} RCSTAbits_t;
extern volatile RCSTAbits_t RCSTAbits @ 0x018;

# 1031
extern volatile unsigned char TXREG @ 0x019;

asm("TXREG equ 019h");



extern volatile unsigned char RCREG @ 0x01A;

asm("RCREG equ 01Ah");



extern volatile unsigned short CCPR2 @ 0x01B;

asm("CCPR2 equ 01Bh");



extern volatile unsigned char CCPR2L @ 0x01B;

asm("CCPR2L equ 01Bh");



extern volatile unsigned char CCPR2H @ 0x01C;

asm("CCPR2H equ 01Ch");



extern volatile unsigned char CCP2CON @ 0x01D;

asm("CCP2CON equ 01Dh");


typedef union {
struct {
unsigned CCP2M :4;
unsigned CCP2Y :1;
unsigned CCP2X :1;
};
struct {
unsigned CCP2M0 :1;
unsigned CCP2M1 :1;
unsigned CCP2M2 :1;
unsigned CCP2M3 :1;
};
} CCP2CONbits_t;
extern volatile CCP2CONbits_t CCP2CONbits @ 0x01D;

# 1118
extern volatile unsigned char ADRESH @ 0x01E;

asm("ADRESH equ 01Eh");



extern volatile unsigned char ADCON0 @ 0x01F;

asm("ADCON0 equ 01Fh");


typedef union {
struct {
unsigned ADON :1;
unsigned :1;
unsigned GO_nDONE :1;
unsigned CHS :3;
unsigned ADCS :2;
};
struct {
unsigned :2;
unsigned GO :1;
unsigned CHS0 :1;
unsigned CHS1 :1;
unsigned CHS2 :1;
unsigned ADCS0 :1;
unsigned ADCS1 :1;
};
struct {
unsigned :2;
unsigned nDONE :1;
};
struct {
unsigned :2;
unsigned GO_DONE :1;
};
} ADCON0bits_t;
extern volatile ADCON0bits_t ADCON0bits @ 0x01F;

# 1219
extern volatile unsigned char OPTION_REG @ 0x081;

asm("OPTION_REG equ 081h");


typedef union {
struct {
unsigned PS :3;
unsigned PSA :1;
unsigned T0SE :1;
unsigned T0CS :1;
unsigned INTEDG :1;
unsigned nRBPU :1;
};
struct {
unsigned PS0 :1;
unsigned PS1 :1;
unsigned PS2 :1;
};
} OPTION_REGbits_t;
extern volatile OPTION_REGbits_t OPTION_REGbits @ 0x081;

# 1288
extern volatile unsigned char TRISA @ 0x085;

asm("TRISA equ 085h");


typedef union {
struct {
unsigned TRISA0 :1;
unsigned TRISA1 :1;
unsigned TRISA2 :1;
unsigned TRISA3 :1;
unsigned TRISA4 :1;
unsigned TRISA5 :1;
};
} TRISAbits_t;
extern volatile TRISAbits_t TRISAbits @ 0x085;

# 1337
extern volatile unsigned char TRISB @ 0x086;

asm("TRISB equ 086h");


typedef union {
struct {
unsigned TRISB0 :1;
unsigned TRISB1 :1;
unsigned TRISB2 :1;
unsigned TRISB3 :1;
unsigned TRISB4 :1;
unsigned TRISB5 :1;
unsigned TRISB6 :1;
unsigned TRISB7 :1;
};
} TRISBbits_t;
extern volatile TRISBbits_t TRISBbits @ 0x086;

# 1398
extern volatile unsigned char TRISC @ 0x087;

asm("TRISC equ 087h");


typedef union {
struct {
unsigned TRISC0 :1;
unsigned TRISC1 :1;
unsigned TRISC2 :1;
unsigned TRISC3 :1;
unsigned TRISC4 :1;
unsigned TRISC5 :1;
unsigned TRISC6 :1;
unsigned TRISC7 :1;
};
} TRISCbits_t;
extern volatile TRISCbits_t TRISCbits @ 0x087;

# 1459
extern volatile unsigned char TRISD @ 0x088;

asm("TRISD equ 088h");


typedef union {
struct {
unsigned TRISD0 :1;
unsigned TRISD1 :1;
unsigned TRISD2 :1;
unsigned TRISD3 :1;
unsigned TRISD4 :1;
unsigned TRISD5 :1;
unsigned TRISD6 :1;
unsigned TRISD7 :1;
};
} TRISDbits_t;
extern volatile TRISDbits_t TRISDbits @ 0x088;

# 1520
extern volatile unsigned char TRISE @ 0x089;

asm("TRISE equ 089h");


typedef union {
struct {
unsigned TRISE0 :1;
unsigned TRISE1 :1;
unsigned TRISE2 :1;
unsigned :1;
unsigned PSPMODE :1;
unsigned IBOV :1;
unsigned OBF :1;
unsigned IBF :1;
};
} TRISEbits_t;
extern volatile TRISEbits_t TRISEbits @ 0x089;

# 1576
extern volatile unsigned char PIE1 @ 0x08C;

asm("PIE1 equ 08Ch");


typedef union {
struct {
unsigned TMR1IE :1;
unsigned TMR2IE :1;
unsigned CCP1IE :1;
unsigned SSPIE :1;
unsigned TXIE :1;
unsigned RCIE :1;
unsigned ADIE :1;
unsigned PSPIE :1;
};
} PIE1bits_t;
extern volatile PIE1bits_t PIE1bits @ 0x08C;

# 1637
extern volatile unsigned char PIE2 @ 0x08D;

asm("PIE2 equ 08Dh");


typedef union {
struct {
unsigned CCP2IE :1;
unsigned :2;
unsigned BCLIE :1;
unsigned EEIE :1;
unsigned :1;
unsigned CMIE :1;
};
} PIE2bits_t;
extern volatile PIE2bits_t PIE2bits @ 0x08D;

# 1676
extern volatile unsigned char PCON @ 0x08E;

asm("PCON equ 08Eh");


typedef union {
struct {
unsigned nBOR :1;
unsigned nPOR :1;
};
struct {
unsigned nBO :1;
};
} PCONbits_t;
extern volatile PCONbits_t PCONbits @ 0x08E;

# 1709
extern volatile unsigned char SSPCON2 @ 0x091;

asm("SSPCON2 equ 091h");


typedef union {
struct {
unsigned SEN :1;
unsigned RSEN :1;
unsigned PEN :1;
unsigned RCEN :1;
unsigned ACKEN :1;
unsigned ACKDT :1;
unsigned ACKSTAT :1;
unsigned GCEN :1;
};
} SSPCON2bits_t;
extern volatile SSPCON2bits_t SSPCON2bits @ 0x091;

# 1770
extern volatile unsigned char PR2 @ 0x092;

asm("PR2 equ 092h");



extern volatile unsigned char SSPADD @ 0x093;

asm("SSPADD equ 093h");



extern volatile unsigned char SSPSTAT @ 0x094;

asm("SSPSTAT equ 094h");


typedef union {
struct {
unsigned BF :1;
unsigned UA :1;
unsigned R_nW :1;
unsigned S :1;
unsigned P :1;
unsigned D_nA :1;
unsigned CKE :1;
unsigned SMP :1;
};
struct {
unsigned :2;
unsigned R :1;
unsigned :2;
unsigned D :1;
};
struct {
unsigned :2;
unsigned I2C_READ :1;
unsigned I2C_START :1;
unsigned I2C_STOP :1;
unsigned I2C_DATA :1;
};
struct {
unsigned :2;
unsigned nW :1;
unsigned :2;
unsigned nA :1;
};
struct {
unsigned :2;
unsigned nWRITE :1;
unsigned :2;
unsigned nADDRESS :1;
};
struct {
unsigned :2;
unsigned R_W :1;
unsigned :2;
unsigned D_A :1;
};
struct {
unsigned :2;
unsigned READ_WRITE :1;
unsigned :2;
unsigned DATA_ADDRESS :1;
};
} SSPSTATbits_t;
extern volatile SSPSTATbits_t SSPSTATbits @ 0x094;

# 1950
extern volatile unsigned char TXSTA @ 0x098;

asm("TXSTA equ 098h");


typedef union {
struct {
unsigned TX9D :1;
unsigned TRMT :1;
unsigned BRGH :1;
unsigned :1;
unsigned SYNC :1;
unsigned TXEN :1;
unsigned TX9 :1;
unsigned CSRC :1;
};
struct {
unsigned TXD8 :1;
unsigned :5;
unsigned nTX8 :1;
};
struct {
unsigned :6;
unsigned TX8_9 :1;
};
} TXSTAbits_t;
extern volatile TXSTAbits_t TXSTAbits @ 0x098;

# 2030
extern volatile unsigned char SPBRG @ 0x099;

asm("SPBRG equ 099h");



extern volatile unsigned char CMCON @ 0x09C;

asm("CMCON equ 09Ch");


typedef union {
struct {
unsigned CM :3;
unsigned CIS :1;
unsigned C1INV :1;
unsigned C2INV :1;
unsigned C1OUT :1;
unsigned C2OUT :1;
};
struct {
unsigned CM0 :1;
unsigned CM1 :1;
unsigned CM2 :1;
};
} CMCONbits_t;
extern volatile CMCONbits_t CMCONbits @ 0x09C;

# 2105
extern volatile unsigned char CVRCON @ 0x09D;

asm("CVRCON equ 09Dh");


typedef union {
struct {
unsigned CVR :4;
unsigned :1;
unsigned CVRR :1;
unsigned CVROE :1;
unsigned CVREN :1;
};
struct {
unsigned CVR0 :1;
unsigned CVR1 :1;
unsigned CVR2 :1;
unsigned CVR3 :1;
};
} CVRCONbits_t;
extern volatile CVRCONbits_t CVRCONbits @ 0x09D;

# 2169
extern volatile unsigned char ADRESL @ 0x09E;

asm("ADRESL equ 09Eh");



extern volatile unsigned char ADCON1 @ 0x09F;

asm("ADCON1 equ 09Fh");


typedef union {
struct {
unsigned PCFG :4;
unsigned :2;
unsigned ADCS2 :1;
unsigned ADFM :1;
};
struct {
unsigned PCFG0 :1;
unsigned PCFG1 :1;
unsigned PCFG2 :1;
unsigned PCFG3 :1;
};
} ADCON1bits_t;
extern volatile ADCON1bits_t ADCON1bits @ 0x09F;

# 2233
extern volatile unsigned char EEDATA @ 0x10C;

asm("EEDATA equ 010Ch");



extern volatile unsigned char EEADR @ 0x10D;

asm("EEADR equ 010Dh");



extern volatile unsigned char EEDATH @ 0x10E;

asm("EEDATH equ 010Eh");



extern volatile unsigned char EEADRH @ 0x10F;

asm("EEADRH equ 010Fh");



extern volatile unsigned char EECON1 @ 0x18C;

asm("EECON1 equ 018Ch");


typedef union {
struct {
unsigned RD :1;
unsigned WR :1;
unsigned WREN :1;
unsigned WRERR :1;
unsigned :3;
unsigned EEPGD :1;
};
} EECON1bits_t;
extern volatile EECON1bits_t EECON1bits @ 0x18C;

# 2301
extern volatile unsigned char EECON2 @ 0x18D;

asm("EECON2 equ 018Dh");

# 2313
extern volatile __bit ACKDT @ (((unsigned) &SSPCON2)*8) + 5;

extern volatile __bit ACKEN @ (((unsigned) &SSPCON2)*8) + 4;

extern volatile __bit ACKSTAT @ (((unsigned) &SSPCON2)*8) + 6;

extern volatile __bit ADCS0 @ (((unsigned) &ADCON0)*8) + 6;

extern volatile __bit ADCS1 @ (((unsigned) &ADCON0)*8) + 7;

extern volatile __bit ADCS2 @ (((unsigned) &ADCON1)*8) + 6;

extern volatile __bit ADDEN @ (((unsigned) &RCSTA)*8) + 3;

extern volatile __bit ADFM @ (((unsigned) &ADCON1)*8) + 7;

extern volatile __bit ADIE @ (((unsigned) &PIE1)*8) + 6;

extern volatile __bit ADIF @ (((unsigned) &PIR1)*8) + 6;

extern volatile __bit ADON @ (((unsigned) &ADCON0)*8) + 0;

extern volatile __bit BCLIE @ (((unsigned) &PIE2)*8) + 3;

extern volatile __bit BCLIF @ (((unsigned) &PIR2)*8) + 3;

extern volatile __bit BF @ (((unsigned) &SSPSTAT)*8) + 0;

extern volatile __bit BRGH @ (((unsigned) &TXSTA)*8) + 2;

extern volatile __bit C1INV @ (((unsigned) &CMCON)*8) + 4;

extern volatile __bit C1OUT @ (((unsigned) &CMCON)*8) + 6;

extern volatile __bit C2INV @ (((unsigned) &CMCON)*8) + 5;

extern volatile __bit C2OUT @ (((unsigned) &CMCON)*8) + 7;

extern volatile __bit CARRY @ (((unsigned) &STATUS)*8) + 0;

extern volatile __bit CCP1IE @ (((unsigned) &PIE1)*8) + 2;

extern volatile __bit CCP1IF @ (((unsigned) &PIR1)*8) + 2;

extern volatile __bit CCP1M0 @ (((unsigned) &CCP1CON)*8) + 0;

extern volatile __bit CCP1M1 @ (((unsigned) &CCP1CON)*8) + 1;

extern volatile __bit CCP1M2 @ (((unsigned) &CCP1CON)*8) + 2;

extern volatile __bit CCP1M3 @ (((unsigned) &CCP1CON)*8) + 3;

extern volatile __bit CCP1X @ (((unsigned) &CCP1CON)*8) + 5;

extern volatile __bit CCP1Y @ (((unsigned) &CCP1CON)*8) + 4;

extern volatile __bit CCP2IE @ (((unsigned) &PIE2)*8) + 0;

extern volatile __bit CCP2IF @ (((unsigned) &PIR2)*8) + 0;

extern volatile __bit CCP2M0 @ (((unsigned) &CCP2CON)*8) + 0;

extern volatile __bit CCP2M1 @ (((unsigned) &CCP2CON)*8) + 1;

extern volatile __bit CCP2M2 @ (((unsigned) &CCP2CON)*8) + 2;

extern volatile __bit CCP2M3 @ (((unsigned) &CCP2CON)*8) + 3;

extern volatile __bit CCP2X @ (((unsigned) &CCP2CON)*8) + 5;

extern volatile __bit CCP2Y @ (((unsigned) &CCP2CON)*8) + 4;

extern volatile __bit CHS0 @ (((unsigned) &ADCON0)*8) + 3;

extern volatile __bit CHS1 @ (((unsigned) &ADCON0)*8) + 4;

extern volatile __bit CHS2 @ (((unsigned) &ADCON0)*8) + 5;

extern volatile __bit CIS @ (((unsigned) &CMCON)*8) + 3;

extern volatile __bit CKE @ (((unsigned) &SSPSTAT)*8) + 6;

extern volatile __bit CKP @ (((unsigned) &SSPCON)*8) + 4;

extern volatile __bit CM0 @ (((unsigned) &CMCON)*8) + 0;

extern volatile __bit CM1 @ (((unsigned) &CMCON)*8) + 1;

extern volatile __bit CM2 @ (((unsigned) &CMCON)*8) + 2;

extern volatile __bit CMIE @ (((unsigned) &PIE2)*8) + 6;

extern volatile __bit CMIF @ (((unsigned) &PIR2)*8) + 6;

extern volatile __bit CREN @ (((unsigned) &RCSTA)*8) + 4;

extern volatile __bit CSRC @ (((unsigned) &TXSTA)*8) + 7;

extern volatile __bit CVR0 @ (((unsigned) &CVRCON)*8) + 0;

extern volatile __bit CVR1 @ (((unsigned) &CVRCON)*8) + 1;

extern volatile __bit CVR2 @ (((unsigned) &CVRCON)*8) + 2;

extern volatile __bit CVR3 @ (((unsigned) &CVRCON)*8) + 3;

extern volatile __bit CVREN @ (((unsigned) &CVRCON)*8) + 7;

extern volatile __bit CVROE @ (((unsigned) &CVRCON)*8) + 6;

extern volatile __bit CVRR @ (((unsigned) &CVRCON)*8) + 5;

extern volatile __bit DATA_ADDRESS @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit DC @ (((unsigned) &STATUS)*8) + 1;

extern volatile __bit D_A @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit D_nA @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit EEIE @ (((unsigned) &PIE2)*8) + 4;

extern volatile __bit EEIF @ (((unsigned) &PIR2)*8) + 4;

extern volatile __bit EEPGD @ (((unsigned) &EECON1)*8) + 7;

extern volatile __bit FERR @ (((unsigned) &RCSTA)*8) + 2;

extern volatile __bit GCEN @ (((unsigned) &SSPCON2)*8) + 7;

extern volatile __bit GIE @ (((unsigned) &INTCON)*8) + 7;

extern volatile __bit GO @ (((unsigned) &ADCON0)*8) + 2;

extern volatile __bit GO_DONE @ (((unsigned) &ADCON0)*8) + 2;

extern volatile __bit GO_nDONE @ (((unsigned) &ADCON0)*8) + 2;

extern volatile __bit I2C_DATA @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit I2C_READ @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit I2C_START @ (((unsigned) &SSPSTAT)*8) + 3;

extern volatile __bit I2C_STOP @ (((unsigned) &SSPSTAT)*8) + 4;

extern volatile __bit IBF @ (((unsigned) &TRISE)*8) + 7;

extern volatile __bit IBOV @ (((unsigned) &TRISE)*8) + 5;

extern volatile __bit INTE @ (((unsigned) &INTCON)*8) + 4;

extern volatile __bit INTEDG @ (((unsigned) &OPTION_REG)*8) + 6;

extern volatile __bit INTF @ (((unsigned) &INTCON)*8) + 1;

extern volatile __bit IRP @ (((unsigned) &STATUS)*8) + 7;

extern volatile __bit OBF @ (((unsigned) &TRISE)*8) + 6;

extern volatile __bit OERR @ (((unsigned) &RCSTA)*8) + 1;

extern volatile __bit PCFG0 @ (((unsigned) &ADCON1)*8) + 0;

extern volatile __bit PCFG1 @ (((unsigned) &ADCON1)*8) + 1;

extern volatile __bit PCFG2 @ (((unsigned) &ADCON1)*8) + 2;

extern volatile __bit PCFG3 @ (((unsigned) &ADCON1)*8) + 3;

extern volatile __bit PEIE @ (((unsigned) &INTCON)*8) + 6;

extern volatile __bit PEN @ (((unsigned) &SSPCON2)*8) + 2;

extern volatile __bit PS0 @ (((unsigned) &OPTION_REG)*8) + 0;

extern volatile __bit PS1 @ (((unsigned) &OPTION_REG)*8) + 1;

extern volatile __bit PS2 @ (((unsigned) &OPTION_REG)*8) + 2;

extern volatile __bit PSA @ (((unsigned) &OPTION_REG)*8) + 3;

extern volatile __bit PSPIE @ (((unsigned) &PIE1)*8) + 7;

extern volatile __bit PSPIF @ (((unsigned) &PIR1)*8) + 7;

extern volatile __bit PSPMODE @ (((unsigned) &TRISE)*8) + 4;

extern volatile __bit RA0 @ (((unsigned) &PORTA)*8) + 0;

extern volatile __bit RA1 @ (((unsigned) &PORTA)*8) + 1;

extern volatile __bit RA2 @ (((unsigned) &PORTA)*8) + 2;

extern volatile __bit RA3 @ (((unsigned) &PORTA)*8) + 3;

extern volatile __bit RA4 @ (((unsigned) &PORTA)*8) + 4;

extern volatile __bit RA5 @ (((unsigned) &PORTA)*8) + 5;

extern volatile __bit RB0 @ (((unsigned) &PORTB)*8) + 0;

extern volatile __bit RB1 @ (((unsigned) &PORTB)*8) + 1;

extern volatile __bit RB2 @ (((unsigned) &PORTB)*8) + 2;

extern volatile __bit RB3 @ (((unsigned) &PORTB)*8) + 3;

extern volatile __bit RB4 @ (((unsigned) &PORTB)*8) + 4;

extern volatile __bit RB5 @ (((unsigned) &PORTB)*8) + 5;

extern volatile __bit RB6 @ (((unsigned) &PORTB)*8) + 6;

extern volatile __bit RB7 @ (((unsigned) &PORTB)*8) + 7;

extern volatile __bit RBIE @ (((unsigned) &INTCON)*8) + 3;

extern volatile __bit RBIF @ (((unsigned) &INTCON)*8) + 0;

extern volatile __bit RC0 @ (((unsigned) &PORTC)*8) + 0;

extern volatile __bit RC1 @ (((unsigned) &PORTC)*8) + 1;

extern volatile __bit RC2 @ (((unsigned) &PORTC)*8) + 2;

extern volatile __bit RC3 @ (((unsigned) &PORTC)*8) + 3;

extern volatile __bit RC4 @ (((unsigned) &PORTC)*8) + 4;

extern volatile __bit RC5 @ (((unsigned) &PORTC)*8) + 5;

extern volatile __bit RC6 @ (((unsigned) &PORTC)*8) + 6;

extern volatile __bit RC7 @ (((unsigned) &PORTC)*8) + 7;

extern volatile __bit RC8_9 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit RC9 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit RCD8 @ (((unsigned) &RCSTA)*8) + 0;

extern volatile __bit RCEN @ (((unsigned) &SSPCON2)*8) + 3;

extern volatile __bit RCIE @ (((unsigned) &PIE1)*8) + 5;

extern volatile __bit RCIF @ (((unsigned) &PIR1)*8) + 5;

extern volatile __bit RD @ (((unsigned) &EECON1)*8) + 0;

extern volatile __bit RD0 @ (((unsigned) &PORTD)*8) + 0;

extern volatile __bit RD1 @ (((unsigned) &PORTD)*8) + 1;

extern volatile __bit RD2 @ (((unsigned) &PORTD)*8) + 2;

extern volatile __bit RD3 @ (((unsigned) &PORTD)*8) + 3;

extern volatile __bit RD4 @ (((unsigned) &PORTD)*8) + 4;

extern volatile __bit RD5 @ (((unsigned) &PORTD)*8) + 5;

extern volatile __bit RD6 @ (((unsigned) &PORTD)*8) + 6;

extern volatile __bit RD7 @ (((unsigned) &PORTD)*8) + 7;

extern volatile __bit RE0 @ (((unsigned) &PORTE)*8) + 0;

extern volatile __bit RE1 @ (((unsigned) &PORTE)*8) + 1;

extern volatile __bit RE2 @ (((unsigned) &PORTE)*8) + 2;

extern volatile __bit READ_WRITE @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit RP0 @ (((unsigned) &STATUS)*8) + 5;

extern volatile __bit RP1 @ (((unsigned) &STATUS)*8) + 6;

extern volatile __bit RSEN @ (((unsigned) &SSPCON2)*8) + 1;

extern volatile __bit RX9 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit RX9D @ (((unsigned) &RCSTA)*8) + 0;

extern volatile __bit R_W @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit R_nW @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit SEN @ (((unsigned) &SSPCON2)*8) + 0;

extern volatile __bit SMP @ (((unsigned) &SSPSTAT)*8) + 7;

extern volatile __bit SPEN @ (((unsigned) &RCSTA)*8) + 7;

extern volatile __bit SREN @ (((unsigned) &RCSTA)*8) + 5;

extern volatile __bit SSPEN @ (((unsigned) &SSPCON)*8) + 5;

extern volatile __bit SSPIE @ (((unsigned) &PIE1)*8) + 3;

extern volatile __bit SSPIF @ (((unsigned) &PIR1)*8) + 3;

extern volatile __bit SSPM0 @ (((unsigned) &SSPCON)*8) + 0;

extern volatile __bit SSPM1 @ (((unsigned) &SSPCON)*8) + 1;

extern volatile __bit SSPM2 @ (((unsigned) &SSPCON)*8) + 2;

extern volatile __bit SSPM3 @ (((unsigned) &SSPCON)*8) + 3;

extern volatile __bit SSPOV @ (((unsigned) &SSPCON)*8) + 6;

extern volatile __bit SYNC @ (((unsigned) &TXSTA)*8) + 4;

extern volatile __bit T0CS @ (((unsigned) &OPTION_REG)*8) + 5;

extern volatile __bit T0IE @ (((unsigned) &INTCON)*8) + 5;

extern volatile __bit T0IF @ (((unsigned) &INTCON)*8) + 2;

extern volatile __bit T0SE @ (((unsigned) &OPTION_REG)*8) + 4;

extern volatile __bit T1CKPS0 @ (((unsigned) &T1CON)*8) + 4;

extern volatile __bit T1CKPS1 @ (((unsigned) &T1CON)*8) + 5;

extern volatile __bit T1INSYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit T1OSCEN @ (((unsigned) &T1CON)*8) + 3;

extern volatile __bit T1SYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit T2CKPS0 @ (((unsigned) &T2CON)*8) + 0;

extern volatile __bit T2CKPS1 @ (((unsigned) &T2CON)*8) + 1;

extern volatile __bit TMR0IE @ (((unsigned) &INTCON)*8) + 5;

extern volatile __bit TMR0IF @ (((unsigned) &INTCON)*8) + 2;

extern volatile __bit TMR1CS @ (((unsigned) &T1CON)*8) + 1;

extern volatile __bit TMR1IE @ (((unsigned) &PIE1)*8) + 0;

extern volatile __bit TMR1IF @ (((unsigned) &PIR1)*8) + 0;

extern volatile __bit TMR1ON @ (((unsigned) &T1CON)*8) + 0;

extern volatile __bit TMR2IE @ (((unsigned) &PIE1)*8) + 1;

extern volatile __bit TMR2IF @ (((unsigned) &PIR1)*8) + 1;

extern volatile __bit TMR2ON @ (((unsigned) &T2CON)*8) + 2;

extern volatile __bit TOUTPS0 @ (((unsigned) &T2CON)*8) + 3;

extern volatile __bit TOUTPS1 @ (((unsigned) &T2CON)*8) + 4;

extern volatile __bit TOUTPS2 @ (((unsigned) &T2CON)*8) + 5;

extern volatile __bit TOUTPS3 @ (((unsigned) &T2CON)*8) + 6;

extern volatile __bit TRISA0 @ (((unsigned) &TRISA)*8) + 0;

extern volatile __bit TRISA1 @ (((unsigned) &TRISA)*8) + 1;

extern volatile __bit TRISA2 @ (((unsigned) &TRISA)*8) + 2;

extern volatile __bit TRISA3 @ (((unsigned) &TRISA)*8) + 3;

extern volatile __bit TRISA4 @ (((unsigned) &TRISA)*8) + 4;

extern volatile __bit TRISA5 @ (((unsigned) &TRISA)*8) + 5;

extern volatile __bit TRISB0 @ (((unsigned) &TRISB)*8) + 0;

extern volatile __bit TRISB1 @ (((unsigned) &TRISB)*8) + 1;

extern volatile __bit TRISB2 @ (((unsigned) &TRISB)*8) + 2;

extern volatile __bit TRISB3 @ (((unsigned) &TRISB)*8) + 3;

extern volatile __bit TRISB4 @ (((unsigned) &TRISB)*8) + 4;

extern volatile __bit TRISB5 @ (((unsigned) &TRISB)*8) + 5;

extern volatile __bit TRISB6 @ (((unsigned) &TRISB)*8) + 6;

extern volatile __bit TRISB7 @ (((unsigned) &TRISB)*8) + 7;

extern volatile __bit TRISC0 @ (((unsigned) &TRISC)*8) + 0;

extern volatile __bit TRISC1 @ (((unsigned) &TRISC)*8) + 1;

extern volatile __bit TRISC2 @ (((unsigned) &TRISC)*8) + 2;

extern volatile __bit TRISC3 @ (((unsigned) &TRISC)*8) + 3;

extern volatile __bit TRISC4 @ (((unsigned) &TRISC)*8) + 4;

extern volatile __bit TRISC5 @ (((unsigned) &TRISC)*8) + 5;

extern volatile __bit TRISC6 @ (((unsigned) &TRISC)*8) + 6;

extern volatile __bit TRISC7 @ (((unsigned) &TRISC)*8) + 7;

extern volatile __bit TRISD0 @ (((unsigned) &TRISD)*8) + 0;

extern volatile __bit TRISD1 @ (((unsigned) &TRISD)*8) + 1;

extern volatile __bit TRISD2 @ (((unsigned) &TRISD)*8) + 2;

extern volatile __bit TRISD3 @ (((unsigned) &TRISD)*8) + 3;

extern volatile __bit TRISD4 @ (((unsigned) &TRISD)*8) + 4;

extern volatile __bit TRISD5 @ (((unsigned) &TRISD)*8) + 5;

extern volatile __bit TRISD6 @ (((unsigned) &TRISD)*8) + 6;

extern volatile __bit TRISD7 @ (((unsigned) &TRISD)*8) + 7;

extern volatile __bit TRISE0 @ (((unsigned) &TRISE)*8) + 0;

extern volatile __bit TRISE1 @ (((unsigned) &TRISE)*8) + 1;

extern volatile __bit TRISE2 @ (((unsigned) &TRISE)*8) + 2;

extern volatile __bit TRMT @ (((unsigned) &TXSTA)*8) + 1;

extern volatile __bit TX8_9 @ (((unsigned) &TXSTA)*8) + 6;

extern volatile __bit TX9 @ (((unsigned) &TXSTA)*8) + 6;

extern volatile __bit TX9D @ (((unsigned) &TXSTA)*8) + 0;

extern volatile __bit TXD8 @ (((unsigned) &TXSTA)*8) + 0;

extern volatile __bit TXEN @ (((unsigned) &TXSTA)*8) + 5;

extern volatile __bit TXIE @ (((unsigned) &PIE1)*8) + 4;

extern volatile __bit TXIF @ (((unsigned) &PIR1)*8) + 4;

extern volatile __bit UA @ (((unsigned) &SSPSTAT)*8) + 1;

extern volatile __bit WCOL @ (((unsigned) &SSPCON)*8) + 7;

extern volatile __bit WR @ (((unsigned) &EECON1)*8) + 1;

extern volatile __bit WREN @ (((unsigned) &EECON1)*8) + 2;

extern volatile __bit WRERR @ (((unsigned) &EECON1)*8) + 3;

extern volatile __bit ZERO @ (((unsigned) &STATUS)*8) + 2;

extern volatile __bit nA @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit nADDRESS @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit nBO @ (((unsigned) &PCON)*8) + 0;

extern volatile __bit nBOR @ (((unsigned) &PCON)*8) + 0;

extern volatile __bit nDONE @ (((unsigned) &ADCON0)*8) + 2;

extern volatile __bit nPD @ (((unsigned) &STATUS)*8) + 3;

extern volatile __bit nPOR @ (((unsigned) &PCON)*8) + 1;

extern volatile __bit nRBPU @ (((unsigned) &OPTION_REG)*8) + 7;

extern volatile __bit nRC8 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit nT1SYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit nTO @ (((unsigned) &STATUS)*8) + 4;

extern volatile __bit nTX8 @ (((unsigned) &TXSTA)*8) + 6;

extern volatile __bit nW @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit nWRITE @ (((unsigned) &SSPSTAT)*8) + 2;


# 27 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\pic.h"
#pragma intrinsic(__nop)
extern void __nop(void);

# 76
extern unsigned int flash_read(unsigned short addr);

# 41 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\eeprom_routines.h"
extern void eeprom_write(unsigned char addr, unsigned char value);
extern unsigned char eeprom_read(unsigned char addr);
extern void eecpymem(volatile unsigned char *to, __eeprom unsigned char *from, unsigned char size);
extern void memcpyee(__eeprom unsigned char *to, const unsigned char *from, unsigned char size);


# 149 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\pic.h"
#pragma intrinsic(_delay)
extern __nonreentrant void _delay(unsigned long);

# 184
extern unsigned char __resetbits;
extern __bit __powerdown;
extern __bit __timeout;

# 4 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\string.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;


extern int errno;

# 22
extern void * memcpy(void *, const void *, size_t);
extern void * memmove(void *, const void *, size_t);
extern void * memset(void *, int, size_t);

# 42
extern char * strcat(char *, const char *);
extern char * strcpy(char *, const char *);
extern char * strncat(char *, const char *, size_t);
extern char * strncpy(char *, const char *, size_t);
extern char * strdup(const char *);
extern char * strtok(char *, const char *);


extern int memcmp(const void *, const void *, size_t);
extern int strcmp(const char *, const char *);
extern int stricmp(const char *, const char *);
extern int strncmp(const char *, const char *, size_t);
extern int strnicmp(const char *, const char *, size_t);
extern void * memchr(const void *, int, size_t);
extern size_t strcspn(const char *, const char *);
extern char * strpbrk(const char *, const char *);
extern size_t strspn(const char *, const char *);
extern char * strstr(const char *, const char *);
extern char * stristr(const char *, const char *);
extern char * strerror(int);
extern size_t strlen(const char *);
extern char * strchr(const char *, int);
extern char * strichr(const char *, int);
extern char * strrchr(const char *, int);
extern char * strrichr(const char *, int);

# 7 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\stdarg.h"
typedef void * va_list[1];

#pragma intrinsic(__va_start)
extern void * __va_start(void);

#pragma intrinsic(__va_arg)
extern void * __va_arg(void *, ...);

# 24 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\stdio.h"
extern int errno;

# 55
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 17 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\conio.h"
extern int errno;


extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern __bit kbhit(void);

# 31
extern char * cgets(char *);
extern void cputs(const char *);

# 100 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);


# 192
#pragma printf_check(vprintf) const
#pragma printf_check(vsprintf) const

extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 10 "lcd.h"
void Lcd_Port(char a)
{
if(a & 1)
RD4 = 1;
else
RD4 = 0;

if(a & 2)
RD5 = 1;
else
RD5 = 0;

if(a & 4)
RD6 = 1;
else
RD6 = 0;

if(a & 8)
RD7 = 1;
else
RD7 = 0;
}
void Lcd_Cmd(char a)
{
RD2 = 0;
Lcd_Port(a);
RD3 = 1;
_delay((unsigned long)((4)*(20000000/4000.0)));
RD3 = 0;
}

Lcd_Clear()
{
Lcd_Cmd(0);
Lcd_Cmd(1);
}

void Lcd_Set_Cursor(char a, char b)
{
char temp,z,y;
if(a == 1)
{
temp = 0x80 + b - 1;
z = temp>>4;
y = temp & 0x0F;
Lcd_Cmd(z);
Lcd_Cmd(y);
}
else if(a == 2)
{
temp = 0xC0 + b - 1;
z = temp>>4;
y = temp & 0x0F;
Lcd_Cmd(z);
Lcd_Cmd(y);
}
}

void Lcd_Init()
{
Lcd_Port(0x00);
_delay((unsigned long)((20)*(20000000/4000.0)));
Lcd_Cmd(0x03);
_delay((unsigned long)((5)*(20000000/4000.0)));
Lcd_Cmd(0x03);
_delay((unsigned long)((11)*(20000000/4000.0)));
Lcd_Cmd(0x03);

Lcd_Cmd(0x02);
Lcd_Cmd(0x02);
Lcd_Cmd(0x08);
Lcd_Cmd(0x00);
Lcd_Cmd(0x0C);
Lcd_Cmd(0x00);
Lcd_Cmd(0x06);
}

void Lcd_Write_Char(char a)
{
char temp,y;
temp = a&0x0F;
y = a&0xF0;
RD2 = 1;
Lcd_Port(y>>4);
RD3 = 1;
_delay((unsigned long)((40)*(20000000/4000000.0)));
RD3 = 0;
Lcd_Port(temp);
RD3 = 1;
_delay((unsigned long)((40)*(20000000/4000000.0)));
RD3 = 0;
}

void Lcd_Write_String(char *a)
{
int i;
for(i=0;a[i]!='\0';i++)
Lcd_Write_Char(a[i]);
}

void Lcd_Shift_Right()
{
Lcd_Cmd(0x01);
Lcd_Cmd(0x0C);
}

void Lcd_Shift_Left()
{
Lcd_Cmd(0x01);
Lcd_Cmd(0x08);
}

# 22 "keypad.h"
void InitKeypad(void);
char GetKey(void);

char number[15];
int x=0,a=0,b=0,c=0,d=0,e=0,f=0,g=0,h=0;
unsigned char hh[5],mm[5],ss[5],ap[5],DD[5],MM[5],YY[5],DAY[10],cDAY[5];

void InitKeypad(void)
{
PORTB = 0x00;
TRISB = 0xF0;


OPTION_REG &= 0x7F;
}

# 42
char READ_SWITCHES(void)
{
RB0 = 0; RB1 = 1; RB2 = 1; RB3 = 1;

if (RB4 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (RB4==0); return '1'; }
if (RB5 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (RB5==0); return '2'; }
if (RB6 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (RB6==0); return '3'; }
if (RB7 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (RB7==0); return '/'; }

RB0 = 1; RB1 = 0; RB2 = 1; RB3 = 1;

if (RB4 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (RB4==0); return '4'; }
if (RB5 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (RB5==0); return '5'; }
if (RB6 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (RB6==0); return '6'; }
if (RB7 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (RB7==0); return 'x'; }

RB0 = 1; RB1 = 1; RB2 = 0; RB3 = 1;

if (RB4 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (RB4==0); return '7'; }
if (RB5 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (RB5==0); return '8'; }
if (RB6 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (RB6==0); return '9'; }
if (RB7 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (RB7==0); return '-'; }

RB0 = 1; RB1 = 1; RB2 = 1; RB3 = 0;

if (RB4 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (RB4==0); return 'C'; }
if (RB5 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (RB5==0); return '0'; }
if (RB6 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (RB6==0); return '='; }
if (RB7 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (RB7==0); return '+'; }

return 'n';
}



char GetKey(void)
{
char key = 'n';

while(key=='n')
key = READ_SWITCHES();

return key;
}

char GetKeyNumber(void)
{
char key = 'n';

while(key=='n')
key = READ_SWITCHES();

number[x]=key;
x++;

return key;
}

char GetKeyTime(void)
{
char key = 'n';

while(key=='n')
key = READ_SWITCHES();
if(a<2)
{
hh[a]=key;
a++;
}
else if(b<2)
{
mm[b]=key;
b++;
}
else if(c<2)
{
ss[c]=key;
c++;
}
else if(c<3)
{
if(key=='1')
{strcpy(ap,"AM");
c++;}
else if(key=='2')
{strcpy(ap,"PM");
c++;}
}
return key;
}

char GetKeyDate(void)
{
char key = 'n';

while(key=='n')
key = READ_SWITCHES();
if(e<2)
{
DD[e]=key;
e++;
}
else if(f<2)
{
MM[f]=key;
f++;
}
else if(g<2)
{
YY[g]=key;
g++;
}
else if(h<1)
{switch(key)
{
case '1': strcpy(DAY,"MON"); break;
case '2': strcpy(DAY,"TUE"); break;
case '3': strcpy(DAY,"WED"); break;
case '4': strcpy(DAY,"THU"); break;
case '5': strcpy(DAY,"FRI"); break;
case '6': strcpy(DAY,"SAT"); break;
case '7': strcpy(DAY,"SUN"); break;

default: Lcd_Write_String("???"); break;
}
h++;
cDAY[0]=key;
}


return key;
}

char GetKeySettings(void)
{
char key = 'n';
int set=0;
while(key=='n')
{
key = READ_SWITCHES();
_delay((unsigned long)((70)*(20000000/4000.0)));
set++;
if(set==20)
{
key = 'n';
break;
}
}
return key;
}


# 9 "configuration.h"
#pragma config FOSC = HS
#pragma config WDTE = OFF
#pragma config PWRTE = OFF
#pragma config BOREN = ON
#pragma config LVP = OFF
#pragma config CPD = OFF
#pragma config WRT = OFF
#pragma config CP = OFF

# 8 "GSM.h"
void SendMsg_Inti();
void Msg_Setup();
void InitUART(int BAUDRATE);
char BusyUART(void);
void SendByteSerially(unsigned char Byte);
void SendStringSerially(const unsigned char* st);
void GSM_Send(void);

void SendMsg_Inti()
{
SendStringSerially("AT+CMGF=1");
SendByteSerially((char)13);
_delay((unsigned long)((1000)*(20000000/4000.0)));
}


char txt[20];
void Msg_Setup()
{
sprintf(txt,"AT+CMGS=\"%s\"\r",number);
SendStringSerially(txt);
_delay((unsigned long)((1000)*(20000000/4000.0)));
SendStringSerially("I'm your safety iron unit. Unexpected situation has occurred. Check it ASAP!");
SendByteSerially((char)26);
_delay((unsigned long)((1000)*(20000000/4000.0)));
}

void InitUART(int BAUDRATE)
{
TRISC6 = 0;
TRISC7 = 1;

SPBRG = ((20000000/16)/BAUDRATE) - 1;
BRGH = 1;
SYNC = 0;
SPEN = 1;
CREN = 1;
SREN = 0;
TXIE = 0;
RCIE = 1;
TX9 = 0;
RX9 = 0;
TXEN = 0;
TXEN = 1;
}

char BusyUART(void)
{
if (!TXIF)
return 1;
else
{
TXIF = 0;
return 0;
}
}

void SendByteSerially(unsigned char Byte)
{
while(!TXIF);
TXREG = Byte;
}

void SendStringSerially(const unsigned char* st)
{
while(*st)
SendByteSerially(*st++);
}

void GSM_Send(void)
{
InitUART(9600);
_delay((unsigned long)((1000)*(20000000/4000.0)));
SendMsg_Inti();
_delay((unsigned long)((1000)*(20000000/4000.0)));
Msg_Setup();
_delay((unsigned long)((1000)*(20000000/4000.0)));
}

# 17 "UART1.h"
void InitUART(int);
char BusyUART(void);
void SendByteSerially(unsigned char Byte);
void SendStringSerially(const unsigned char* st);

# 15 "I2C.h"
void InitI2C(void);
void I2C_Start(void);
void I2C_ReStart(void);
void I2C_Stop(void);
void I2C_Send_ACK(void);
void I2C_Send_NACK(void);
bit I2C_Write_Byte(unsigned char);
unsigned char I2C_Read_Byte(void);

# 24 "DS1307.h"
void Write_Byte_To_DS1307_RTC(unsigned char, unsigned char);
unsigned char Read_Byte_From_DS1307_RTC(unsigned char);
void Write_Bytes_To_DS1307_RTC(unsigned char,unsigned char*,unsigned char);
void Read_Bytes_From_DS1307_RTC(unsigned char,unsigned char*,unsigned int);
void Set_DS1307_RTC_Time(unsigned char,unsigned char,unsigned char,unsigned char);
unsigned char* Get_DS1307_RTC_Time(void);
void Set_DS1307_RTC_Date(unsigned char,unsigned char,unsigned char,unsigned char);
unsigned char* Get_DS1307_RTC_Date(void);

# 8 "ADC.h"
void ADC_Init()
{
ADCON0 = 0x81;
ADCON1 = 0x82;
}

unsigned int ADC_Read(unsigned char channel)
{
if(channel > 7)
return 0;

ADCON0 &= 0xC5;
ADCON0 |= channel<<3;
_delay((unsigned long)((2)*(8000000/4000.0)));
GO_nDONE = 1;
while(GO_nDONE);
return ((ADRESH<<8)+ADRESL);
}

# 7 "DateTimeDisplay.h"
void DisplayTimeToLCD( unsigned char* pTimeArray );
void DisplayDateOnLCD( unsigned char* pDateArray );


void DisplayTimeToLCD( unsigned char* pTimeArray )
{

Lcd_Clear();

Lcd_Set_Cursor(1,1);
Lcd_Write_Char((pTimeArray[2]/10)+0x30 );
Lcd_Set_Cursor(1,2);
Lcd_Write_Char((pTimeArray[2]%10)+0x30 );
Lcd_Set_Cursor(1,3);

Lcd_Write_Char(':');


Lcd_Set_Cursor(1,4);
Lcd_Write_Char((pTimeArray[1]/10)+0x30 );
Lcd_Set_Cursor(1,5);
Lcd_Write_Char((pTimeArray[1]%10)+0x30 );

Lcd_Set_Cursor(1,6);

Lcd_Write_Char(':');
Lcd_Set_Cursor(1,7);

Lcd_Write_Char((pTimeArray[0]/10)+0x30 );
Lcd_Set_Cursor(1,8);
Lcd_Write_Char((pTimeArray[0]%10)+0x30 );

Lcd_Set_Cursor(1,9);

Lcd_Write_Char(' ');
Lcd_Set_Cursor(1,10);

switch(pTimeArray[3])
{
case 0: Lcd_Write_String("AM"); break;
case 1: Lcd_Write_String("PM"); break;

default:
break;
}
}




void DisplayDateOnLCD( unsigned char* pDateArray )
{
Lcd_Set_Cursor(2,1);

Lcd_Write_Char( (pDateArray[1]/10)+0x30 );
Lcd_Set_Cursor(2,2);
Lcd_Write_Char( (pDateArray[1]%10)+0x30 );
Lcd_Set_Cursor(2,3);

Lcd_Write_Char('/');
Lcd_Set_Cursor(2,4);

Lcd_Write_Char( (pDateArray[2]/10)+0x30 );
Lcd_Set_Cursor(2,5);
Lcd_Write_Char( (pDateArray[2]%10)+0x30 );
Lcd_Set_Cursor(2,6);

Lcd_Write_Char('/');
Lcd_Set_Cursor(2,7);

Lcd_Write_Char( (pDateArray[3]/10)+0x30 );
Lcd_Set_Cursor(2,8);
Lcd_Write_Char( (pDateArray[3]%10)+0x30 );
Lcd_Set_Cursor(2,9);

Lcd_Write_Char(' ');
Lcd_Set_Cursor(2,10);

switch(pDateArray[0])
{
case 1: Lcd_Write_String("MON"); break;
case 2: Lcd_Write_String("TUE"); break;
case 3: Lcd_Write_String("WED"); break;
case 4: Lcd_Write_String("THU"); break;
case 5: Lcd_Write_String("FRI"); break;
case 6: Lcd_Write_String("SAT"); break;
case 7: Lcd_Write_String("SUN"); break;

default: Lcd_Write_String("???"); break;
}
}

# 2 "EEPROM.h"
void EEPROMSET(void);
void EEPROMGET(void);
unsigned char readEEPROM(unsigned char address);
void writeEEPROM(unsigned char address, unsigned char datas);


unsigned char readEEPROM(unsigned char address)
{
EEADR = address;
EEPGD = 0;
RD = 1;
return EEDATA;
}

void writeEEPROM(unsigned char address, unsigned char datas)
{
unsigned char INTCON_SAVE;
EEADR = address;
EEDATA = datas;
EEPGD = 0;
WREN = 1;
INTCON_SAVE=INTCON;
INTCON=0;
EECON2=0x55;
EECON2=0xAA;
WR = 1;
INTCON = INTCON_SAVE;
WREN = 0;
while(EEIF == 0)
{

}
EEIF = 0;
}

# 27 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\stdlib.h"
typedef struct {
int rem;
int quot;
} div_t;
typedef struct {
unsigned rem;
unsigned quot;
} udiv_t;
typedef struct {
long quot;
long rem;
} ldiv_t;
typedef struct {
unsigned long quot;
unsigned long rem;
} uldiv_t;

# 65
extern double atof(const char *);
extern double strtod(const char *, const char **);
extern int atoi(const char *);
extern unsigned xtoi(const char *);
extern long atol(const char *);
extern long strtol(const char *, char **, int);

extern int rand(void);
extern void srand(unsigned int);
extern void * calloc(size_t, size_t);
extern div_t div(int numer, int denom);
extern udiv_t udiv(unsigned numer, unsigned denom);
extern ldiv_t ldiv(long numer, long denom);
extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
extern unsigned long _lrotl(unsigned long value, unsigned int shift);
extern unsigned long _lrotr(unsigned long value, unsigned int shift);
extern unsigned int _rotl(unsigned int value, unsigned int shift);
extern unsigned int _rotr(unsigned int value, unsigned int shift);




extern void * malloc(size_t);
extern void free(void *);
extern void * realloc(void *, size_t);

# 98
extern int atexit(void (*)(void));
extern char * getenv(const char *);
extern char ** environ;
extern int system(char *);
extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
extern int abs(int);
extern long labs(long);


extern char * itoa(char * buf, int val, int base);
extern char * utoa(char * buf, unsigned val, int base);




extern char * ltoa(char * buf, long val, int base);
extern char * ultoa(char * buf, unsigned long val, int base);

extern char * ftoa(float f, int * status);

# 30 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\math.h"
extern double fabs(double);
extern double floor(double);
extern double ceil(double);
extern double modf(double, double *);
extern double sqrt(double);
extern double atof(const char *);
extern double sin(double) ;
extern double cos(double) ;
extern double tan(double) ;
extern double asin(double) ;
extern double acos(double) ;
extern double atan(double);
extern double atan2(double, double) ;
extern double log(double);
extern double log10(double);
extern double pow(double, double) ;
extern double exp(double) ;
extern double sinh(double) ;
extern double cosh(double) ;
extern double tanh(double);
extern double eval_poly(double, const double *, int);
extern double frexp(double, int *);
extern double ldexp(double, int);
extern double fmod(double, double);
extern double trunc(double);
extern double round(double);

# 19 "RTC_F.c"
void CSFSensors(void);
void Settings(void);
float CLeakage(void);
void avgpow();

int x,mins,secs,ihh,imm,iss,iap,iDD,iMM,iYY,iDAY;
int avgpower=0,count=0;

float current;
char text[16];

void EEPROMSET(void)
{
int x;
for(x=0;x<12;x++)
writeEEPROM(x,number[x]);
_delay((unsigned long)((50)*(8000000/4000.0)));
}

void EEPROMGET(void)
{
int x;
for(x=0;x<12;x++)
number[x]=readEEPROM(x);
_delay((unsigned long)((50)*(8000000/4000.0)));
}

void InitUnit(void)
{ char Key = 'n';
EEPROMGET();
TRISA = 0xFF;
TRISD = 0x00;
PORTD = 0X00;
ADC_Init();
TRISE=0x04;
RE0=0;
RE1=1;
TRISC=0XFF;
RD0=0;
InitKeypad();
InitI2C();
RE0=0;
RE1=1;
Lcd_Init();
Lcd_Clear();
Lcd_Set_Cursor(1,1);
Lcd_Write_String("    WELCOME");
Lcd_Set_Cursor(2,1);
Lcd_Write_String("****************");
RD1=1;
_delay((unsigned long)((1500)*(8000000/4000.0)));
RD1=0;
_delay((unsigned long)((1500)*(8000000/4000.0)));
Lcd_Clear();
Lcd_Set_Cursor(1,1);
Lcd_Write_String(" Initializing.!");
_delay((unsigned long)((2000)*(8000000/4000.0)));
Lcd_Clear();
_delay((unsigned long)((300)*(8000000/4000.0)));
Lcd_Set_Cursor(1,1);
Lcd_Write_String(" Initializing.!");
_delay((unsigned long)((2000)*(8000000/4000.0)));
Lcd_Clear();
_delay((unsigned long)((300)*(8000000/4000.0)));
Lcd_Set_Cursor(1,1);
Lcd_Write_String(" Initializing.!");
_delay((unsigned long)((2000)*(8000000/4000.0)));
Lcd_Clear();
_delay((unsigned long)((300)*(8000000/4000.0)));
Lcd_Set_Cursor(1,1);
Lcd_Write_String("Press");
Lcd_Set_Cursor(2,1);
Lcd_Write_String("F1 for Settings");
Key = GetKeySettings();
if(Key=='/')
Settings();
Lcd_Clear();
_delay((unsigned long)((300)*(8000000/4000.0)));
Lcd_Set_Cursor(1,1);
Lcd_Write_String("    Switch ON");

RD0=1;
RE0=1;
RE1=0;
_delay((unsigned long)((2000)*(8000000/4000.0)));

}

void Settings(void)
{
while(1)
{
char Key = 'n';
char nkey='n';
Lcd_Clear();
Lcd_Set_Cursor(1,1);
Lcd_Write_String("1:Numb 2:Time ");
Lcd_Set_Cursor(2,1);
Lcd_Write_String("3:Date 4:ShowInf");
Key = GetKey();
switch(Key)
{
case '1': Lcd_Clear();
Lcd_Set_Cursor(1,1);
Lcd_Write_String("Enter number");
_delay((unsigned long)((1000)*(8000000/4000.0)));
Lcd_Clear();
while(1)
{

nkey=GetKeyNumber();
Lcd_Clear();
Lcd_Set_Cursor(1,8);
Lcd_Write_Char(nkey);
Lcd_Set_Cursor(2,1);
Lcd_Write_String(number);

if(x==12)
{
Lcd_Clear();
Lcd_Set_Cursor(1,1);
Lcd_Write_String(" Entered Number");
Lcd_Set_Cursor(2,2);
Lcd_Write_String(number);
EEPROMSET();
_delay((unsigned long)((2000)*(8000000/4000.0)));
break;
}
}
break;

case '2': Lcd_Clear();
Lcd_Set_Cursor(1,1);
Lcd_Write_String("HH:MM:SS:AM/PM");
Lcd_Set_Cursor(2,1);
Lcd_Write_String("AM - 1    PM-2");
while(1)
{
nkey=GetKeyTime();
Lcd_Clear();
Lcd_Set_Cursor(1,8);
Lcd_Write_Char(nkey);
Lcd_Set_Cursor(2,1);
sprintf(txt,"%s:%s:%s:%s",hh,mm,ss,ap);
Lcd_Write_String(txt);

if(c==3)
{
Lcd_Clear();
Lcd_Set_Cursor(1,1);
Lcd_Write_String(" Entered Time");
Lcd_Set_Cursor(2,2);
Lcd_Write_String(txt);

_delay((unsigned long)((2000)*(8000000/4000.0)));
ihh = atoi(hh);
imm = atoi(mm);
iss = atoi(ss);
iss = atoi(nkey);
Set_DS1307_RTC_Time(iap, ihh, imm, iss);

Lcd_Clear();
break;
}
}
break;

case '3': Lcd_Clear();
Lcd_Set_Cursor(1,1);
Lcd_Write_String("DD:MM:YY:DAY");
while(1)
{
nkey=GetKeyDate();
Lcd_Clear();
Lcd_Set_Cursor(1,8);
Lcd_Write_Char(nkey);
Lcd_Set_Cursor(2,1);
sprintf(txt,"%s:%s:%s %s",DD,MM,YY,DAY);
Lcd_Write_String(txt);

if(h==1)
{
Lcd_Clear();
Lcd_Set_Cursor(1,1);
Lcd_Write_String(" Entered Date");
Lcd_Set_Cursor(2,2);
Lcd_Write_String(txt);
_delay((unsigned long)((2000)*(8000000/4000.0)));
iDD = atoi(DD);
iMM = atoi(MM);
iYY = atoi(YY);
iDAY= atoi(cDAY);


Set_DS1307_RTC_Date(iDD, iMM, iYY, iDAY);

_delay((unsigned long)((2000)*(8000000/4000.0)));
break;
}
}
break;

case '4': Lcd_Clear();
Lcd_Set_Cursor(1,1);
int x=0;
while(1)
{
Lcd_Clear();
Lcd_Set_Cursor(1,1);

DisplayTimeToLCD(Get_DS1307_RTC_Time());


DisplayDateOnLCD(Get_DS1307_RTC_Date());

_delay((unsigned long)((1500)*(8000000/4000.0)));

Lcd_Clear();
Lcd_Set_Cursor(1,1);
Lcd_Write_String("Phone Number :");
Lcd_Set_Cursor(2,1);
Lcd_Write_String(number);
_delay((unsigned long)((1500)*(8000000/4000.0)));
x++;
if(x==3)
{
Lcd_Clear();
break;
}
}
break;

default : continue;

}

Lcd_Clear();
Lcd_Set_Cursor(1,1);
Lcd_Write_String("F1:Edit ");
Lcd_Set_Cursor(2,1);
Lcd_Write_String("F2:Exit");
Key = GetKey();
if(Key=='x')
break;
else
continue;

}
}

float CLeakage(void)
{ unsigned int a,b,c,dif,current_bits;

ADC_Init();
a = ADC_Read(0);
ADC_Init();
b = ADC_Read(1);
ADC_Init();
c = ADC_Read(2);



if(a>(c/2))
current_bits=a-(c/2);
else
current_bits=(c/2)-a;
float power;
if(current_bits>=5)
current=(current_bits*0.0488);
else
current=0;
float voltage=(230.0/330.0)*b;
power=current*voltage*0.8;
sprintf(text,"    %d W",(int)power);

Lcd_Set_Cursor(2,1);
Lcd_Write_String(text);

avgpower=(avgpower+(int)power);

count++;

}

void CheckSensors(void)
{
if(RC1==0 || RC2==0)
{
RD0=0;
RE0=0;
RE1=1;

Lcd_Clear();
Lcd_Set_Cursor(1,1);
Lcd_Write_String("     DANGER");
_delay((unsigned long)((2000)*(8000000/4000.0)));
GSM_Send();
Lcd_Clear();
Lcd_Set_Cursor(1,1);
Lcd_Write_String("Message Sent!");
_delay((unsigned long)((2000)*(8000000/4000.0)));
Lcd_Clear();
Lcd_Set_Cursor(1,1);
Lcd_Write_String("     DANGER");
while(1)
{}
}
}

void main(void)
{
InitUnit();

while(1)
{
if(RC0==0)
{
for(x=1;x<120;x++)
{
mins=x/60;
secs=x%60;
sprintf(text,"      0%d:%d",mins,secs);
Lcd_Clear();
Lcd_Set_Cursor(1,1);
Lcd_Write_String(text);
_delay((unsigned long)((800)*(8000000/4000.0)));

CheckSensors();


if(RC0==1)
break;

if(x==119 || RE2==0)
{
RD0=0;
Lcd_Clear();
Lcd_Set_Cursor(1,1);
Lcd_Write_String("   Switched OFF");
RE0=0;
RE1=1;

_delay((unsigned long)((20000)*(8000000/4000.0)));
while(1)
{}

}
}

}

else
{

CheckSensors();

Lcd_Clear();
Lcd_Set_Cursor(1,1);
Lcd_Write_String("    Switch ON");
CLeakage();
_delay((unsigned long)((1000)*(8000000/4000.0)));

if(RE2==0)
{
RD0=0;
Lcd_Clear();
Lcd_Set_Cursor(1,1);
Lcd_Write_String("   Switched OFF");
RE0=0;
RE1=1;
_delay((unsigned long)((1000)*(8000000/4000.0)));
avgpow();
while(1)
{}

}


}

}

}

void avgpow()
{
Lcd_Clear();
Lcd_Set_Cursor(1,1);
sprintf(text,"AVGPOWER = %d W",(avgpower/count));
Lcd_Write_String(text);
}

